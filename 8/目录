0介绍
1入门
1.1个人技能
1.1.1学会Debug
1.1.2如何分离问题debug
1.1.3如何移除错误
1.1.4如何用Log来Debug
1.1.5如何理解性能的问题
1.1.6如何解决性能的问题
1.1.7如何优化循环
1.1.8如何处理I/O开销
1.1.9如何管理内存
1.1.10如何处理偶现的Bug
1.1.11如何学习设计技能
1.1.12如何进行实验

1.2团队技能
1.2.1为什么预估很重要
1.2.2如何预估编程时间
1.2.3如何搜索信息
1.2.4如何把人们作为信息源
1.2.5如何优雅地写文档
1.2.6如何在垃圾代码上工作
1.2.7如何使用源代码控制
1.2.8如何进行单元测试
1.2.9没有思路的时候，休息一下
1.2.10如何决定下班时间
1.2.11如何与不好相处的人相处


2进阶
2.1个人技能
2.1.1如何保持充满动力
2.1.2如何才能被广泛信任
2.1.3在时间和空间之间该如何权衡
2.1.4如何进行压力测试
2.1.5如何权衡简介与抽象
2.1.6如何学习新技能
2.1.7学会打字
2.1.8如何进行集成测试
2.1.9交流语言
2.1.10重要的工具
2.1.11如何分析数据

2.2团队技能
2.2.1如何管理开发时间
2.2.2如何管理第三方软件风险
2.2.3如何管理咨询
2.2.4如何适度交流
2.2.5如何直言不赞同以及如何避免

2.3评判
2.3.1如何权衡开发质量与开发时间
2.3.2如何管理软件系统依赖
2.3.3如何评判一个软件是否太不成熟了
2.3.4如何决定购买还是构建
2.3.5如何专业地成长
2.3.6如何评估面试
2.3.7如何知道何时实施昂贵的计算机科学
2.3.8如何与非工程师交谈


3高级
3.1技术评判
3.1.1如何从不可能的事情中找到困难的地方
3.1.2如何使用嵌入型语言
3.1.3选择语言

3.2机智地妥协
3.2.1如何与时间压力作斗争
3.2.2如何理解用户
3.2.3如何获得晋升

3.3服务你的团队
3.3.1如何发展才能
3.3.2如何选择工作内容
3.3.3如何从你的同伴身上获得最大收益
3.3.4如何分割问题
3.3.5如何处理无趣的问题
3.3.6如何为一个工程获取支持
3.3.7如何发展一个系统
3.3.8如何高效交流
3.3.9如何把别人不想听的话说给他们听
3.3.10如何处理管理神话
3.3.11如何处理混乱的组织


4词汇表
5附录A-书籍/网站
6附录B-历史（至2016年1月）
7附录C-贡献（至January2016）



引言

做一个好的程序员，困难而高尚。将一个软件工程集体愿景变为现实，最困难的地方在于与你的同事和顾客相处。编程很重要，这需要强大的智力和技能。但在好的程序员看来，相比构建一个让客户和各种各样的同事都满意的软件系统，（纯粹的）编程真的只是小孩子的玩意。在这篇文章里，我尝试尽可能简洁地总结那些当我21岁时，希望别人告诉我的事。

这可能很主观的，所以，这篇文章注定不适用于所有人，并且有的内容有点武断。我尽量写一些程序员在ta的工作中，非常可能会遇到的事情。大部分这些问题以及他们的解决方案在人们的环境中如此普遍，以至于我（说的）可能有点唠叨。尽管如此，我还是希望这篇文章是有用的。

我们在课堂上学习编程。那些著作:The Pragmatic Programmer[Prag99], Code Complete[CodeC93], Rapid Development[RDev96], 以及Extreme Programming Explained[XP99]都传授编程（知识），并阐述做一个好的程序员这个大话题。在读这篇文章之前，或者就是现在，你当然也应该读一读Paul Graham[PGSite]和Eric Raymond[Hacker]的文章。但与那些著作不同，这篇文章强调社交问题并且总结了整套我所知的必须的技能。

在这篇文章里，boss这个词指的是任何一个交给你工程去做的人。除了一些语境外，我会同义地使用交易，公司，集体这些词，比如，交易意味着赚钱，公司意味着现代的工作空间，集体一般是那些你一起工作的人。
欢迎来到这个群体。