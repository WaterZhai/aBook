第2章   充分利用命令行

命令shell提供了一个功能强大的环境，使得管理员可以使用命令与脚本完成很多工作。如第1章中所述，可以在命令行中运行很多类型的命令，包括系统内置的命令、Windows工具以及带有命令行扩展的应用程序。每一个运行的命令都遵循同样的语法规则，而不论其出处。这些规则要求命令行中运行的每一个命令都由命令名开始，其后跟随着必须的或可选的参数。在参数中还可以使用重定向方法指定输入源、输出目标以及错误日志。
在命令shell中执行命令时，实际上涉及如下一些活动。
（1）命令shell使用实际值（实参）来替换用户在命令文本中输入的变量（形参）。
（2）在单一命令行中结成命令链（或分组）并传递的多条命令被分解为单独的命令，每条命令带有自己的命令名与参数，并按序分别进行处理。
（3）如果命令名带有文件路径，则命令shell将使用这一路径找到该命令，如果在指定位置找不到该命令，则命令shell将返回错误信息。
（4）如果命令名没有指定文件路径，则命令shell会尝试对该命令名进行内部解析。如果可以找到匹配项，则说明该命令是一条内置命令，可以立即执行。如果找不到匹配项，则命令shell会在当前目录下查找该命令的可执行文件，之后搜索该可执行文件的命令路径。如果所有这些位置都无法找到该命令，则命令shell会返回错误信息。
（5）如果命令成功定位，则该命令会使用制定的参数运行，包括那些要求输入的参数。命令输出与错误信息将会回显到命令窗口，或者写入到存出输出信息与错误日志的位置。
从上面可以看出，很多因素都可以影响命令的执行过程，包括命令路径设置、使用的重定向技术，以及多条命令是否构成一个命令链或分组等。本章将根据这些因素对命令的执行过程进行分解，以便帮助读者最充分地利用命令行来高效完成自己的工作。不过再进行这些分解讨论之前，我们先来看一下启动命令shell的一些衡量要素，并介绍嵌套命令shell的概念。

2.1管理命令shell的启动方式
    在以前使用命令行工作时，你启动命令提示符的方式很可能是使用鼠标依次点击“启动”、“所有程序”、“附件”，之后选择“命令提示符”。然而，由这种方式启动的命令提示符只具备标准用户的权限，而不是管理员权限，因而无法执行很多管理任务。要以管理员权限启动命令提示符，则应该使用鼠标依次单击“启动”、“所有程序”、“附件”，之后用右键单击“命令提示符”，之后在运行方式中选择“以管理员身份运行”。
    此外，还有其他一些方式也可以启动命令行。比如，使用开始菜单中的“搜索”对话框、“运行”对话框，或者在命令shell窗口中键入cmd等方式。通过这些技术可以向命令行传递一些参数，包括用于控制命令行工作方式的参数（控制开关），以及用于执行其他命令的参数。比如，可以通过cmd /q命令以静默模式启动命令shell（这意味着命令回显被关闭），而如果希望命令shell在执行一条命令后就退出，就可以使用cmd /c命令，其后跟随着包含在引号中的命令文本。下面给出一个示例，启动命令shell，将ipconfig命令的输出发送到名为data的子目录下的一个文件中，之后退出命令shell：cmd /c "ipconfig > c:\data\ipconfig.txt"
    （注解  要保证这一命令有效工作，data子目录必须存在。比外，从“开始”菜单的“搜索”对话框或“运行”对话框启动命令提示符时，命令提示符是以标准用户权限运行的。这意味着，你无法执行某些特定的管理任务，也不能将数据写入到对安全性比较敏感的系统位置。比如，如果你想把上面命令的输出重定向到C盘根目录（如c:\ipconfig.txt），则命令提示符没有足够的权限来创建该文件，从而导致命令执行失败。）
    表总结了Windows命令shell（cmd.exe）的一些关键参数，要注意的是，有一些命令行参数是默认设置的。由于这一原因，命令行通常是用标准的ANSI字符编码进行命令输出（而不使用Unicode字符编码），并激活命令扩展，从而为大多数内置的命令扩充了功能。
        ------------------------------------------------------------
        参数   |描述
        ------|---------------------------------------------------
        /C    |执行指定的命令，之后退出命令shell
        /K    |执行指定的命令，之后保持交互模式
        /A    |到文件（或管道）的命令输出设置为ANSI格式（默认设置）
        /U    |到文件（或管道）的命令输出设置为Unicode格式
        /Q    |开启静默模式，意味着命令回显被关闭。默认情况下，命令回显是开启的
        /T:fg |位控制台窗口设置前台与背景颜色，这里fg是COLOR命令中定义的两个值
        /E:ON |激活命令扩展（默认设置）
        /E:OFF|禁用命令扩展
    （注解  有些参数不能与其他开关一起使用。比如，你不能同时激活ANSI与Unicode两种字符编码格式。如果同时使用/A与/U，或/E:ON与/E:OFF，则命令shell会选择命令行中最后传递的选项。）
    有些情况下，你可能需要为某命令行使用不同的环境设置与参数，之后返回到原始的设置，而不退出控制台。为做到这一点，可以使用嵌套（nesting）技术。通过嵌套技术，你可以再命令行中启动另外的命令行，新启动的嵌套命令行会继承当前命令行的环境设置。在嵌套命令行中，你可以根据需要修改环境设置，并使用新的设置来执行命令与脚本。之后，在键入exit退出嵌套命令行时，会返回到原命令行，并且恢复原来的环境设置。
    （提示  在开始使用命令shell时，应该记住的是一些字符有特定的含义，命令shell在遇到这些字符时，会按照该字符特定含义所对应的流程执行。这些特殊字符包括<、>、(、)、&、|、@、^。如果想把某个特殊字符用作常规字符，就必须使用相应的换码符来规避该字符原有的特殊含义，是的命令shell将其看成一个普通字符，而不再调用该字符特殊含义所对应的流程。这里使用的换码字符是^，在标准键盘上是按键6对应的字符，使用^作为引导，就可以规避字符的特殊含义。）
2.2使用命令路径进行工作
    Windows操作系统使用命令路径来定位可执行文件，并根据文件的扩展名来判定文件类型是否为可执行文件。通过使用文件关联技术，可以将特定的应用程序映射为某种文件扩展名。接下来的两个小节将讨论用命令路径、文件扩展以及文件关联的相关技术。
    2.2.1管理命令路径
        通过PATH命令，可以查看可执行文件的当前命令路径。启动命令shell，在命令行中键入path，按Enter键。如果已经安装了Windows PowerShell，将会生成类似于如下的一些结果：
        PATH=C:\Windows\system32;C:\windows\System32\wbem;C:\windows\System32\PowerShell\V2.0
        （注解  这里，分号(;)起到分隔不同路径的作用，命令shell使用分号来确定某文件路径的终点与灵异文件路径的起点。）
        在登录系统后，命令路径是使用系统与用户环境变量进行设置的，即%PATH%变量。在设置时，路径中目录列出的顺序代表了命令行搜索可执行文件时采用的顺序。在上面的例子中，命令行会以如下顺序进行搜索：
        （1）C:\Windows\system32
        （2）C:\windows
        （3）C:\windows\system32\Wbem
        （4）C:\windows\system32\PowerShell\v2.0
        通过SETX命令，可以在系统环境中永久性地改变命令路径。比如，如果想将特定的目录用于脚本与应用程序，就可能需要更新路径信息。要做到这一点，可以使用SETX命令来想已存在的路径中添加一条特定的路径，比如使用命令setx PATH  "%PATH%;C:\Scripts"。
        （注解  这里离，引号与分号分别其道不同的作用，通过引号将%PATH%;C:\Scripts封装在一起，使其被命令shell理解为SETX的第二个参数，分号则与上面讨论的作用类似，用于确定某文件路径的重点与灵异文件的起点。）
        （提示  由于命令路径是某次登录中设置的，必须先注销该次登录，之后重新登录，才可以在命令提示符中查看已修订的路径。如果不想注销，但又希望查看所作的命令路径设置是否正确，则可以使用"系统属性"对话框。方法是：在“控制面板\系统”中，单击任务面板中的“高级系统设置”，之后在“系统属性”对话框中的“高级”选项卡中单击“环境变量”。）
        在这个例子中，目录C:\Script被添加到现存的命令路径中。因而，如果此时向上面那样使用path命令，将会看到类似于如下的一些结果：
        PATH=C:\windows\system32;C:\windows;C:\windows\system32\Wbem;C:\Windows\system32\powershell\v2.0;C:\Scripts
        回想一下Windows使用的路径搜索顺序。由于路径是按顺序搜索的，因此，C:\Scripts目录将是最后一个被搜索的，这又是会降低监本的执行速度。要想让Windows能更快地搜索并执行脚本，可以将C:\Scripts设置为第一个搜索的目录。在这一例子中，可以通过如下命令进行设置：
        setx PATH “C:\Scripts;%PATH%”
        要注意的是，在设置命令路径时，有可能会无意间重写所有路径信息。比如，在设置路径时，如果没有指定环境变量%PATH%，就会删除所有其他的路径信息。一个可以确保重建命令路径的方法是将命令路径的副本写入到文件中。要将当前命令路径写入文件，可以在命令行中键入path>orig_path.txt。要注意的是，如果使用的是标准用户权限的命令提示符，而不是管理员权限的命令提示符，就无法将路径信息写入到对安全性敏感的系统位置。在这个例子中，你可以将路径信息写入到拥有访问权限的子目录中，也可以写入到自己的profile中。要将命令路径写入到命令shell窗口，则只需键入path。
        现在，你可以看到一个列表或文件，其中包含了原始命令路径的列表。此外，path命令不仅可以列出当前的命令路径，还可以为当前命令shell设置临时的命令路径。比如，键入path %PATH%;C:\Script，就可以将C:\Scripts目录添加到当前命令shell的命令路径。
    2.2.2管理文件扩展与文件关联
        通过使用文件扩展，在命令行中只需键入命令名就可以执行命令，有两种类型的文件扩展。
        · 可执行文件的文件扩展。可执行文件是使用环境变量%PATHEXT%进行设置的，在命令行中键入set pathext，即可查看当前的设置。默认的设置是:PATHEXT=.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC。根据这一设置，命令shell可以判定哪些文件是可执行文件，哪些不是，因为不需要再命令行中显式地指定文件扩展名。
        · 应用程序的文件扩展。应用程序的文件扩展也就是文件关联（file association）。通过文件关联，可以将参数传递给可执行文件。这样，通过双击文件图标就可以打开文档、电子表格或其他应用程序文件。系统中每种已知的扩展都对用某种文件关联，通过键入assoc，其后跟随扩展名，就可以查看对应的文件关联，比如assoc.exe。反过来，每一文件关联都指定了某种文件扩展对应的文件类型，通过键入命令FTYPE，其后跟随文件关联，就可以查看对应的文件类型，比如ftype exefile。
        对于可执行文件，文件扩展的顺序设定了命令行使用的搜索顺序（以每一个目录为基础）。因而，如果命令路径中某个目录下游多个可执行程序与提供的命令名匹配，那么.com文件将优先于.exe文件执行。
        每一种已知的文件扩展（即便是可执行文件的）都有对应的文件关联与文件类型。大多数情况下，文件类型在形式上都是扩展文本（不包括句点）后面跟随关键字file，比如cmdfile、exefile或batfile等。文件关联规定第一个传递的参数是命令名，其余参数应该传递给应用程序。
        要查看已知文件扩展对应的文件类型与文件关联，可以使用ASSOC命令与FTYPE命令。要查看文件关联，可以键入assoc，其后跟随文件扩展（包括句点）。ASSOC命令的输出是文件类型。所以，如果键入ftype association（这里association是ASSOC命令的输出），
