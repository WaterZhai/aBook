第5章  管理Windows系统

作为系统管理员，主要的工作就是规划、组织系统与网络的正常运行，并能对网络运行的一些详细信息进行追踪与分析。如果你不想敷衍了事地应付这些工作，就应该学习如何以更加高效的方式来快速地完成这些工作。幸运的是，Windows提供了大量的命令行工具来帮助管理员完成这些任务，本章将讨论一些可用于系统日常管理的重要工具。

5.1检查系统信息
    通常，在使用某用户的计算机或远程服务器时，你可能需要检查一些基本的系统信息。比如，有哪些用户登录系统、当前的系统时间或者某特定文件在系统中的存放位置等。可用于收集基本系统信息的命令包括如下4个。
    · DATE。可显示并设置当前系统日期。
    · TIME。可显示并设置当前系统时间。
    · WHOAMI。显示当前登录到系统的用户名，比如adatum\Administrator。
    · WHERE。使用某种搜索模式搜索文件，并返回一些匹配的结果。
    要使用DATE或TIME命令，可以在命令shell窗口中键入命令，其后跟随/T参数，并按Enter键。比如，命令time /t的输出为Web 03/19/2008，命令date /t的输出为04：35 PM。要设置系统日期与时间，则可以在相应命令后指定想要设置的日期或时间。设置当前日期时，输入日期的格式为MM-DD-YY。其中，MM、DD、YY分别代表用两个数字表示的月份、日期、年份。比如，要设置当前日期为2008年3月20日，则需要输入03-20-08。
    设置当前时间时，输入时间的格式为HH：MM或HH：MM：SS。其中，HH、MM、SS分别为两个数字表示的小时、分数、面熟。如果输入时间时没有指定A.M.说P.M.，则系统会默认使用24小时制。其中，HH为00到11时代表A.M.，12到23时代表P.M.。下面几条命令的结果都是将时间设置为下午4点45分：
        time 04:45 PM
        time 04:45:00 PM
        time 16:45:00
    要使用WHOAMI命令来确定当前登录系统的用户，可以在命令shell窗口中键入该命令，之后按Enter键。如果该计算机是某工作组的一部分，则输出信息包括该计算机名，其后跟随一个反斜杠，之后跟随登录用户名，比如computer84\deanr。如果该计算机是某个域的一部分，则输出信息包括该计算机所属的域名，其后跟随一个反斜杠，之后跟随登录用户名，比如adatum\williams。
    默认情况下，WHERE命令会在当前目录以及环境变量PATH指定的路径中进行搜索。因此，只要在命令shell窗口中键入where命令，其后跟随要搜索的可执行程序名，就可以快速地在当前路径中搜索该可执行程序。比如，要想搜索CMD.EXE，可以键入如下命令：
        where cmd.exe
    上面命令的输出结果为CMD.EXE的全文件路径：
        c:\windows\system32\cmd.exe
    使用where命令时，还有一种最常用的语法格式为：
        where /r baseDir filename
    上面的命令格式中，/r代表从指定的目录（\baseDir）开始递归搜索，包含所有子目录。filename代表要搜索文件的全名或部分名，其中可以包括通配符。？可以匹配单个字符，*可以匹配多个字符。比如，data???.txt或data*.*。下面的命令会在c:\目录及其所有子目录下搜索文件名以data开始的文本文件：
        where /r c:\data*.txt
    下面的命令则搜索文件名以data开始的所有类型文件：
        where /r c:\data*.*
    有时候，可能需要获取系统配置信息或系统环境信息。对于那些关键性的系统，可能还需要将这些信息保存或打印出来，用来检索和使用。如下一些命令可以帮助管理员收集系统信息。
    · DRIVERQUERY。该命令可以显示一个列表，其中列出了系统中所有已安装的设备驱动程序及其属性，包括模块名、显示名、驱动程序类型、驱动程序连接日期等信息。使用详细模式进行输出时，该命令还会列出驱动程序状况、状态、启动模式、内存使用情况、文件系统路径等信息。通过使用/v参数，可以获取所有未签名驱动程序的详细输出。
    · SYSTEMINFO。该命令可以显示详细的系统配置信息，包括操作系统版本、系统类型、系统制造商、处理器、BIOS版本、内存大小、系统区域设置、时区设置、网卡配置等信息。此外，该命令还可以显示系统中已经安装了哪些热点补丁。
    要在本地系统中使用这些命令，可以在命令shell窗口中键入命令名，之后按回车。使用DRIVERQUERY命令时，可以指定/v参数来获取未签名驱动程序的详细信息，也可以指定/Si参数来显示签名驱动程序的属性信息，比如：
        driverquery /si
    使用DRIVERQUERY命令与SYSTEMINFO命令时，也可以指定要查询的远程计算机与运行许可权限。要做到这些，必须使用扩展的语法格式，包括如下参数：
        /S Computer /U [Domain\] User [/P Password]
    其中，Computer代表远程计算机名或IP地址，Domain代表域名（可选的，用户账号存在于该域内），User代表用户账号名（想使用的就是该用户的许可权限），Password代表该用户账号的口令（可选的）。如果不指定域名，则命令shell会将当前域名假定为该用户所在的域。如果不提供账号口令，则系统会呈现一个提示符要求输入口令。
    要具体了解计算机与用户信息怎样被添加到这种扩展的语法格式中，可以参考如下的实例。
    使用账号adatum\wrstanek查询MAILER1的驱动程序设置：
        driverquery /s mailer1 /u adatum\wrstanek
    使用账号adatum\administrator查询CORPSERVER01的系统信息：
        systeminfo /s corpserver01 /u adatum\administrator
    （提示  这些命令的基本输出格式为表格格式。通过使用/Fo List或/Fo Csv，也可以将输出格式分别转换为列表或以逗号分隔开的行，之所以要使用不同的输出格式，是因为不同格式命令的输出信息存在较大差别。比如，使用SYSTEMINFO命令时，如果想查看关于系统配置信息的所有详细资料，可以使用列表格式输出/Fo List）;使用DRIVERQUERY命令时，如果正在对未签名驱动程序进行故障排除，则可以使用详细列表格式输出（/Fo List  /v）。进一步地，对于以后可能会导出到电子表格或非关系数据库的文件，建议使用逗号分隔的行格式进行存储。此外，通过使用输出重定向符号（>或>>）,可以将DRIVERQUERY命令与SYSTEMINFO命令的输出信息重定向到特定的文件。）
5.2操作注册表
    Windows注册表存储了配置信息，通过使用命令行工具Reg，可以很方便地对注册表进行查看、添加、删除、比较、复制等操作。由于Windows注册表对Windows系统的正确运行是至关重要的，在修改注册表之前，要确保已经理解所作的修改对系统会有怎样的影响。在以任何方式编辑注册表之前，应该进行完全的系统备份，并创建系统恢复数据快照。这种做的发意义在于：如果所做的修改是错误的，或者对系统有不利影响，就可以通过备份数据对系统与注册表进行恢复。
    （警告  错误修改Windows注册表可能会引发严重问题，如果对注册表造成严重损坏，你可能不得不重装系统。在执行注册表相关命令之前，要认真理解该命令的用法，确保这些命令能正确地达到预定执行目标。）
    5.2.1理解注册表与键值
        Windows注册表存储了操作系统、应用程序、用户以及硬件等设备的配置设置信息。这些信息是以注册表键与键值的形式存储的，注册表键与键值存储在特定的root键下，并由其控制不同键与键值的使用时间和方式。
        表列出了注册表的root键及其描述信息，并给出了引用名（使用REG命令操作注册表时，可以根据引用名来引用不同的root键）。在root键之下，包含了一些子健，用于对系统、用户、应用程序以及硬件的设置信息进行控制。这些子健在组织形式上为树结构，使用文件夹来表示键值。比如，在HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services键下，可以发现一些与系统中已安装的所有服务相关的文件夹。这些文件夹中包含了注册表键值，键值中存储了重要的服务配置设置信息以及一些子健。
        要想操作某个注册表键，必须指定某文件夹路径。比如，DNS键的路径为HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\DNS，要查看并操作该键，可以使用缩略路径名HKEY\SYSTEM\CurrentControlSet\Services\DNS。
            Windows注册表中的键
            ----------------------------------------------------------------------------------------------------
            root键             |引用名|描述
            -------------------|---- |---------------------------------------------------------------------------
            HKEY_CURRENT_USER  |HKCU |存储了当前用户的配置设置信息
            HKEY_LOCAL_MACHINE |HKLM |存储了系统级的配置设置信息
            HKEY_CLASSES_ROOT  |HKCR |存储了应用程序与文件的配置设置信息，可以确保系统使用正确的应用程序打开要访问的文件
            HKEY_USERS         |HKU  |存储了默认用户与其他用户的配置设置信息（根据配置文件）
            HKEY_CURRENT_CONFIG|HKCC |存储了使用中的硬件配置文件的相关信息
            ----------------------------------------------------------------------------------------------------
        注册表键值以一些特定的数据类型进行存储，表总结了注册表键值使用的一些主要数据类型。
            注册表键值与及其数据类型
            -------------------------------------------------------------------------------------------------------------------------------
            数据类型      |描述                                                                                  |实例
            -------------|------------------------------------------------------------------------------------------------------------------
            REG_BINARY   |用于识别二进制值。二进制值采用二进制形式存储（0、1组合），但在现实与输入时采用十六进制格式    |01 00 14 80 90 00 00 9c 00
            REG_DEORD    |用于识别二进制数据类型，以4字节长度的十六进制格式存储32位的整数值                           |0x00000002
            REG_EXPAND_SZ|用于识别可扩展的字符串值，通常用于存储目录路径                                             |%SystemRoot%\dns.exe
            REG_MULTI_SZ |用于识别多个字符串值                                                                     |Tcpip Afd RpcSc
            REG_NONE     |用于识别没有指定特定数据类型的数据。这种数据采用二进制形式存储，但在显示与输入时采用十六进制格式|23 45 67 80
            REG_SZ       |用于识别包含字符序列的字符串值                                                            |DNS Server
            ---------------------------------------------------------------------------------------------------------------------------------
        在知道了注册表键路径以及可用的键值数据类型之后，就可以以多种方式使用REG命令对注册表键进行查阅和操作。REG命令有一些不同的子命令，我们将在下面分别讨论如下的一些子命令。
        · REG add。为注册表添加一个新子健或条目。
        · REG delete。从注册表删除一个子健或条目。
        · REG query。列出某注册表键下的条目以及子健名（如果存在）。
        · REG compare。比较注册表键或条目。
        · REG copy。将注册表条目复制到特定的注册表键路径（本地或远程系统上）。
        · REG flags。显示并管理指定键的当前标记。
        · REG restore。将保存的子健、条目、键值等写回到注册表。
        · REG save。将指定的子健、条目、键值保存到文件。
        除上述命令之外，还对如下一些命令进行了讨论，这些命令可以执行一些高级的注册表操作功能。
        · REG import。将指定的hive文件导入到注册表。
        · REG export。将指定的子健、条目、键值导出到注册表文件。
        · REG loading。将指定的hive文件加载到注册表。
        · REG unload。从注册表卸载指定的hive文件。
        （注解  REG命令以当前用户的权限运行。如果想使用不同的权限，最简单的方式是以具有该权限的用户账号登录。）
    5.2.2查询注册表值
        使用REG query命令，可以引用想要操作的键名或键值的全路径来读取注册表值，其基本语法为：
            reg query KeyName [/v ValueName]
        其中，KeyName为要检查键的键名，ValueName是一个可选的参数，用于指定特定的键值。下面给出的实例中，对current control set中的DNS键进行了查询：
            reg query HKLM\SYSTEM\CurrentControlSet\Services\DNS
        对于这种查询，如果知道待检查键的特定键值，还可以使用另一种方法，该方法使用/V参数对查询结果进行限定。下面的实例中，列出了DNS键的ImagePath条目的值：
            reg query HKLM\SYSTEM\CurrentControlSet\Services\DNS /v ImagePath
        注册表键路径也可以包含UNC名或远程计算机的IP地址，比如\\Mailer或\\192.168.1.100。不过，对远程计算机，只能对HKLM与HKU这两个root键进行操作。下面的实例中，对MAILER1上的DNS键进行查询：
            reg query \\Mailer\HKLM\SYSTEM\CUrrentControlSet\Services\DNS
        （注解  如果指定了不存在的键或键值，命令shell会显示一条错误消息，典型情况下，该消息为错误：系统找不到指定的注册表项或值。）
    5.2.3比较注册表值
        使用REG compare命令，可以对两台系统上相同的注册表条目与键进行比较，也可以对同一系统上两个不同的键进行比较。在如下的场景下，进行注册表比较是有用的。
        · 对服务于应用程序配置的问题进行故障排除。这种情况下，对两台不同系统的注册表陪住进行比较是有用的。理想情况下，两台系统中应该有一台进行了正确配置，要检查的那台配置失误，通过对注册表中相关配置键的比较，就可以发现问题所在。
        · 确保应用程序或服务在多台系统上进行了相同配置。这种情况下，可以使用一台系统作为基准，以便对其他系统的配置进行测试和调整。理想情况下，基准系统应该先按需求目标进行正确配置，之后在对其他系统的配置进行比较和调整。
        REG compare命令的基本语法格式为：
            reg compare KeyName1 keyName2 [/v ValueName]
        其中，KeyName1与KeyName2位待比较的子健名，键名可以包含UNC名或待检查远程计算机的IP地址。ValueName为可选的参数，用于指定带比较的特定键值。下面的实例中，对MAILER1与MAILER2上current control set下的DNS键进行比较：
            reg compare \\Mailer1\HLLM\SYSTEM\CurrentControlSet\Services\DNS
            \\Mailer2\HKLM\SYSTEM\CurrentControlSet\Services\DNS
            如果这两台系统上该键的配置相同，则输出信息为：
            Results Compared： Identical
            The operation completed successfully.
        如果这两台系统上该键的配置不同，则输出信息会显示这种差别。以<字符开始的差别信息属于第一个键，以>字符开始的差别信息则属于第二个键。此外，输出信息中还包括如下声明：
            Results Compared： Different
            The operation completed successfully.
        （提示  之所以会显示差别信息，是因为/Od参数是默认使用的。通过指定其他参数，还可以在输出信息中查看所有的查看信息与匹配信息（/Oa）、只查看匹配信息（/Os），或者没有结果信息（/On）。）
        此外，如果需要递归地比较所有子健与条目，可以使用/S参数，如下所示：
            reg compare \\Mailer1\HKLM\SYSTEM\CurrentControlSet\Services\DNS
            \\Mailer2\HKLM\SYSTEM\CurrentControlSet\Services\DNS /s
        通过这一命令，可以对MAILER1与MAILER2上DNS键及其所有子健与相关条目进行比较。
    5.2.4注册表键的保存与恢复
        在对注册表条目进行修改之前，较好的做法是对要修改的键进行保存。这样，如果有任何错误发生，都可以将这些键恢复到原始的设置。要保存注册表键及其相关子健与值，可以使用REG save命令，如下所示：
            reg save KeyName "FileName"
        其中，KeyName为要保存的子健的路径，FileName为要创建的注册表hive文件名。子健路径也可以包含UNC名或远程计算机的IP地址，不过，对远程计算机，只能对HKLM与HKU这两个root键进行操作。此外，文件名应该包含在双引号中，并以.hiv扩展名结尾，以表明其为注册表hive文件，如下面的实例所示：
            reg save HKLM\SYSTEM\CurrentControlSet\Services\DNS "DNSKey.hiv"
        通过这一命令，将DNS子健及其相关子健与值保存到名为Dnskey.hiv的文件中。文件名中也可以包含目录路径，如下所示：
            reg save \HKLM\SYSTEM\CurrentControlSet\Services\DNS
            "\\Mailer1\SavedData\DNSKey.hiv"
        如果注册表hive文件存在，则命令shell会给出提示信息询问是否重写文件，此时选择Y，也即重写文件。如果希望默认地重写文件，而不弹出提示信息，则可以使用/Y参数。
        要恢复以前保存的注册表键，可以使用Reg restore命令，该命令的语法格式为：
            reg restore KeyName "FileName"
        qizhong ,KeyName为要恢复的子健的路径，FileName为用于恢复注册表键的原始注册表hive文件名。与REG copy命令不同的是，Reg restore命令只能在本地机上执行，而不能使用该命令对远程计算机上的注册表键进行恢复。不过，你可以在远程计算机上启动宇哥远程桌面会话，之后通过远程桌面登录来恢复本地机上的注册表键。
        下面给出了一个使用REG restore命令的实例：
            reg restore HKLM\SYSTEM\CurrentControlSet\Services\DNS "DNSKey.hiv"
        该命令对以前保存在DNSKey.hiv文件中的DNS键进行了恢复。
    5.22.5添加注册表键
        要向Windows注册表中添加子健与值，可以使用REG add命令，其基本语法为：
            reg add KeyName  /v ValueName /t DataType /d Data
        其中，keyName为所要使用的注册表键的键名，ValueName为所要创建的子健或键值，DataType为数据类型，Data为要插入的实际值。尽管这一命令似乎涉及到很多数据和对象，但实际上该命令的使用是很直接的，参考如下实例：
            reg add HKLM\SYSTEM\CurrentControlSet\Services\DNS /v DisplayName
            /t REG_SZ /d "DNS Server"
        上面命令的功能是：向注册表中的DNS键添加一个名为DisplayName的键值，该键的入口为一个包含有DNS Server的字符串。该命令中使用了双引号，因为字符串中包含了空格，使用双引号才能保证命令shell对字符串的正确理解。如果要添加的键或值已经存在，命令shell会给出提示信息询问是否重写数据。选择Y重写，选择N则放弃执行。如果希望默认地重写文件，而不弹出提示信息，则可以使用/F参数。
        设置可扩展的字符串值时（REG_EXPAND_SZ），必须使用插入记号（^）符号对百分号（%）进行转义处理。这里，%用于指定环境变量。参考如下实例：
            reg add HKLM\SYSTEM\CUrrentControlSet\Services\DNS /v ImagePath
            /t REG_EXPAND_SZ /d ^%SystemRoot^%\System32\dns.exe
        其中，使用了^%SystemRoot^%，以便确保环境变量SystemRoot的正确输入以及命令shell的正确理解。
        设置非字符串值时，不需要使用引号，如下所示：
            reg add HKLM\SYSTEM\CurrentComtrolSet\Services\DNS /v ErrorControl
            /t REG_DWORD /d 0x00000001
    5.2.6复制注册表键
        使用REG copy命令，可以将注册表条目复制到本地机或远程系统上的某一位置。该命令的基本语法为：
            reg copy KeyName1 KeyName2
        其中，KeyName1为要复制的源子健路径，KeyName2位目标子健路径。需要说明的是，尽管子健路径可以包含UNC名或远程计算机的IP地址，但使用REG copy命令对远程的源注册表与目标注册表进行操作时，仍然存在一些限制，如下所示。
        · 远程的源注册表子健只能使用HKLM与HKU这两个root建。
        · 远程的目标注册表子健只能使用HKLM与HKU这两个root键。
        下面的实例中，将本地系统上的DNS子健复制到MAILER2上的DNS子健：
            reg copy HKLM\SYSTEM\CurrentControlSet\Services\DNS
            \\Mailer2\HKLM\SYSTEM\CurrentControlSet\Services\DNS
        通过使用/s参数，可以复制指定的子健以及该子健下的所有子健与注册表条目。下面的实例中，复制了DNS子健及其相关的所有子健与值：
            reg copy HKLM\SYSTEM\CurrentControlSet\Services\DNS
            \\Mailer2\HKLM\SYSTEM\CurrentControlSet\Services\DNS /s
        如果目标路径中已经存在要复制的值，则REG copy命令执行时会弹出提示信息，对每个已存在的值都需要确认是否重写。你可以根据实际情况选择Y或N，也可以按A键来重写所有已存在的值而不再显示提示信息。
        （注解  如果不希望看到提示信息，可以使用/F参数重写所有已存在的值而不显示提示信息。不过，在重写已存在的注册表键之前，你可能需要对其进行保存，以便在发生问题的时候对其进行恢复。为此，可以使用5.2.4中讨论的REG save命令与REG restore命令。）
    5.2.7删除注册表键
        要从Windows注册表中删除子健与值，可以使用REG delete命令。REG delete命令有几种不同的语法格式，如果需要删除某子健以及该子健下所有子健与注册表条目，可以使用如下语法：
            reg delete KeyName
        其中，KeyName为所要删除的子健名。此外，尽管子健路径可以包含UNC名或远程计算机的IP地址，但远程源子健只能使用HKLM与HKU这两个root键，参考如下实例：
            reg delete \\Mailer1\HKLM\SYSTEM\CUrrentControlSet\Services\DNS2
        该命令删除了MAILER1上的DNS2子健以及该子健下的所有子健与条目。
        如果需要限定删除的范围，比如，只删除子健下某一个特定的条目，则可以使用如下的语法：
            reg delete KeyName /v ValueName
        其中，KeyName为所要处理的子健名，ValueName为所要删除的特定的条目名。与前面类似，这里的子健路径也可以包含UNC名或远程计算机的IP地址，但远程源子健只能使用HKLM与HKU这两个root键。下面的实例中，删除了MAILER2上DNS2子健的Descriptions条目：
            reg delete \\Mailer2\HKLM\SYSTEM\CurrentControlSet\Services\DNS2 /v Description
        （提示  对上面两种情况，命令shell都会给出提示信息，询问是否永久性地删除指定的注册表条目。如果是则选择Y。也可以使用/F参数来默认删除，而不再弹出提示信息。另外一个有用的参数是/Va，该参数的作用是，只删除子健下的值，而不删除该子健下的其他子健。）
    5.2.8导入与导出注册表键
        有时候，可能需要将注册表的全部或部分复制到一个文件中，之后在其他计算机上使用该文件。比如，在计算机1上安装了一个组件，并对其进行了一些扩展的配置，之后需要在计算机2上也使用该组件，但不希望重复整个配置过程。要做到这一点，可以在计算机2上安装该组件，对其进行初始的配置，之后从计算机1中导出该组件的注册表配置文件，并将该文件导入到计算机2中，从而保证该组件的正确配置，又避免了低效的重复。当然，这种方法只适用于组件的完整配置设置存储在注册表中的情况，但从中可以看出这种注册表导出、导入的作用和能力。
        使用REG export命令与REG import命令时，导出、导入注册表数据是非常容易的，包括特定的root键的分支数据以及个别的子健及其包含的数据。导出数据时，要创建一个.reg文件来保存导出的注册表数据。该文件实力上是一个脚本文件，通过REG import命令，可以将其导入到原计算机或其他计算机上的注册表中。
        由于注册表文件是以标准的文本写入的，因此可以使用任意的标准文本标记器对其进行查阅与修改（如果需要）。要将注册表数据导入到当前目录下的文件中，可以使用如下的语法：
            reg export KeyName FileName
        其中，KeyName为要使用的子健名，FIleName为用于存储导出的注册表数据的文件名。与前面类似，这里的子健路径也可以包含UNC名或远程计算机的IP地址，但远程源子健只能使用HKLM与HKU这两个root键。下面的实例中，导出了MAILER1上的MSDTC子健：
            reg export \\Mailer1\HKLM\SOFTWARE\Microsoft\MSDTC msdtc-regkey.reg
        通过REG export命令，可以导出任意层次的注册表数据。比如，如下命令可以导出HKLM root键及其所有子健：
            reg export HKLM  hklm.reg
        （提示  通过/Y参数，可以使REG export命令在导出注册表数据时默认重写已存在的文件。通过regedit /e SaveFile命令，可以导出完整的注册表数据。其中，SaveFile为所要保存的注册表文件存储位置的全路径。比如，如果需要将整个注册表数据复制到C:\Save\Regdata.reg，可以使用命令regedit /e c:\Save\Regdata.reg。）
        导入注册表数据会注册表脚本文件的内容添加到目标计算机的注册表中，添加数据时，或者是创建新的注册表键与值（如果此前不存在），或者是重写注册表键与值（如果此前存在）。以如下的语法格式使用REG import命令，可以导入注册表数据：
            reg import FileName
        其中，FileName为当前目录中要导入的注册表文件名，比如：
            reg import msdtc-regkey.reg
        要注意的是，不能远程执行导入命令，也不能导入非本地的注册表文件。导入注册表键时，必须登录本地系统，并且要导入的注册表文件也必须存在于本地计算机上。
    5.2.9加载与卸载注册表键
        正如有时候需要导出或导入注册表数据一样，有时候你还需要使用单独的注册表hive文件。最可能导致此需求的原因是：必须修改某用户的配置文件，以便纠正其中存在的、导致该用户无法访问或使用系统的问题。比如，由于某用户不恰当地改变了显示模式，导致其变为一种无效的设置，因此无法访问该计算机，这时候就需要加载并修改该用户配置文件的设置时。将该用户的配置文件数据设置加载到注册表中后，就可以编辑注册表，纠正其中存在的问题，并保存所作的改变，之后该用户就可以登录系统。
        另一个迅速要加载注册表键的原因是：需要改变远程系统上注册表中某一特定的部分。需要说明的是，加载与卸载注册表hive文件只影响HKEY_LOCAL_MACHINE与HKEY_USERS，只有在选择了其中的某一个时，才能执行加载与卸载操作。加载注册表hive文件时，加载数据并不会替换选定的root键，而是变为该root键的子健。由于HKEY_LOCAL_MACHINE与HKEY_USERS是构建系统注册表中所有root键的基础，因此，实际上这两个命令可以操作注册表中的任何区域。
        进行加载操作之前，必须使用REG save命令将加载的注册表数据保存为注册表hive文件。以如下语法使用REG load命令，可以将以前保存的注册表hive文件加载到注册表中：
            reg load RootKey、KeyName FileName
        其中，RootKey为加载命令使用的root键（加载的临时注册表键将在其下创建），KeyName为所要创建的临时子健的名，FileName为所要加载的注册表hive文件名。要注意的是，只能在HKLM或HKU这两个root键下创建临时子健。下面的实例中，在HKLM下创建了一个名为CurrTemp的临时子健，并将Working.hiv文件记载到该子健中：
            reg load HKLM\CurrTemp Working.hiv
        再次重申：不能远程执行导入命令，也不能导入非本地的注册表文件。导入注册表键时，必须登录本地系统，并且要导入的注册表文件也必须存在于本地计算机上。
        加载了注册表键之后，就可以使用前面讨论的技术对其子健与值进行操作。在完成了对某注册表键的修改后，可以使用REG save命令将其保存到新的注册表文件中。保存后，就可以以如下的语法格式使用REG unload命令，以便卸载hive文件，并将其从内存与注册表中移除：
            reg unload RootKey\KeyName
        其中，RootKey为卸载命令使用的root键（临时注册表键在其下创建），KeyName为所要卸载的临时子健的名。下面的实例中，从HKLM下卸载了一个名为CurrTemp的临时子健，并将Working.hiv文件加载到该子健中：
            reg unload HKLM\CurrTemp
        （注解  不能对正在被操作系统或其他进程使用的hive文件本身进行卸载等操作，不过可以复制一个该文件的副本，之后对文件副本进行处理。要保存文件副本，可以使用reg save命令，其后跟随要保存的root键的缩略名以及该hive文件的文件名。比如，命令reg save hkcu c:\currhkcu.hiv可以将HKEY_LOCAL_MACHINE保存到名为Currhkcu.hiv的hive文件中，该文件存在于C盘根目录。尽管可以以这种模式保存注册表的逻辑root键（HKCC、HKCR、HKCU），但本技术中只能保存HKLM、HKU下的子健。）
        如果需要修复远程计算机上注册表的某个区域，可以遵循如下规则与步骤。
        （1）访问远程计算机，使用REG save命令将注册表hive保存到文件中。
        （2）使用XCOPY命令或类似命令将注册表文件复制到本地系统。
        （3）使用REG load命令，将相关的hive文件复制到本地机的注册表中。
        （4）进行必要的修改，之后使用REG save命令保存所作的修改。
        （5）将修改后的hive文件上传到远程计算机，之后使用REG import命令将其导入注册表中，以便修复存在的问题。
        （6）在远程计算机上测试有效后，使用REG unload命令从本地机上卸载hive文件。
5.3管理系统服务
    系统服务为工作站与服务器提供了关键功能。要对本地机与远程计算机上的系统服务进行管理，可以使用服务控制器命令SC，该命令包含很多子命令，这里只讲述其中的一部分。具体第说，接下来将逐一讨论如下一些命令。
    · SC config。用于配置服务启动与登录帐号。
    · SC query。用于显示计算机上已配置的所有服务的列表。
    · SC qc。用于显示某特定服务的配置。
    · SC start。用于启动服务。
    · SC stop。用于结束服务。
    · SC pause。用于暂停服务。
    · SC continue。用于恢复服务。
    · SC failure。用于设置服务失效时执行的操作。
    · SC qfailure。用于查看服务失效时执行的操作。
    上面这些命令都可以对远程计算机的服务进行操作，方法是在要使用的子命令前插入UNC名或远程计算机的IP地址，其语法格式为：
        sc ServerName Subcommand
    5.3.1查看已配置的服务
        要查看系统中已配置的所有服务，可以在命令提示符中键入如下命令：
            sc query type= service state= all
        或
            sc ServerName query type= service state= all
        其中，ServerName为UNC名或远程计算机的IP地址，比如\\Mailer1或\\192.168.1.100，如下面的实例所示：
            sc \\Mailer1 query type= service state= all
            sc \\192.168.1.100 query type= service state= all
        （注解  在type= service与state= all中使用的等号（=）后面，必须紧跟着一个空格。如果没有使用空格，则命令会失败。）
        对state标记，可以复制为active（只显示运行中的服务），也可以复制为inactive（显示所有暂停的或终止的服务），如下所示：
            sc \\Mailer1 query type= service state= active
            sc \\Mailer query type= service state= inactive
        上面第一个实例中，查询MAILER1上所有运行中的服务，并返回一个列表。第二个实例中，查询MAILER1上所有终止状态的服务，并返回一个列表。
        SC query命令的输出信息展示了各种服务及其配置信息，每个服务条目的格式如下：
            SERVICE_NAME: W3SVC
            DISPLAY_NAME: WORLD Wide Web Publishing Service
                    TYPE: 20 WIN32_SHARE_PROCESS
                   STATE: 4 RUNNING
                            (STOPPABLE, PAUSEBLE, ACCEPTE_SHUTDOWN)
        （注解  参数/V "x0"的作用是，使得FIND命令值显示那些不包括文字x0的输出航，x0是WIN32_Exit_Code、Service_Exit_code、Checkpoint、Wait_Hint等字段中常见的文本，通过这种方法，就在显示的输出信息中去除了不需要的字段。）
        如果已知要使用的服务名，就可以使用SC qc命令来显示其配置信息，其语法为：
            sc qc ServiceName
        其中，ServiceName为所要处理的服务名，这种格式命令的输出信息类似于：
            SERVICE_NAME: w3svc
                    TYPE: 20 WIN32_SHARE_PROCESS
              START_TYPE: 2 AUTO_START
           ERROR_CONTROL: 1 NORMAL
        BINARY_PATH_NAME: c:\WINDOWS\System32\svchost.exe -k iissvcs
        LOAD_ORDER_GROUP:
                     TAG: 0
            DISPLAY_NAME: World Wide Web Publishing Service
            DEPENDENCIES: RPCSS
                        : HTTPFilter
                        : IISADMIN
      SERVICE_START_NAME: LocalSystem
        可以看出，输出信息中没有包含服务的当前状态，但包含了如下一些与该服务相关的要素。
        · 二进制路径名。该服务的可执行文件路径。
        · 依赖关系。该服务正常运行的一些依赖因素。
        · 显示名。描述性的服务名。
        · 服务启动名。该服务的登录账号名。
        · 启动类型。该服务的启动配置。
        （注解  配置为自动启动的服务的启动类型为AUTO_START，配置为手动启动的服务的启动类型为DEMAND_START，已禁用服务的启动类型为DISABLED。）
        · 类型。服务类型及其是否为共享进程。
        （注解  配置服务登录时，有些情况下，需要了解进程是在自己专有的上下文中运行，还是与其他进程共享运行。共享进程在类型中列出为WIN32_SHARE_PROCESS，在自己专有上下文中运行的进程在类型中列出为WIN32_OWN_PROCESS。）
    5.3.2启动、终止与暂停服务
        作为管理员，经常需要对Windows服务进行启动、终止或暂停等操作，相关的命令及其语法分别为：
            启动某服务
            sc start ServiceName
            暂停某服务
            sc pause ServiceName
            恢复暂停的服务
            sc continue ServiceName
            终止某服务
            sc stop ServiceName
        上述命令中，ServiceName均指待处理的服务的缩略名，比如：
            sc start w3svc
        在所有的SC命令中，都可以通过指定远程计算机名来使用其中的服务。比如，要启动MAILER1上的w3svc服务，可以使用如下的命令：
            sc \\Mailer1 start w3svc
        上面命令输出结果中状态应该为STATE_PENDING，对于stop、pause、continue等命令，状态则分别对应STOP_PENDING、PAUSE_PENDING、CONTINUE_PENDING。如果得到错误的结果，则输出信息中会声明FAILED，并给出错误文本，其中详细描述了导致失败的的原因。比如，如果试图启动一项已经启动的服务，则会得到错误信息：
            An instance of the service is already running.
        如果试图终止一项已经终止的服务，则会得到如下的错误信息：
            The service has not been started.
    5.3.3配置服务的启动方式
        对Windows服务，可以将其设置为手动启动或自动启动，也可以通过对服务的禁用来永久性地关闭服务。通过如下命令，可以配置服务的启动：
            sc config ServiceName start= flag
        其中，ServiceName为所要使用的服务的缩略名，flag为所要使用的启动类型。对Windows服务而言，有效的flag值包括如下几个。
        · Auto。在系统启动时启动服务。
        · Demand。根据需要手工启动服务。
        · Disabled。禁用服务。
        · Delayed-Auto。延迟服务的启动，直至所有非延迟的自动服务都已启动。
        根据这些flag值的含义，要将某服务配置为自动启动，可以使用命令：
            sc config w3svc start= auto
        或
            sc \\Mailer1 config w3svc start= auto
        （注解  在start= auto中使用的等号（=）后面，必须紧跟着一个空格。如果没有使用空格，则命令会失败。另外，上面的命令只会报告SUCCESS或FAILUER，而不会报告说服务已经在指定的启动模式中进行了配置。
        禁用某服务并不会立即终止该服务，而是在计算机下次启动的时候不再启动该服务。要确保某服务被禁用并且终止，可以在使用SC stop命令再运行SC config命令。）
    5.3.4配置服务的登录方式
        对Windows服务，可以将其配置为系统账号登录，也可以将其配置为以特定用户账号登录。比如，要使得某服务以本地系统账号登录，可以使用如下命令：
            sc config ServiceName obj= LocalSystem
        其中，ServiceName为正在配置的、准备以本地系统账号登录的服务名。如果某服务提供了一个可操作的用户界面，就可以在其中添加标记type=interact type=own，如下面奶奶实例所示：
            sc config w3svc obj= LocalSystem type= interact type= own
        其中，type= interact标记表明该服务可以与Windows桌面进行交互，type= own标记表明该服务在自己专有的进程空间运行。在某服务与其他服务共享器可执行文件的情况下，则应该使用标记type= share，如下面实例所示：
            sc config w3svc obj= LocalSystem type= interact type= share
        （提示  如果不知道某服务是以共享进程的方式运行，还是以自己专有进程空间运行，则可以使用SC qc命令查询该服务的启动类型。SC qc命令在5.3.1中进行了讨论。）
        服务也可以配置为以指定账号登录，要做到这一点，可以使用如下命令：
            sc config ServiceName obj= [Domain\]User Password= Password
        其中，Domain为可选的域名（要指定的用户账号存在于该域中），User为要使用的用户账号名，Password为该账号的口令。参考如下实例：
            sc config w3svc obj= adatum\webbies password= blue5!CraZy
        上面的命令中，将W3svc服务配置为使用Adatum域中的Webbies账号登录。该命令应该在输出信息中声明SUCCESS或FAILUER。如果账号名无效或者不存在，或者提供的口令无效，则命令会失败。
        （注解  如果某服务配置为在本地系统账号下与桌面交互，则不能将其改变为在域账号下运行，除非使用标记type=own，此时的语法格式为： sc config ServiceName obj= [Domain\]User password= Password type=own。）
        （真实场景  作为管理员，应该保持对那些由服务使用的账号的追踪和审计。如果没有进行正确配置，这些账号就可能成为重大安全问题的根源。对这些由服务使用的账号，应该采用最严格的安全设置，并在保证其完成必要功能的前提下赋予其尽可能小的权限。典型情况下，由服务使用的账号并不需要很多通常用户账号所需要的权限。比如，大多数服务账号不需要本地登录的权限。管理员应该准确了解系统中使用了哪些服务账号（以便于对其进行追踪和审计），并且应该向配置管理员账号一样对其进行配置。当然，这并不是说赋予其管理员权限，而是说应该为其设置安全的口令，对账号的使用进行认真的检测，以及对账号权限与特权的小心使用等。）
    5.3.5配置服务的恢复方式
        使用SC failure命令，可以将Windows服务配置为在服务失败时采取特定的动作。比如，可以在服务失败时重启该服务或者运行某个应用程序。
        你可以为服务恢复选项设置第一个、第二个以及依此类推的恢复尝试，每次服务失败发生时，当前的失败技术会递增。你也可以设置一个参数，用于规定失败计数器重置之前必须消逝的时间长度。比如，可以规定，在最后一次失败发生24小时之后重置计数器。
        在对服务恢复进行配置之前，可以使用SC qfailure命令检查当前的服务恢复设置，其语法为：
            sc qfailure ServiceName
        其中，ServiceName为所要设置的服务名，比如：
            sc qfailure w3svc
        此外，也可以对远程计算机进行检查，比如：
            sc \\Mailer1 qfailure w3svc
        或
            sc \\192.168.1.100 qfailure w3svc
        这些命令的输出信息中，失败动作是以其应该执行的先后顺序列出的。在下面的实例输出中，W3svc服务的恢复策略设置为：服务第一次、第二次失败时都尝试重启该服务，在第三次失败时则重启计算机。
            [SC] QueryServiceConfig2 SUCCESS

            SERVICE_NAME: w3svc
                    RESET_PERIOD(in seconds): 86400
                              REBOOT_MESSAGE:
                                COMMAND_LINE:
                             FAILURE_ACTIONS:RESTART -- Delay = 1 milliseconds.
                                             RESTART -- Delay = 1 milliseconds.
                                             REBOOT -- Delay = 1000 milliseconds.
        （注解  对某些关键性的系统服务，Windows会自动地为其配置恢复策略。典型情况下，这些服务的恢复策略设置为在失败时重启该服务。还有一些服务配置为失败时运行某程序，比如，IIS Admin服务配置为失败时运行一个名为lisreset.exe的程序，该程序可以在重启IIS Admin服务的同时纠正服务中存在的问题，并安全地管理IIS服务。）
        用于配置服务恢复的命令是SC failure，其基本语法为：
            sc failure ServiceName reset= FailureResetPeriod actions= RecoveryActions
        其中，ServiceName为所要配置的服务名，FailureResetPeriod规定了在重置失败计数器之前应该达到的正常运行时间（以秒为计数单位），RecoveryActions为失败发生时执行的操作以及该操作启动之前的延迟时间（以毫秒为计数单位），可用的恢复操作如下所示。
        · 无操作（以空字符串“ ”为标志）。操作系统不会为本次失败尝试恢复操作，但可能为此前或此后的其他失败进行恢复操作。
        · 重启服务。终止该服务，并在短暂暂停后重启该服务。
        · 运行一个程序。失败时运行一个程序或脚本，脚本可以是一个批处理脚本，也可以是一个Windows脚本。如果选择这个恢复操作，要注意为所要运行的程序设置完整的文件路径，并设置程序启动时需要传递给该程序的命令行参数。
        · 重新引导计算机。关闭计算机，并在指定的延迟时间达到后重启计算机。
        （最佳实践  为关键性的系统服务设置恢复选项时，可以采用一个较好策略是：在第一次、第二次失败时重启该服务，第三次失败时则重新引导服务器。）
        使用SC failure命令时，要记住如下几个要点。
        · 重置时间间隔的计数单位为秒。重置计数器的时间间隔通常设置为几个小时或几天，但计数单位是秒。一个小时有3600秒，一天有86400秒。比如，要设置两小时的充值时间间隔，应该使用的值为7200。
        · 每一个恢复操作后必须跟随执行该操作之前需要等待的时间（计数单位为毫秒）。对于重启服务的操作，可能需要较短的延迟，比如1毫秒（无延迟），1秒（1000毫秒），或者5秒（5000毫秒）。对于重启计算机的操作，则可能需要较长的延迟，比如15秒（15000毫秒），或30秒（30000毫秒）。
        · 在输入操作及其延迟时间时，应该将其作为一个统一的文本字符串，每个值之间都以正斜杠（/）间隔。比如，可以使用如下的形式：restart/1000/restart/1000/reboot/15000，其含义为：第一次、第二次失败时，在1秒的延迟后重启该服务，第三次失败时，在15秒的延迟后重新引导计算机。
        参考如下实例：
            sc failure w3svc reset= 86400 actions= restart/1/restart/1/reboot/300000
        根据上面命令行中的约定，第一次、第二次服务失败时，几乎立即重启该服务，第三次失败时，则在30秒的延迟后重新引导计算机。此外，如果在24小时（86400秒）的时间间隔内没有发生服务失败，则重置失败计数器。与前面实例中类似，你也可以在上面的命令行中指定远程计算机（插入UNC名或远程计算机的IP地址）。
        如果要在服务失败时使用Run操作，则可以使用Command= parameter来指定要运行的命令或程序，parameter负责指定要运行的命令的全路径以及传递给该命令的参数。要注意的是，命令路径与参数等内容需要使用双引号封装在一起，如下面实例所示：
            sc failure w3svc reset= 86400 actions= restart/1/restart/1/run/30000
            command= "c:\restart_w3svc.exe 15"
  5.4从命令行重启与关闭系统
      关机或重启系统是经常要执行的系统管理任务。要完成这些任务，一种方法是使用Shutdown工具，该工具可同时用于本地机与远程系统。另一种方法是对关机进行调度，比如，使用Schtasks指定关机的执行时间，或者创建一个脚本，其中包含对某台系统的关机命令列表。
      （真实场景  尽管大多数情况下Windows系统的启动与关机都不会遇到问题，但偶尔也可能会在执行过程中停止响应。如果出现这种情况，应该设法找到导致问题的根源以便于故障排除，下面给出了几种可能导致系统停止响应的原因。）
      （1）系统正在尝试执行（或正在运行）一个启动脚本或关机脚本，该脚本尚未执行完毕，或者脚本本身失去响应（在这种情况下，系统需要等待直至脚本超时）。
      （2）启动初始化文件或服务导致的问题，如果确认，就需要使用系统配置工具（Msconfig）对启动项进行故障排除。禁用服务、禁用某启动项或启动初始化文件的某个条目也可能解决问题。
      （3）系统中安装的防病毒程序导致的问题。比如，有些情况下，在关机时，防病毒程序会扫描可移除的截至驱动器。为解决这一问题，可以对防病毒程序进行配置，使其在系统关机时不再扫描可移除的介质驱动器或其他带有可移除介质的驱动器，也可以临时性地禁用或关闭防病毒程序。
      （4）错误地配置了声音设备导致的启动与关机问题。为确定可能的问题根源，可以依次检查这些设备。关闭声音设备，之后重启计算机。如果问题解决，说明确实是声音设备的问题，则需要为声音设备安装新的驱动程序（另外一种可能性不是很大的原因是开机、关机的声音文件损坏）。
      （5）错误地配置了网卡导致的启动与关机问题。此时，可以尝试关闭网络适配器并重启计算机，如果问题解决，说明确实是网卡的问题，则需要重新安装网络适配器驱动程序，或者从制造商获取新的驱动程序。
      （6）错误地配置了显卡适配器驱动程序导致的启动与关机问题。此时，可以从其他计算机远程登录，并将当前显卡驱动程序回滚到以前的版本。如果无法做到，就卸载显卡驱动程序之后重新安装。
      5.4.1管理本地系统的重启与关闭
          在本地系统上，可以使用如下命令对关机与重启进行管理：
          关闭本地系统
              shutdown /s /t shutdownDelay /l /f
          重启本地系统
              shutdown /r /t shutdownDelay /l /f
          取消本地计算机的延迟关机
              shutdown /a
          其中，/T shutdownDelay参数用于设置在关机或重启之前的秒数（可选的），/L参数用于立即退出当前用户的登录，/F参数用于强制关闭运行中的应用程序（而不预先弹出警告信息）。需要说明的是，上面这几个参数都是可选的。下面的实例中，本地系统在60秒的延迟后重启：
              shutdown /r /t 60
          （最佳实践  在大多数网络环境下，系统正常运行时间是最重要的，系统在重启或关机时都无法为用户提供服务，使得用户无法完成必要的工作，从而导致用户的不快。作为管理员，不要在营业时间关闭或重启系统，而应该在营业时间之外对系统进行关机或重启。如果不得不在营业时间关机，则应该在关机之前通知用户，使得用户可以保存当前的工作，或退出系统，以免造成不必要额损失。）
      5.4.2管理远程系统的重启与关闭
          对于远程系统，需要使用/M参数来指定UNC名或远程系统的IP地址。因此，前面讲述的用于关机、重启、取消延迟的关机等命令的基本语法应该做一些修改，如下面一些实例所示：
          关闭远程系统
              shutdown /s /t shutdownDelay /l /f /m \\System
          重启远程系统
              shutdown /r /t shutdownDelay /l /f /m \\System
          取消远程计算机的延迟关机
              shutdown /a /m \\system
          下面的实例中，MAILER1在30秒的延迟后重启：
              shutdown /r /t 30 /m \\Mailer1
          下面的实例中，IP地址为192.168.1.105的系统将立即重启，正在运行中的应用程序被强迫停止：
              shutdown /r /f /m \\192.168.1.105
      5.4.3添加关机或重启原因与注释
          在大多数网络环境下，对关机或重启的原因给出说明是一个好做法。对计划外的关机，你可以再计算机的系统日志中对关机的原因进行记录，这需要对原有命令进行扩展，使其包含如下的参数：
              /e /c "UnplannedReason" /d MajorCode:MinorCode
          其中，/e取代了原来的/r开关，/c "UnplannedReason"用于对关机或重启的详细原因进行设置（长度最大为512个字符），/d MajorCode:MinorCode用于设置关机的原因代码。原因代码是任意的，有效的主代码范围为0~255，有效的从代码范围为0~65535。
          对于计划中的重启，参考如下实例：
              shutdown /r /m \\Mailer1 /c "System Reset" /d 5:15
          在上面的实例中，重启了MAILER1，并将规划外重启的原因标记为System Reset，原因代码为5：15。
          表总结了Windows Vista与Windows Server 2008中关机与重启原因与代码。从表中可以看出，Windows可以生成一些前缀吗。比如，E代表Expected（预期中的），U代表Unexpected（预期外的），P代表planned（规划中的），并可以对这些前缀码进行多种组合。
              关机或重启的常见原因与代码
                  --------------------------------------------------
                  前缀码|主要代码|次要代码|关机或重启类型
                  ------|---------------|---------------------------
                  U     |0      |0      |其他（计划外的）
                  E     |0      |0      |其他（计划外的）
                  EP    |0      |0      |其他（计划内的）
                  U     |0      |5      |其他失败：系统失去响应
                  E     |1      |1      |硬件：维护（计划外的）
                  EP    |1      |1      |硬件：维护（计划外的）
                  E     |1      |2      |硬件：安装（计划外的）
                  EP    |1      |2      |硬件：安装（计划外的）
                  P     |2      |3      |操作系统：升级（计划内的）
                  E     |2      |4      |操作系统：重新配置（计划外的）
                  EP    |2      |4      |操作系统：重新配置（计划外的）
                  P     |2      |16     |操作系统：服务补丁（计划内的）
                  U     |2      |17     |操作系统：热点补丁（计划外的）
                  P     |2      |17     |操作系统：热点补丁（计划内的）
                  U     |2      |18     |操作系统：安全补丁（计划外的）
                  P     |2      |18     |操作系统：服务补丁（计划内的）
                  E     |4      |1      |应用程序：维护（计划外的）
                  EP    |4      |1      |应用程序：维护（计划内的）
                  EP    |4      |2      |应用程序：安装（计划内的）
                  E     |4      |5      |应用程序：失去响应
                  E     |4      |5      |应用程序：不稳定
                  U     |5      |15     |系统失败：终止错误
                  E     |5      |19     |安全问题
                  U     |5      |19     |安全问题
                  EP    |5      |19     |安全问题（计划内的）
                  E     |5      |20     |失去网络连接（计划外的）
                  U     |6      |11     |电源故障：Cord Unplugged
                  U     |6      |12     |电源故障：环境
                  P     |7      |0      |遗留API关机（计划内的）
                  --------------------------------------------------
          对SHUTDOWN命令，只有P：与U：这两个前缀码是可以接受的。比如，对规划中的关机与重启，可以使用前缀码p：来指代一次预期中的关机，如下所示：
              /c "PlannedReason" /d p:MajorCode:MinorCode
          下面给出的是另外一个复杂些的实例：
              shutdown /r /m \\Mailer1 /c "Planned Application Upgrade" /d p:4:2
          该实例中，重启MAILER1，并将规划中的重启原因记录为Planned Application Upgrade，原因代码为4：2。
