第3章   命令行脚本基础

在图形用户界面占统治地位的IT世界，命令行脚本会提供哪些点选式对话框所不能提供的功能？实事求是地说，命令行脚本所能提供的功能要比大多数人所知道的多--对大部分把命令行脚本看成美化与增强版的批处理文件（那种在8086处理器与MS-DOS环境中使用的文件）的人来说尤其如此。现今的命令行脚本环境是一个功能广泛的程序设计环境，包含如下一些要素：
· 变量
· 算术表达式
· 条件语句
· 控制流语句
· 过程
通过这些程序设计要素，你可以做到：自动执行一些重复性的任务、在远离计算机时执行复杂的操作、发现他人错误放置的资源、执行很多其他耗时甚久的任务（通常需要在键盘键入数据才能完成的）等。命令行脚本不仅具备对命令行的完全的访问权限，也可以调用带有命令行扩展的任意工具。

3.1创建命令行脚本
    命令行脚本是包含待执行命令的文本文件，这些命令与通常情况下在Windows命令shell中键入的命令是一样的，将命令存储在命令行脚本中国的好处是不再需要每次都键入命令，而是在需要的时候通过脚本很容易地执行命令。
    由于脚本中包含的是标准的文本字符，因此可以使用标准的文本编辑器进行创建和编辑，比如记事本。在脚本中输入命令时，需要注意的是，每一条命令，或者每一组需要一起执行的命令，都应该保存在脚本的单独一行中，以便确保命令的正确执行。完成脚本创建后，使用.bat或.cmd文件口占保存，这两种扩展对命令行脚本的处理与执行是一样的。比如，为创建一个脚本来显示系统名、Windows版本以及IP配置等信息，就可以在名为SysInfo.bat或SysInfo.cmd的脚本中输入如下3条命令：
    hostname
    ver
    ipconfig -all
    以上面的扩展名保存脚本后，就可以将其当做Windows工具一样执行：在命令shell中键入脚本名，之后按Enter键。命令shell会读入脚本文件，并逐一执行其中的命令，直至到达文件的尾部或遇到EXIT命令。对上面的示例脚本，执行后，命令行的输出信息与命令清单类似。
    ---
    观察上面的输出信息，你会发现，命令提示符与实际命令的显示方式与单独执行命令时的输出方式是一致的。之所以会出现这种情况，是因为在默认的处理模式执行脚本时，命令shell做了一些附加的幕后工作。首先，命令shell显示命令提示符。之后，命令shell从脚本中读入一行，显示该行文本，并对其进行解释和执行。如果到达脚本文件的尾部，或者读入exit命令，则停止执行，否则就重复这一读入、显示和解释执行的过程。
    在默认的处理模式中，命令回显是打开的，这有助于对兼备进行调试与故障排除。但对于经常使用的脚本，你可能并不需要这种显示模式。幸运的是，通过关闭命令回显，可以改变这种默认的显示模式，在3.2.3节将讲述这一问题。
3.2脚本的常见语句与命令
    到目前为止，本书主要讨论了一些命令及相关问题，但没有介绍什么是语句。尽管这些术语经常互换使用，但严格来讲，语句（statements）是指命令的关键字。比如rem语句，但有时候语句也可能是指一行代码，其中包含了该行上所有的命令文本。在有些程序设计语言中，如Java，每条语句必须以特定的字符（分号）作为终止符。在命令行脚本中，命令行并不寻找特定的终止符，而是寻找每行的结束标志。比如，在命令解释器读入下面任意字符时就终止：
    · 断行（比如按下Shift+Enter键）
    · 回车与断行（比如按Enter键）
    · 文件尾标志。
    前面已经讨论了如何创建脚本，下面讨论脚本中可以使用的常用语句与命令。
    · Cls。清楚控制台窗口，重置屏幕缓冲。
    · Rem。在脚本中创建注释。
    · Echo。在命令行中显示消息、关闭或打开命令回显。
    · @。以行为单位控制命令的回显方式。
    · Title。设置命令shell窗口的标题栏。
    · Color。设置命令shell窗口使用的文本色与背景色。
    3.2.1清除命令窗口
        在将脚本输出写入到命令shell窗口之前，对其进行清空是一个较好的做法。要做到这一点，可以使用cls命令。在命令行中键入cls，之后按Enter键。控制台窗口将清空，光标将定位到命令shell窗口的左上角，其后紧随着命令提示符，屏幕缓存中的所有其他文字也被清空。
        在前面给出的示例脚本中，也可以加入cls命令，如下所示：
        cls
        hostname
        ver
        ipconfig -all
    3.2.2位脚本添加注释
        可以使用rem语句为脚本添加注释，为保证监本的清晰易读，创建脚本时，应该为其添加如下一些注释信息：
        · 脚本的创建时间与最后修改时间
        · 脚本的创建者
        · 脚本的用途
        · 脚本创建者的联系方式
        · 脚本输出是否保存及其保存位置。
        通过上面这些脚本描述信息，不仅有助于其他系统管理员使用该脚本，也有助于脚本的创建者准确记忆脚本的用途。尤其在输个星期、乃至数个月之后，创建者本人也很可能对脚本的用途已经陌生了。命令清单中给出了一个脚本实例，其中包含了这些注释信息。
        ---
        在3.3节，将讲述如何把注释信息转化为自动帮助文档。现在，需要学习的是使用rem语句来完成如下任务。
        · 在脚本中插入解释性文字，比如，讲述某过程如何工作的文档。
        · 防止命令的执行，在命令行，插入rem可以对命令进行注释和屏蔽。
        · 隐藏某行命令的一部分，使其不再被解释执行。插入rem后，其后的部分将不再由命令shell进行解释和执行。
    3.2.3管理文字的显示方式与命令回显方式
        ECHO命令有两种用途：一种是向输出（命令shell或文本文件）中写入信息，一种是打开或关闭命令回显。通常，在脚本中执行命令时，命令及其结果输出会在控制台窗口中显示，这称为命令回显（command echoing）。
        要使用ECHO命令显示文字，可以输入echo，其后跟随要显示的文字，如下所示：
        echo The system host name is :
        hostname
        要使用ECHO命令控制命令的回显方式，可以根据需要键入echo off或echo on，如下所示:
        echo  off
        echo  The system host name is :
        hostname
        使用ECHO命令，结合输出重定向技术，可以把输出信息发送到文件，而不是命令shell，如下：
        echo off
        echo The system host name is： > current.txt
        hostname  >> current.txt
        要尝试关闭命令回显的情况，可以在命令shell中键入echo off，之后输入其他命令。你会发现，命令提示符将不再显示，而只能看到自己 键入控制台窗口中的命令以及输出信息。与命令shell中类似，在脚本中使用ECHO OFF命令也可以关闭命令回显与命令提示符。为脚本添加ECHO OFF命令后，命令shell窗口或输出文件就不会被输入的那些命令本身所混淆，在只关注命令的输出信息时，这样做是有益的。
        （提示  顺便说一句，如果想确定命令回显状态是关闭还是打开，可以键入ECHO命令。如果命令回显是打开状态，会看到消息“ECHO处于打开状态”；如果命令回显是关闭状态，则会看到消息“ECHO处于关闭状态”。在脚本中使用ECHO OFF时，你可能会有一点疑问：如果说ECHO OFF的作用是关闭命令回显，那怎样防止ECHOOFF命令本身的回显呢？不用担心，3.2.4节会讲解这个问题。）
        （真实场景  一些命令行程序设计者经常问我的一个问题是：如何在命令shell中回显一个空行？ 你可能认为在某行中键入ECHO命令即可，但实际上并非如此。就像上面的提示中所说的，键入echo将会显示命令回显状态，键入echo并在其后跟随空格也不能做到这一点，命令shell会认为这个空格是无意义的（在这个场景中），因此与只键入echo是一样的结果。要想让ECHO显示一个空行，必须键入echo和一个句点（echo.）。这里，句点是命令的一部分，必须紧随在ECHO命令之后。）
    3.2.4使用@对命令回显进行调整
        @命令可以以行为单位来防止命令回显到输出中，在一定意义上可以理解为特定于某行的echo off语句。使用@命令，可以通过如下方式关闭命令回显：
        @echo The system host name is :
        @hostname
        使用@命令后，以如下形式输出命令提示符与命令的：
            c:\echo The system host name is:
            The system host name is:
            c:\hostname
            mailerl
        会变成：
            The system host name is:
            mailerl
        当然，@的真正价值在于可以使得明亮shell不再显示命令提示符或ECHO OFF命令，确保脚本的输出信息只包含所键入命令的输出。下面给出一个脚本实例，其中使用@来隐藏ECHO IFF命令，时期不再输出信息中显示：
            @echo off
            echo The system host name is:
            hostname
        运行之后上面的脚本的输出为：
            The system host name is :
            mailerl
        （提示  我建议在所有命令行监本前使用@echo off。另外，在命令shell中键入@echo off，也可以关闭命令提示符的回显。）
    3.2.5设置控制台窗口的标题与颜色
        编写命令行脚本时，可以加入一些特性使其更加醒目。前面已经讲述了一些基本的技术，包括使用ECHO OFF命令关闭命令回显、写入输出信息之前清空控制台窗口等。出这些工作外，在实际应用中，你可能还会希望设置命令shell窗口标题栏，或者改变窗口显示的颜色。
        命令shell的标题栏定位在控制台窗口的上方。通常情况下，标题栏显示的是“命令提示符”，或者命令提示符的路径。通过title命令，可以对标题栏进行定制。该命令与ECHO命令类似，会在控制台的标题显示其后跟随的文字。比如，如果想将当前控制台窗口的标题设置为System Information，可以在命令行中输入如下命令：
        title system Information
        通过title命令，不仅可以展示运行中的脚本名，还可以展示脚本运行的进度，如下所示：
            rem add blocks of work commands
            title Gathering Information

            rem add blocks if logging commands
            title Logging system Information
        默认情况下，控制台窗口会以黑色背景展示白色文字。在第1章中曾经讲过，可以使用“命令行属性”对话框的“颜色”选项卡修改它。另外一种方法是使用color命令，带一个由两个数字组成的十六进制代码参数，其中第一个数字代表背景颜色，第二个数字代表文字颜色。如下面的命令所示，该命令将文字颜色设置为蓝色，背景颜色设置为绿色：color 21
        表中列出了color命令可以使用的颜色代码。需要注意的是，文字颜色与背景颜色不能设置为相同，如果这样设置，则该命令不会起作用。此外，任何时候都可以使用color命令（不带参数）恢复默认的颜色设置，如下所示：
            ----------------------------------------------------
            代码|颜色             |代码|颜色
            ---------------------|----------------
            0   |黑色             |8  |灰色
            1   |蓝色             |9  |浅蓝色
            2   |绿色             |A  |谈绿色
            3   |浅绿色           |B  |浅水绿色
            4   |红色             |C  |浅红色
            5   |紫色             |D  |淡紫色
            6   |黄色             |E  |谈黄色
            7   |白色             |F  |亮白色
3.3向脚本传递参数
    与大多数命令行工具类似，你也可以在脚本启动时向其传递参数。通过使用参数，可以设置脚本中特殊的变量，或者传递脚本运行需要的信息。参数应该跟随在脚本名之后，不同的参数应该使用空格分隔开（必要的时候还要将多个参数用引号封装起来）。在下面的实例中，向一个名为check-sys的脚本传递了参数mailerl与full：
        check-sys mailerl full
    传递给脚本的每一个值都可以用形参进行检查与解释。脚本名本身由%0表示，%1代表传递给脚本的第一个参数，%2代表传递给脚本的第二个参数。依此类推，直到%9，代表传递给脚本的第9个参数。比如，如果创建了check-sys脚本，并使用如下命令调用该脚本：
        check-sys mailerl full actual
    则相关的参数值分别是：
    · %0：check-sys
    · %1：mailerl
    · %2：full
    · %3：actual
    在脚本中，可以使用形参名来访问实参：%0代表脚本名，%1代表第一个实参，依此类推。比如，如果想要显示脚本名与传递给脚本的第一个实参，可以输入如下命令。
        echo %0
        echo %1
    如果向脚本传递了多于9个参数，多余的参数并不会丢掉，而是保存在一个特殊的变量%*中（百分号+星号）。%*代表了传递给脚本的所有实参，通过shift命令即可查看多余的实参。如果不带参数运行shift命令，则脚本形参左移一个。这意味着，%0代表的相关值被丢弃，并由%1代表的相关值替代，%1代表的相关值被%2代表的相关值替代，依此类推。必要的时候，也可以指定从何处开始进行形参移位，以便保留前面的参数。比如，如果使用下面的命令，则%4变为%3，%5变为%4，依此类推，但%9、%1、%2不受影响：shift /3
3.4熟悉变量
    在命令行脚本中，我们通常所说的变量更可能指的是环境变量。环境变量有很多种来源，其中一些内置在操作系统之中，或者启动时来自系统硬件，这种变量称为内置的系统变量，对所有Windows进程都是可用的，而不管是否有人交互式地登录系统。系统变量也可以来自Windows注册表。除这种内置的系统变量之外，还有一些登录时设置的变量，这种变量称为内置的用户变量。内置的用户变量是相同的，而不管是哪个用户登录系统。此外，这些内置的用户变量只有在某次实际的登录会话（也即某用户登录了系统）中才是有效的。
    通过在命令提示符中键入set，可以查看当前命令shell实例中所有已知的变量。除标准的系统与用户变量外，也可以在Windows运行中随时创建与设置变量--实际上这就是在命令shell中进行程序设计时所要做的工作。使用set命令与下面的语法，就可以为当前命令shell实例定义变量：
        set veriable_name=veriable_value
    比如
        set working=c:\work\data
        set value=5
        set string="Hello world"
    有些变量（包括系统与用户环境变量）在命令shell中有特殊的含义，包括path、computername、homedrive以及很多其他重要的环境变量。此外，有一个需要学习和关注的环境变量errorlevel，该变量可以追踪最近使用命令的退出代码。如果命令正常执行，则错误级别为0；如果命令执行过程中出错，则错误级别会被设置为一个适当的非0值。下麦你是相关的错误类型值。
    · 1。代表通常的错误。
    · 2。代表执行错误，意味着命令没有正确执行。
    · -2.代表算术错误，比如创建了一个命令shell无法处理的过大的数值。
    可以以多种方式使用errorlevel变量，比如，检查特定的错误条件：
    if "%errorlevel%"==2 echo  "An error occurred!"
    或者，也可以使用如下的语法检查是否出现等于或大于指定的退出代码的错误条件：
    if errorlevel 2 echo "An error ocurred!"
    （注解  在本章3.5.3节与3.7节，将会更多地讲述errorlevel、if语句的相关内容。）
    使用完某变量之后，应该对其进行适当处理，以便释放该变量占用的内存，防止无意间再次引用该变量是出现问题与预期外的结果。要清除一个变量，很简单的方法是将该变量设置为空，如下所示：
        set working=
    之后，变量working将不复存在。
3.5在脚本中使用白能量
    在脚本中，变量主要用于存储多种操作中涉及的各种值。与大多数程序设计语言不通的是，在脚本中声明变量时必须同时为其赋具体的值。这样做是有一定意义的，因为从实用主义的观点看，没有理由定义一个不包括任何值的变量。随后的几节将讨论在脚本中使用变量的一些关键概念，包括：
    · 变量名
    · 变量值
    · 变量替换
    · 变量作用范围。
    3.5.1变量命名
        
