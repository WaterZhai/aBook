第3章   数据链路层
    数据链路层属于计算机网络的低层。数据链路层使用的信道主要有以下两种类型：
    1）点对点信道。这种信道使用一对一的点对点通信方式。
    2）广播信道。这种信道使用一对多的广播通信方式，因此过程比较复杂。广播信道上连接的主机很多，因此必须使用专用的共享信道协议来协调这些主机的数据发送。
    在这一章，我们首先介绍点对点信道和在这种信道上最常用 的点对点协议PPP。然后再用较大的篇幅讨论共享信道的局域网和有关协议。
    下面看一下两个主机通过互联网进行通信时数据链路层所处的地位。
        主机H1----路由器R1----路由器R2----路由器R3----主机H2

        ---------

        H1                                      R1                                  R2                                    R3                                     H2
        应用层--运输层--网络层--链路层--物理层-->物理层--链路层--网络层--链路层--物理层-->物理层--链路层--网络层--链路层--物理层-->物理层--链路层--网络层--链路层--物理层-->物理层--链路层--网络层--运输层--应用层

    主机H1通过电话线上网，中间经过三个路由器（R1，R2和R3）连接到远程主机H2。所经过的网络可以是多种的。如电话网、局域网和广域网。当主机H1向H2发送数据时，从协议的层次上看。主机H1和H2都有完整的五层协议栈，但路由器在转发分组时使用的协议栈只有下面的三层。数据进入路由器后要先从物理层上到网络层，在转发表中找到下一跳的地址后，再下到物理层转发出去。因此，数据从主机H1传送到主机H2需要在路径中的各结点的协议栈向上和向下流动多次。

        H1的链路层-->R1的链路层-->R2的链路层-->R3的链路层--H2的链路层

    然而当我们专门研究数据链路层的问题时，在许多情况下我们可以只关心在协议栈中水平方向的各数据链路层。于是，当主机H1向主机H2发送数据时，我们可以想象数据就是在数据链路层从左向右沿水平方向传送。
    从数据链路层来看，H1到H2的通信可以看成是由四段不同的链路层通信组成，即H1-->R1，R1-->R2，R2-->R3，R3-->H2。这四段不同的链路层可能采用不同的数据链路层协议。
3.1实用点对点信道的数据链路层
    本节讨论使用点对点信道的数据链路层的一些基本问题。其中的某些概念对广播信道也是适用的。
    3.1.1数据链路和帧
        我们在这里要明确一下，“链路”和“数据链路”并不是一回事。
        所谓链路（link）就是从一个结点到相邻结点的一段物理线路，而中间没有任何其他的交换结点。在进行数据通信时，两个计算机之间的通信路径往往要经过许多这样的链路。可见链路只是一条路径的组成部分。
        数据链路（data link）则是另一个概念。这是因为当需要在一条线路上传送数据时，除了必须有一条物理线路外，还必须有一些必要的通信协议来控制这些数据的传输（这将在后面几节讨论）。若把视线这些协议的硬件和软件加到链路上，就构成了数据链路。现在最常用的方法是使用网络适配器（如拨号上网使用拨号适配器，以及通过以太网上网使用局域网适配器）来实现这些协议的硬件和软件。一般的适配器都包括了数据链路层和物理层这两层的功能。
        也有人采用另外的术语。这就是把链路分为物理链路和逻辑链路。物理链路就是上面所说的链路，而逻辑链路就是上面的数据链路，是物理链路加上必要的通信协议。
        早期的数据通信协议曾叫做通信规程（procedure）。因此在数据链路层，规程和协议是同义语。
        下面再介绍点对点信道的数据链路层的协议数据单元--帧。
        数据链路层把网络层交下来的数据构成帧发送到链路上，以及把接收到的帧中的数据取出并上交给网络层。在因特网中，网络层协议数据单元就是IP数据报（或简称为数据报、分组或包）。
        为了把主要精力放在点对点信道的数据链路层协议上，可以采用三层模型。在这种三层模型中，不管在哪一段链路上的通信（主机和路由器之间或两个路由器之间），我们都看成是结点和结点的通信，而每个结点只有下三层--网络层、数据链路层和物理层。
            结点A                                           结点B
            网络层：IP数据报（↓装入）                        网络层：IP数据报
            数据链路层：帧                                  数据链路层：帧（↑取出）
            物理层--------------------链路------------------物理层
            ------------
            结点A                                              结点B
            数据链路层：帧（发送）------------链路-------------->数据链路层：帧(接收)

            点对点信道的数据链路层在进行通信时的主要步骤如下：
            1）结点A的数据链路层把网络层交下来的IP数据报添加首部和尾部封装成帧。
            2）结点B把封装好的帧发送给结点B的数据链路层
            3）若结点B的数据链路层收到的帧无差错，则从收到的帧中提取出IP数据报上交给上面的网络层，否则丢弃这个帧。
        数据链路层不必考虑物理层如何实现比特传输的细节。我们甚至还可以更简单地设想好像是沿着两个数据链路层之间的水平方向把帧直接发送到对方。
    3.1.2三个基本问题
        数据链路层协议有许多种，但有三个基本问题则是共同的。这三个基本问题是：封装成帧、透明传输和差错检测。下面分别讨论着三个基本问题。
        1.封装成帧
            封装成帧（framing）就是在一段数据的前后分别添加首部和尾部，这样就构成了一个帧。接收端在收到物理层上交的比特流后，就能根据首部和尾部的标记，从收到的比特流中识别帧的开始和结束。我们知道，分组交换的一个重要概念就是：所有在因特网上传送的数据都是以分组（即IP数据报）为传送单位。网络层的IP数据报传送到数据链路层就成为帧的数据部分。在帧的数据部分的前面和后面分别添加上首部和尾部，构成了一个完整的帧。因此，帧长等于数据部分的长度加上帧首部和帧尾部的长度，而首部和尾部的一个重要作用就是进行帧定界（即确定帧的界限）。此外，首部和尾部还包括许多必要的控制信息。在发送帧时，是从帧首部开始发送。各种数据链路层协议都要对帧首部和帧尾部的格式有明确的规定。显然，为了提高帧的传输效率，应当使帧的数据部分长度尽可能地大于首部和尾部的长度。但是，每一种链路层协议都规定了帧的数据部分的长度上限--最大传送单元MTU（MaximumTransferUnit）。
            当数据是由可打印的ASCII码组成的文本文件时，帧定界可以使用特殊的帧定界符。我们知道，ASCII码是7位编码，一共可组合成128个不同的ASCII码，其中可打印的有95个，而不可打印的控制字符有33个。
                帧开始符                                              帧结束符
                |SOH|           装在帧中的数据部分                     |EOT|
            控制字符SOH（StartOfHeader）放在一帧的最前面，表示帧的首部开始。另一个控制字符EOT（EndOfTransmission）表示帧的结束。请注意，SOH和 EOT都是控制字符的名称。它们的十六进制编码分别是01（二进制是00000001）和04（二进制是00000100）。SOH（或EOT）并不是S，O，H（或E，O，T）三个字符。
            当数据在传输中出现差错时，帧定界符的作用更加明显。假定发送端在尚未发送完一个帧时突然出故障，中断了发送。但随后很快又恢复正常，于是重新从开头开始发送刚才未发送完的帧。由于使用了帧定界符，在接收端就知道前面收到的数据是个不完整的帧（只有首部开始符SOH而没有传输结束符EOT），必须丢弃。而后面收到的数据有明确的帧定界符（SOH和EOT），因此这是一个完整的帧，应当收下。
        2.透明传输
            由于帧的开始和结束的标记是使用专门指明的控制字符，因此，所传输的数据中的任何8比特的组合一定不允许和用作帧定界的控制字符和比特编码一样。否则就会出现帧定界的错误。
            当传送的帧是用文本文件组成的帧时（文本文件中的字符都是从键盘上输入的），其数据部分显然不会出现想SOH或EOT这样的帧定界控制字符。可见不管从键盘上输入什么字符都可以放在这样的帧中传输过去，因此这样的传输就是透明传输。
            但当数据部分是非ASCII码的文本文件时（如二进制代码的计算机程序的计算机程序或图像等），情况就不同了。如果数据中的某个字节的二进制代码恰好和SOH或EOT这种控制字符一样，数据链路层就会错误地“找到帧的边界”，把部分帧收下（误认为是个完整的帧），而把剩下的那部分数据丢弃（这部分找不到帧定界控制字符SOH）。
            为了解决透明传输问题，就必须设法使数据中可能出现的控制字符“SOH”和“EOT”在接收端不被解释为控制字符。具体的方法是：发送端的数据链路层在数据中出现控制字符“SOH”或“EOT”的前面插入一个转义字符“ESC”（其十六进制编码是1B）。而在接收端的数据链路层在将数据送往网络层之间删除这个插入的转义字符。这种方法称为字节填充（byte stuffing）或字符填充（character stuffing）。如果转义字符也出现数据当中，那么结局方法仍然是在转义字符的前面插入一个转义字符。因此当接收端收到连续的两个转义字符时，就删除其中前面的一个。
        3.错检测
            现实的通信链路都不会是理想的。这就是说，比特在传输过程中可能会产生差错：1可能会变成0，而0也可能变成1.这就叫做比特差错。比特差错是传输差错中的一种。本小节所说的“差错”，如无特殊说明，就是指“比特差错”。在一段时间内，传输错误的比特占所传输比特总数的比率肠胃误码率BER（BitErrorRate）。例如，误码率为10^-10时，表示平均每传送10^10个比特就会出现的差错。误码率与信噪比有很大的关系。如果设法提高信噪比，就可以使误码率减小。实际的通信链路并非理想的，它不可能使误码率下降到零。因此为了保证数据传输的可靠性，在计算机网络传输数据时，必须采用各种差错检测措施。目前在数据链路层广泛使用了循环冗余检测CRC（Cyclic Redundancy Check）的检错技术。
            下面我们通过一个简单的例子来说明循环冗余检验的原理。
                在发送端，先把数据划分为组，假定每组k个比特。现假定待发送的数据M=101001（k=6）。CRC运算就是在数据M的后面添加供差错检测用的n为冗余码，然后构成一个帧发送出去，一共发送（k+n）位。在所要发送的数据后面增加n位冗余码，虽然增大了数据传输的开销，但却可以进行差错检测。当传输可能出现差错时，付出这种代价往往是很值得的。
                这n位冗余码可用以下方法得出。用二进制的模2运算进行2^n乘M的运算，这相当于在M后面添加n个0。得到的（k+n）位的数除以收发双方事先商定的长度为（n+1）位的除数P，得出商是Q而余数是R（n位，比P少一位）。关于除数P下面还要介绍。在例子中，M=101001（即k=6）。假定除数P=1101（即n=3）。经模2除法运算后的结果是：商Q=110101（这个商并没有什么用处），而余数R=001.这个余数R就作为冗余码拼接在数据M的后面发送出去。这种为了进行检错而添加的冗余码常称为帧检验序列FCS（FrameCHecjSequence）。因此加上FCS后发送的帧是101001001（即2^nM+FCS），共有（k+n）位。
                顺片说一下，循环冗余检验CRC和帧检验序列FCS并不是同一个概念。CRC是一种检错方法，而FCS是添加在数据后面的冗余码，在检错方法上可以选用CRC，也可不选用CRC。
                在接收端把接收到的数据以帧为单位进行CRC检验：把收到的每一个帧都除以同样的除数P（模2运算），然后检查得到的余数R。
                如果在传输过程中无差错，那么经过CRC检验后得出的余数R肯定是0。
                但如果出现误码，那么袁术R仍然等于零的概率非常非常小的。
                总之，在接收端对收到的每一帧经过CRC检验后，
                1）若得出的余数R=0，则判定这个帧没有差错，就接受（accept）。
                2）若余数R！=0，则判定这个帧有差错（但无法确定究竟是哪一位或哪几位出现了差错），就丢弃。
                一种较方便的方法是用多项式来表示循环冗余检验过程。在上面的例子中，用多项式P（X）=X^3+X^2+1表示上面的除数P=1101（最高位对应于X^3，最低位对应于X^0）。多项式P（X）称为生成多项式。现在广泛使用的生成多项式P（X）有以下几种：
                    CRC-16=X^16+X^15+X^2+1
                    CRC-CCITT=X^16+X^12+X^5+1
                    CRC-32=X^32+X^26+X^23+X^22+X^16+X^12+X^11+X^10+X^8+X^7+X^5+X^4+X^2+X+1
                在数据链路层，发送端帧检测序列FCS的生成和接收端的CRC检验都是用硬件完成的，处理很迅速，因此并不会延误数据的传输。
                从以上的讨论不难看出，如果我们在传送数据时不以帧为单位来传送，那么就无法加入冗余码以进行差错检验。因此，如果要在数据链路层进行差错检验，就必须把数据划分为帧，每一帧都加上冗余码，一帧接一帧地传送，然后在接收方逐渐进行差错检验。
                最后再强调一下，在数据链路层若仅仅使用循环冗余检验CRC差错检测技术，则只能做到对帧的无差错接受。即“凡是接收端数据链路层接受的帧，我们都能以非常接近于1的概率认为这些帧在传输过程中没有产生差错”。接收端丢弃的帧虽然曾收到了，但最终还是因为有差错被丢弃，即没有被接受。以上所述的可以近似地表述为（通常都是这样认为）：“凡是接收端数据链路层接受的帧均无差错”。
                请注意，我们现在并没有要求数据链路层向网络层提供“可靠传输”的服务。所谓“可靠传输”就是：数据链路层的发送端发送什么，在接收端就收到什么。传输差错可分为两大类：一类就是前面所说的最基本的比特差错，而另一类传输差错则更复杂些，这就是收到的帧并没有出现比特差错，但却出现了帧丢失、镇重复或帧失序。例如。发送方连续传送三个帧【#1】-【#2】-【#3】。假定在接收端收到的却有可能出现下面的情况：
                    帧丢失：收到【#1】-【#3】（丢失【#2】）
                    帧重复：收到【#1】-【#2】-【#2】-【#3】（收到两个【#2】）。
                    帧失序：收到【#1】-【#3】-【#2】
                以上三种情况都属于“出现传输差错”，但都不是这些帧里有“比特差错”。帧丢失很容易理解。但出现帧重复和帧失序的情况则较为复杂，对这些问题我们现在不展开讨论。在学完第5章的5.4节后，我们就会知道什么情况下接收端可能会出现帧重复或帧失序。
                总之，我们应当明确，“无比特差错”与“无传输差错”并不是同样的概念。在数据链路层使用CRC检验，能够实现无比特差错的传输，但这还不是可靠传输。
                我们知道，OSI的观点是必须把数据链路层做成是可靠传输的。因此在CRC检错的基础上，层架了帧编号、确认和重传机制。收到正确的帧就要向发送确认。发送端在一定的期限内若没有收到对方的确认，就认为出现了差错，因而就进行重传，知道收到对方的确认为止。这种方法在历史上曾经起到很好的作用。但现在的通信线路的质量已经大大提高了，有通信链路质量不好引起的差错的概率已经大大降低。因此，因特网广泛使用的数据链路层协议都不使用确认和重传机制，即不要求数据链路层向上提供可靠传输的服务（因为这要付出的代价太高，不合算）。如果在数据链路层传输数据时出现了差错并且需要进行改正，那么改正差错的任务就由上层协议（例如，运输层的TCP协议）来完成。实践证明，这样做可以提高通信的效率。
                本教材的前几个版本中曾采用以前OSI的思路，在数据链路层讲述可靠传输的原理（例如停止等待协议和滑动窗口机制）。但由于现在实际的有线网络的数据链路层已很少采用可靠传输，因此我们就把确认和重传机制改在后面第5章运输层TCP中讨论。这样作比较符合因特网现在的实际情况。
3.2点对点协议PPP
    在通信线路质量较差的年代，在数据链路层使用可靠传输协议曾经是一种好办法。因此，能实现可靠传输的高级数据链路控制HDLC（High-level Data Link Control）就成为当时比较流行的数据链路协议。但现在HDLC已很少使用了。对于点对点的链路，简单得多的点对点协议PPP（Point-to-Point Protocol）则是目前使用得最广泛的数据链路层。
    3.2.1PPP协议的特点
        我们知道，因特网用户通常都要连接到某个ISP才能接入到因特网。PPP协议就是用户计算机和ISP进行通信时所使用的数据链路层协议。
        PPP协议是IETF在1992年制定的。经过1993年和1994年的修订，现在的PPP协议在1994年就已成为因特网的正式标准。
        1.PPP协议应满足的需求
            IETF认为，在设计PPP协议时必须考虑以下多方面的需求：
                1）简单    IETF在设计因特网体系结构时把其中最复杂的部分放在TCP协议中，而网际协议IP则相对比较简单，它提供的是不可靠的数据报服务。在这种情况下，数据链路层没有必要提供比IP协议更多的功能。因此，对数据链路层的帧，不需要纠错，不需要序号，也不需要流量控制。当然，在误码率较高的无线链路上可能会需要更为复杂的链路层协议。因此IETF把“简单”作为首要的需求。
                          简单的设计还可使协议在实现时不容易出错，因而使得不同厂商对协议的不同实现的互操作性提高了。我们知道，协议标准化的一个主要目的就是提高协议的互操作性。
                          总之，这种数据链路层的协议非常简单：接收方每收到一个帧，就进行CRC检验，如CRC检验正确，就收下这个帧，反之，就丢弃这个帧，其他什么也不做。
                2）封装成帧      PPP协议必须规定特殊字符作为帧定界符（即标志一个帧的开始和结束的字符），以便使接收端从收到的比特流中能准确地找出帧的开始和结束的位置。
                3）透明性   PPP协议必须保证数据传输的透明性。这就是说，如果数据中碰巧出现了和帧定界符一样的比特组合时，就要采取有效措施来解决这个问题。
                4）多种网络层协议   PPP协议必须能够在在同一条物理链路上同时支持多种网络层协议（如IP和IPX等）的运行。当点对点链路所连接的是局域网或路由器时，PPP协议必须同时支持在链路所连接的局域网或路由器上运行的各种网络层协议。
                5）多种类型链路    除了要支持多种网络层的协议外，PPP还必须能够在多种类的链路上运行。例如，串行的（一次只发送一个比特）或并行的（一次并行地发送多个比特），同步的或异步的，低俗的或高速的，电的或光的，交换的（动态的）或非交换的（静态的）点对点链路。
                    这里特别要提到的是在1999年公布的在以太网上运行的PPP，即PPP over Ethernet，简称为PPPoE，这是PPP协议能够适应多种类型链路的一个典型例子。PPPoE是为宽带上网的主机使用的链路层协议。这个协议把PPP帧再封装在以太网帧中（当然还要增加一些能后识别各用户的功能）。宽带上网时由于数据传输速率较高，因此可以让多个连接在以太网上的用户共享一条道ISP的宽带链路。现在，即使是只有一个用户利用ADSL进行宽带上网（并不和其他人共享到ISP的宽带链路），也是使用PPPoE协议。
                6）差错检测（error detection）   PPP协议必须能够对接收端收到的帧进行检测，并立即丢弃有差错的帧。若在数据链路层不进行差错检测，那么已出现差错的无用帧就还要在网络中继续向前转发，因而会白白浪费许多的网络资源。
                7）检测连接状态    PPP协议必须具有一种机制能够及时（不超过几分钟）自动检测出链路是否处于正常工作状态。当出现故障的链路隔一段时间后又重新恢复正常工作时，就特别需要有有这种及时检测功能。
                8）最大传送单元    PPP协议必须对每一种类型的点对点链路设置最大传送单元MTU的标准默认值。这样做是为了促进各种实现之间的互操作性。如果高层协议发送的分组过长并超过MTU的数值，PPP就要丢弃这样的帧，并返回差错。需要强调的是，MTU是数据链路层的帧可以载荷的数据部分的最大长度，而不是帧的总长度。
                9）网络层地址协商   PPP协议必须提供一种机制使通信的两个网络层（例如，两个IP层）的实体能够通过协商知道或能够配置彼此的网络层地址。协商的算法应尽可能简单，并且能够在所有的情况下得出协商结果。这对拨号连接的链路特别重要，吟哦日仅仅在链路层建立了连接而不知道对方网络层地址时，则还不能够保证网络层能够传送分组。
                10）数据压缩协商   PPP协议必须提供一种方法来协商使用数据压缩算法。但PPP协议并不要求将数据压缩算法进行标准化。
        2.PPP协议不需要的功能
            在RFC1547中还明确了PPP协议不需要的功能：
                1）纠错（error correction）    在TCP/IP协议族中，可靠传输由运输层的TCP协议负责，而数据链路层的PPP协议只进行检错。这就是说，PPP协议是不可靠传输协议。
                2）流量控制    在TCP/IP协议族中，端到端的流量控制由TCP负责，因而链路级的PPP协议就不需要再重复进行流量控制。
                3）序号    PPP不是可靠传输协议，因此不需要使用帧的序号（许多过去曾经很流行的停止等待协议或连续ARQ协议都是用序号）。在噪声较大的环境下。如无线网络，则可以使用有序号的工作方式，这样就可以提供可靠传输服务。这种工作方式定义在RFC1663中，这里不再讨论。
                4）多点线路    PPP协议不支持多点线路（即一个主站轮流和链路上的多个从站进行通信），而只支持点对点的链路通信。
                5）半双工或单工链路    PPP协议只支持全双工链路。
        3.PPP协议的组成
            PPP协议有三个组成部分：
                1）一个将IP数据报封装到串行链路的方法。PPP既支持异步链路（无奇偶检验的8比特数据），也支持面向比特的同步链路。IP数据报在PPP帧中就是其信息部分。这个信息部分的长度受最大传送单元MTU的限制。
                2）一个用来建立、配置和测试数据链路连接的链路控制协议LCP（Link Control Protocol）。通信的双方可协商一些选项。在RFC1661中定义了11种类型的LCP分组。
                3）一套网络控制协议NCP（NetworkControlProtocol），其中的每一个协议支持不同的网络层协议，如IP、OSI的网络层、DECnet，以及AppleTalk等。
    3.2.2PPP协议的帧格式
        1.字段的意义
            PPP帧的首部和尾部分别为四个字段和两个字段。
            首部的第一个子弹和尾部的第二个字段都是标志字段F（Flag），规定为0x7E（符号“0x”表示它后面的字符是用十六进制表示的。十六进制的7E的二进制表示是01111110）。标志字段表示一个帧的开始或结束。因此标志字段就是PPP帧的定界符。连续两帧之间只需要用一个标志字段。如果出现连续两个标志字段，就表示这是一个空帧，应当丢弃。
            首部中的地址字段A规定为0xFF（即11111111），控制字段C规定为0x03（即00000011）。最初曾考虑以后再对这两个字段的值进行其他定义，但至今也没有给出。可见这两个字段实际上并没有携带PPP帧的信息。
            PPP首部的第四个字段是2字节的协议字段。当协议字段为0x0021时，PPP协议的信息字段就是IP数据报。若为0xC021，则信息字段是PPP链路控制协议LCP的数据，而0x8021表示这是网络层的控制数据。
            信息字段的长度是可变的，不超过1500字节。
            尾部中的第一个字段（2字节）是使用CRC的帧检验序列FCS。
        2.字节填充
            当信息字段中出现和标志字段的比特（0x7E）组合时，就必须采取一些措施使这种形式上和标志字段一样的比特组合不出现在信息字段中。
            当PPP使用异步传输时，它把转义符定义为0x7D，并使用字节填充，RFC1662规定了如下所述的填充方法：
                1）把信息字段中出现的每一个0x7E字节转变为2字节序列（0x7D，0x5E）。
                2）若信息字段中出现一个0x7D的字节（即出现了和转义字符一样的比特组合），则把0x7D转变成为2字节序列（0x7D，0x5D）。
                3）若信息字段中出现ASCII码的控制字符（即数值小于0x20的字符），则在该字符前面要加入一个0x7D字节，同时该字符的编码加以改变。例如，出现0x03（在控制字符中是“传输结束”ETX）就要把它转变为2字节序列（0x7D，0x31）。
            由于在发送端进行了字节填充，因此在链路上传送的信息字节数就超过了原来的信息字节数。但接收端在收到数据后再进行与发送端字节填充相反的变换，就可以正确地恢复出原来的信息。
        3.零比特填充
            PPP协议用在SONET/SDH链路时，是使用同步传输（一连串的比特连续传送）而不是异步传输（逐个字符地传送）。在这种情况下，PPP协议采用零比特填充方法来实现透明传输。
            零比特填充的具体做法是：在发送端，先扫描整个信息字段（通常是用硬件实现，但也可用软件实现，还是会慢些）。只要发现有5个连续1，则立即填入一个0.因此经过这种零比特填充的数据，就可以保证在信息字段中不会出现6个连续1.接收端在收到一个帧时，先找到标志字段F以确定一个帧的边界，接着再用硬件对其中的比特流进行扫描。每当发现5个连续1时，就把这5个连续1后的一个0删除，以还原成原来的信息比特流。这样就保证了透明传输：在所传送的数据比特流中可以传送任意组合的比特流，而不会引起对帧边界的判断错误。
    3.2.3PPP协议的工作状态
        上一节我们通过PPP帧的格式讨论了PPP帧是怎样组成的。但PPP链路一开始是怎样被初始化的？当用户拨号接入ISP后，就建立了一条从用户PC机到ISP的物理连接。这时，用户PC机向ISP发送一系列的LCP分组（封装成多个PPP帧），以便建立LCP连接。这些分组及其响应选择了将要使用的一些PPP参数。接着还要进行网络层配置，NCP给新接入的用户PC机分配一个临时的IP地址。这样，用户PC机就成为因特网上的一个有IP地址的主机了。
        当用户通信完毕时，NCP释放网络层连接，收回原来分配出去的IP地址。接着，LCP释放数据链路层连接。最后释放的是物理层的连接。
        PPP链路的起始和终止状态永远是“链路静止”（LinkDead）状态，这时在用户PC机和ISP的路由器之间并不存在物理层的连接。
        当用户PC机通过调制解调器呼叫路由器时（通常是在屏幕上用鼠标点击一个连接按钮），路由器就能够检测到调制解调器发出的载波信号。在双方建立了物理层连接后， PPP就进入“链路建立”（LinkEstablish）状态，其目的是建立链路层的LCP连接。
        这时LCP开始协商一些配置选项，即发送LCP的配置请求帧（Configure-Request）。这是个PPP帧，其协议字段置为LCP对应的代码，而信息字段包含特定的配置请求。链路的另一端可以发送一下集中响应中的一种：
            1）配置确认帧（Configure-Ack）：所有选项都接受。
            2）配置否认帧（Configure-Nak）：所有选项都理解但不能接受。
            3）配置拒绝帧（Configure-Reject）：选项有的无法识别或不能接受，需要协商。
        LCP配置选项包括链路上的最大帧长、所使用的鉴别协议（authentication protocol）的规约（如果有的话），以及不使用PPP帧中的地址和控制字段（因为这两个字段的值是固定的，没有任何信息量，可以在PPP帧的首部中省略这两个字节）。
        协商结束后双方就建立了LCP链路，接着就进入“鉴别”（“Authenticate”）状态。在这一状态，只允许传送LCP协议的分组。鉴别协议的分组以及检测链路质量的分组。若使用口令鉴别协议PAP（Password Authentication Protocol），则需要发起通信的一方发送身份标识符和口令。系统可允许用户重试若干次。如果需要有更好的安全性，则可食用更加复杂的口令握手鉴别协议CHAP（Challenge-HandshakeAuthenticationProtocol）。若鉴别身份失败，则转到“链路终止”（LinkTerminate）状态。若鉴别成功，则进入“网络层协议”（Network-LayerProtocol）状态。
        当网络层配置完毕后，链路就进入可进行数据通信的“链路打开”（LinkOpen）状态。链路的两个PPP端点可以彼此向对方发送分组。两个PPP端点还可发送回送请求LCP分组（Echo-Request）和回送回答LCP分组（Echo-Reply），以检查链路的状态。
        数据传输结束后，可以由链路的一端发出终止请求LCP分组（Terminate-Request）请求终止链路连接，在收到对方发来的终止确认LCP分组（Terminate-Ack）后，转到“链路终止”转态。如果链路出现故障，也会从“链路打开”状态转到“链路终止”状态。当调制解调器的载波停止后，则回到“链路静止”转态。
        PPP协议的几个转态的说明。从设备之间无链路开始，到先建立物理链路，再建立LCP链路。经过鉴别后再建立NCP链路，然后才能交换数据。由此可见，PPP协议已不是纯粹的数据链路层的协议，它还包含了物理层和网络层的内容。
3.3使用广播信道的数据链路层
    广播信道可以进行一对多的通信。下面要讨论的局域网使用的就是广播信道。局域网是在20世纪70年代末发展起来的。局域网技术计算机网络中占有非常重要的地位。
    3.3.1局域网的数据链路层
        局域网最重要的特点是：网络为一个单位所拥有，且地理范围和站点数目均有限。在局域网往往出现时，局域网比广域网具有较高的数据率、较低的时延和较小的误码率。但随着光纤技术在广域网中普遍使用，现在广域网也具有很高的数据率和很低的误码率。
        局域网具有如下的一些主要优点：
            1)具有广播功能，从一个站点可很方便地访问全网。局域网上的主机可共享连接在局域网上的各种硬件和软件资源。
            2）便于系统的扩展和逐渐地演变，各设备的位置可灵活调整和改变。
            3）提高了系统的可靠性（reliability）、可用性（availability）和生存性（survivability）。
        局域网可按网络拓扑进行分类。由于集线器（hub）的出现和双绞线大量用于局域网中，星型以太网以及多级星形结构的以太网获得了非常广泛的应用。环型网，最典型的是令牌环型网（token ring），简称为令牌环。总线网，各站直接连在总线上。总线两端的匹配电阻吸收在总线上传播的电磁波信号的能量，避免在总线上产生有害的电磁波反射。总线网可使用两种协议。一种是传统以太网使用的CSMA/CD，而另一种是令牌传递总线网，即物理上是总线网而逻辑上是令牌环型网。前一种总线网现在已演进为星型网，而后一种令牌传递总线网早已退出了市场。树形网，它是总线网的变形，都属于使用广播信道的网络，但这主要用于频分复用的宽带局域网。局域网经过了近三十年的发展，尤其是在快速以太网（100Mb/s）和吉比特以太网（1Gb/s）、10吉比特以太网（10Gb/s）进入市场后，以太网已经在局域网市场中占据了绝对优势。现在以太网几乎成为了局域网的同义词，因此本章从本章开始都是讨论以太网技术。
        局域网可使用多种传输媒体。双绞线最便宜，原来只用于低速（1~2Mb/s）基带局域网。现在10Mb/s甚至100Mb/s乃至1Gb/s的局域网也可使用双绞线。双绞线已成为局域网中的主流传输媒体。50Ω同轴电缆可用到10Mb/s，而75Ω同轴电缆可用到几百Mb/s。光纤具有很好的抗电磁干扰特性和很宽的频带，主要用在环型网中，其数据率可达100Mb/s甚至达到10Gb/s。现在技术发展很快，点对点线路使用光纤也已相当普遍。

        必须指出，局域网工作的层次跨越了数据链路层和物理层。由于局域网技术中有关数据链路层的内容比较丰富，因此我们就把局域网的内容放在数据链路层这一章中讨论。但这并不表示局域网仅仅和数据链路层有关。
        共享信道要着重考虑的一个问题就是如何使用众多用户能够合理而方便地共享通信媒体资源。这在技术上有两种方法：
            1）静态划分信道，第二章已经介绍过的频分复用、时分复用、波分复用和码分复用等。用户只要分配到了信道就不会和其他用户发生冲突。但这种划分信道的方法代价较高，不适合局域网使用。
            2）动态媒体接入控制，他又称为多点接入（multiple access），其特点是信道并非在用户通信时固定分配给用户。这里又分为以下两类：
                随机接入    随机接入的特点是所有的用户可随机地发送信息。但如果恰巧有两个或更多的用户在同一时刻发送信息，那么在共享媒体上就要超声碰撞（即发生了冲突），使得这些用户的发送都失败。因此，必须有解决碰撞的网络协议。
                受控接入    受控接入的特点是用户不能随机地发送信息而必须服从一定的控制。这类的典型代表有分散控制的令牌环局域网和集中控制的多点线路探询（polling），或称为轮询。
            属于随机接入的以太网将重点讨论。受控接入则由于目前在局域网中使用得较少，本书不再讨论。
        由于以太网的数据率已演进到每秒百兆比特、吉比特或甚至10吉比特，因此通常就用“传统以太网”来表示最早流行的10Mb/s速率的以太网。下面我们先介绍传统以太网。
            1.以太网的两个标准
                以太网是美国施乐（Xerox）公司的PaloAlto研究中心（简称为PARC）于1975年研制成功的。那时，以太网是一种基带总线局域网，当时的数据率为2.94MB/。以太网用无源电缆作为总线来传送数据帧，并以曾经在历史上表示传播电磁波的以太（Ether）来命名。1976年7月，Metcalfe和Boggs发表他们的以太网里程碑论文。1980年9月，DEC公司、英特尔（Intel）公司和施乐公司联合提出了10Mb/s以太网规约的第一个版本DIX V1（DIX是这三个公司名称的缩写）。1982年又修改为第二版规约（实际上也就是最后的版本），即DIX Ethernet V2，成为世界上第一个局域网产品的规约。
                在此基础上，IEEE802委员会的802.3工作组于1983年制订了第一个IEEE的以太网标准IEEE 802.3，数据率为10MB/s。802.3局域网对以太网标准中的帧格式作了很小的一点更动，但允许基于这两种标准的硬件实现可以在同一个局域网上互操作。以太网的两个标准DIX Ethernet V2与IEEE的802.3标准只有很小的差别，因此很多人也常把802.3局域网简称为“以太网”（本书也经常不严格区分它们，虽然严格说来，“以太网”应当是指符合DIXEthernet V2标准的局域网）。
                出于有关厂商在商业上的激烈竞争，IEEE802委员会未能形成一个统一的、“最佳的”局域网标准，而是被迫指定了几个不同额局域网标准，如802.4令牌总线网、802.5令牌环网等。为了使数据链路层能更好地适应多种局域网标准，IEEE802委员会就把局域网的数据链路层拆成两个子层，即逻辑链路控制LLC（LogicalLinkControl）子层和媒体接入控制MAC（MediumAccessControl）子层。与接入到传输媒体有关的内容都放在MAC子层，而LLC子层则与传输媒体无关，不管采用何种传输媒体和MAC子层的局域网对LLC子层来说都是透明的。
                然而到了20世纪90年代后，激烈竞争的局域网市场逐渐明朗。以太网在局域网市场中已取得了垄断地位，并且几乎成为了局域网的代名词。由于因特网发展很快而TCP/IP体系经常使用的局域网只剩下DIX Ethernet V2 而不是IEEE 802.3标准中的局域网，因此现在IEEE 802委员会制定的逻辑链路控制子层LLC（即IEEE 802.2标准）的作用已经消失了，很多厂商生产的适配器上就仅装有MAC协议而没有LLC协议。本章在介绍以太网时就不再考虑LLC子层。这样对以太网工作原理的讨论会更加简洁。
            2.适配器的作用
                首先我们从一般的概念上讨论一下计算机是怎样连接到局域网上的。
                计算机与外界局域网的连接是通过通信适配器（adapter）。适配器本来是在主机箱内插入的一块网络接口板（或者是在笔记本电脑中插入一块PCMCIA卡）。这种接口板又称为网络接口卡NIC（NetworkInterfaceCard）或简称为“网卡”。由于较新的计算机主板上已经嵌入了这种适配器，不使用单独的网卡了，因此本书使用适配器这个更准确的术语。在适配器上面装有处理器和存储器（包括RAM和ROM）。适配器和局域网之间的通信是通过电缆或双绞线以串行传输方式进行的，而适配器和计算机之间的通信则是通过计算机主板上的I/O总线以并行传输方式进行的。因此，适配器的一个重要功能就是要进行数据串行和并行传输的转换。由于网络上的数据率和计算机总线上的数据率并不相同，因此在适配器中必须装有对数据进行缓存的存储芯片。若在主板上插入适配器时，还必须把管理适配器的设备驱动程序安装在计算机的操作系统中。这个驱动程序以后就会告诉适配器，应当从存储器的什么位置上把多长的数据块发送到局域网，或者应当在存储器的什么位置上把局域网传送过来的数据块存储下来。适配器还要能够实现以太网协议。
                适配器接收和发送各种帧时不实用计算机的CPU。这是CPU可以处理其他任务。当适配器收到有差错的帧时，就把这个帧丢弃而不必通知计算机。当适配器收到正确的帧时，他就使用中断来通知该计算机并交付给协议栈中的网络层。当计算机要发送IP数据报时，就由协议栈把IP数据报向下交给适配器，组装成帧后发送到局域网。我们特别要注意，计算机的硬件地址就在适配器的ROM中，而计算机的软件地址--IP地址，则在计算机的存储器中。
    3.3.2CSMA/CD协议
        CSMA/CD协议是本章所要讲述的最重要的一个协议。
        当初提出以太网的方案是基于下面的思路：要寻找很简单的方法把一些相聚不太远的计算机互相连接起来，使它们可以很方便地进行较高速率的数据通信。
        最早的以太网是将许多计算机都连接到一根总线上。当初认为这种连接方法既简单又可靠，因为在那个时代普遍认为：“有源器件不可靠，而无源的电缆线才是最可靠的”。
        总线的特点是：当一台计算机发送数据时，总线上的所有计算机都能检测到这个数据。这种就是广播通信方式。但我们并不总是要在局域网上进行一对多的广播通信。为了在总线上实现一对一的通信，可以使每一台计算机的适配器拥有一个与其他适配器都不同的地址。在发送数据帧时，在帧的首部写明接收站的地址。现在的电子技术可以很容易做到：仅当数据帧中的目的地址与适配器ROM中存放的硬件地址一致时，该适配器才能接受这个数据帧。适配器对不是发送给自己的数据帧就丢弃。这样，具有广播特性的总线上就实现了一对一的通信。
        人们也常把局域网上的计算机称为“主机”、“工作站”、“站点”或“站”。
        为了通信的简便，以太网采用了以下两种措施：
            第一，采用较为灵活的无连接的工作方式，即不必先建立连接就直接发送数据。适配器对发送的数据帧不进行编号，也不要求对方发回确认。这样做的里有是局域网信道的质量很好，因通信质量不好产生差错的概率是很小的。因此，以太网提供的服务是不可靠的交付。即尽最大努力的交付。当目的站收到有差错的数据帧时（例如，用CRC查出有差错），就把帧丢弃，其他什么也不做。但对有差错帧是否需要重传则由高层来决定。例如，如果高层使用TCP协议，那么TCP就会发现丢失了一些数据。于是经过一定时间后，TCP就把这些数据重新传递给以太网进行重传。但以太网并不知道这是重传帧，而是当做新的数据帧来发送。
            第二，以太网发送的数据都是用曼彻斯特（Manchester）编码的信号。我们知道，二进制基带数字信号通常就是高、低电压交替出现的信号。使用这种信号的最大问题就是当出现一长串的连1或连0时，接收端就无法从收到的比特流中提取位同步（即比特同步）信号。曼彻斯特编码的编码方法是把每一个码元再分成两个相等的间隔。码元1是在前一个间隔为低电压而后一个间隔为高电压。码元0则正好相反，从高电压变到低电压（也可以采用相反的约定，即1是“前高后低”而0是“前低后高”）。这样就保证了在每一个码元的正中间出现一次电压的转换，而接收端就利用这种电业的转换很方便地把位同步信号提取出来。但是从曼彻斯特编码的波形图也不难看出其缺点
