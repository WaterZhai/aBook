第4章   网路层

本章讨论网络互连问题，也就是谈论对个网络通过路由器互连成为一个互连网络（或互联网）的各种问题。在介绍网路层提供的两种不同的服务后，就进入本章的核心内容--网际协议IP，这是本书的一个重点内容。只有较深入地掌握了IP协议的主要内容，才能理解因特网是怎样工作的。本章还要讨论网际控制报文协议ICMP和几种常用的路由选择协议，以及IP多播的概念。最后简要地介绍虚拟专用网VPN和网络地址转换NAT。
    本章最重要的内容是：
        1）虚拟互联网络的概念；
        2）IP地址与物理地址的关系；
        3）传输的分类IP地址（包括子网掩码）和无分类域间路由选择CIDR；
        4）路由选择协议的工作原理。
4.1网络层提供的两种服务
    在计算机网络领域，网络层应该向运输层提供怎样的服务（“面向连接”还是“无连接”）曾引起了长期的争论。争论焦点的实质就是：在计算机通信中，可靠交付应当由谁来负责？是网络还是端系统？
    有些人认为应当借助于电信网的成功经验，让网络负责可靠交付。大家知道，传统电信网的主要业务是提供电话服务。电信网使用昂贵的程控交换机（其软件也非常复杂），用面向连接的通信方式，使电信网络能够向用户（实际上就是电话机）提供可靠传输的服务。因此他们任务，计算机网络也应模仿打电话所使用的面向连接的通信方式。当两个计算机进行通信时，也应当先建立连接（但在分组交换中是建立一条虚电路VC（Virtual Circuit））,以保证双方通信所需的一切网络资源。然后双方就沿着已建立的虚电路发送分组。这样的分组的首部不需要填写完整的目的主机地址，而只需要填写这条虚电路的编号（一个不大的整数），因而减少了分组的开销。这种通信方式如果再使用可靠传输的网络协议，就可使所发送的分组无差错按序列到达终点，淡然也不丢失、不重复。在通信结束后要释放建立的虚电路。
    但因特网的先驱者却提出一种崭新的网络设计思路。他们认为，电信网提供的端到端可靠传输的服务对电话业务无疑是很合适的，因为电信网的终端（电话机）非常简单，没有智能，无差错处理能力。因此电信网必须负责把用户电话机产生的话音信号可靠地传送到对方的电话机，使还原后的话音质量符合技术规范的yaoqiu.dan计算机网络的端系统是有智能的计算机。计算机有很强的差错处理的能力（这点和电话机本质上的差别）。因此，因特网在设计上就采用了和电信网完全不同的思路。
    因特网采用的设计思路是这样的：网络层向上只提供简单灵活的、无连接的、尽最大努力交付的数据报服务。网络在发送分组时不需要先建立连接。每一个分组（也就是IP数据报）独立发送，与其前后的分组无关（不进行编号）。网络层不提供服务质量的承诺。也就是说，所传送的分组可能出错、丢失、重复和失序（即不按序到达终点），当然也不保证分组交付的时限。由于传输网络不提供端到端的可靠传输服务，这就使网络中的路由器可以做的比较简单，而且价格低廉（与电信网的交换机相比较）。如果主机（即端系统）中的进程之间的通信需要时可靠的，那么就由网络的主机中的运输层负责（包括差错处理、流量控制等）。采用这种设计思路的好处是：网络的造价大大降低，运行方式灵活，能够使用多种应用。因特网能够发展到今日的规模，充分证明了当初采用这种设计思路的正确性。
    OSI体系的支持者曾极力主张在网络层使用虚电路服务。他们也曾推出过网络层虚电路服务的著名标准--ITU-T的X.25建议书。但现在X.25早已成为历史了。
        虚电路服务于数据报服务的对比
        ---------------------------------------------------------------------------------------------------------------
        |对比的方面              |虚电路服务                                  |数据报服务                                 |
        ----------------------------------------------------------------------------------------------------------------
        |思路                   |可靠通信应当由网络来保证                     |可靠通信应当由用户主机来保证                 |
        ----------------------------------------------------------------------------------------------------------------
        |连接的建立              |必须有                                     |不需要                                     |
        ----------------------------------------------------------------------------------------------------------------
        |终点地址                |仅在连接建立阶段使用，每个分组使用短的虚电路号|每个分组都有终点的完整地址                    |
        ----------------------------------------------------------------------------------------------------------------
        |分组的转发              |属于同一条虚电路的分组均按照统一路由进行转发  |每个分组独立选择路由进行转发                  |
        ----------------------------------------------------------------------------------------------------------------
        当结点出故障时           |所有通过故障的结点的虚电路均不能工作          |出故障的结点可能丢失分组，一些路由可能会发生变化|
        -----------------------------------------------------------------------------------------------------------------
        |分组的顺序              |总是按发送顺序到达终点                       |到达终点时不一定按发送顺序                    |
        ------------------------------------------------------------------------------------------------------------------
        |端到端的差错处理和流量控制|可以由网络复杂，也可以由用户主机负责          |有用户主机负责                               |
        ------------------------------------------------------------------------------------------------------------------

    鉴于TCP/IP体系的网络层提供的是数据报服务，因此下面我们的讨论都是围绕网络层如何传送IP数据报这个主题。
4.2网际协议IP
    网际协议IP是TCP/IP体系中两个最主要的协议之一，也是最重要的因特网标准协议之一。与IP协议配套使用的还有四个协议：
        ·地址解析协议ARP（address Resolution Protocol）
        ·逆地址解析协议RARP（Reverse Address Resolution Protocol）
        ·网际控制报文协议ICMP（Internet Control Message Protocol）
        ·网际组管理协议IGMP（Internet Group Management Protocol）
    四个协议和网际协议IP的关系：
        应用层    |各种应用层协议（HTTP，FTP，SMTP等）
        ---------------------------------------
        运输层    |TCP，UDP
        ---------------------------------------
        网络层    |ICMP、IGMP
                  |            IP
                  |                RARP、ARP
        ---------------------------------------
        网络接口层|与各种网路接口
        ---------------------------------------
        在这一层中，ARP和RARP在最下面，因为IP经常要使用这两个协议。ICMP和IGMP在这一层的上部，因为它们要使用IP协议。这四个协议将在后面陆续介绍。由于网际协议IP是用来使互连起来的许多计算机网络能够进行通信，因此TCP/IP体系中的网络层常常称为网际层（internet layer），或IP层。
        在讨论网际协议IP之前，必须了解什么是虚拟互联网络。
    4.2.1虚拟互联网络
        我们知道，如果要在全世界范围内把数以百万计的网络都互连起来，并且能够互相通信，那么这样的任务一定非常复杂。其中会遇到许多问题需要解决，如：
            ·不同的寻址方案
            ·不同的最大分组长度
            ·不同的网络接入机制
            ·不同的超时控制
            ·不同的差错恢复方法
            ·不同的状态报告方法
            ·不同的路由选择技术
            ·不同的用户接入控制
            ·不同的服务（面向连接服务和无连接服务）
            ·不同的管理与控制方式；等等。
        能不能让大家是用相同的网络，这样可是网络互连变得比较简单。答案是不行的。因为用户的需求是多种多样的，没有一种单一的网络能够适应所有用户的需求。另外网络技术是不断发展的，网络的制造厂家也要经常推出新的网络，在竞争中求生存。因此在市场上总是有很多种不同性能、不同网络协议的网络，供不同的用户选用。
        从一般的概念来讲，将网络互相连接起来要使用一些中间设备。根据中间设备所在的层次，可以有以下四种不同的中间设备：
            1）物理层使用的中间设备叫做转发器（repeater）。
            2）数据链路层使用的中间设备叫做网桥或桥接器（bridge）。
            3）网络层使用的中间设备叫做路由器（router）。
            4）在网络层以上使用的中间设备叫做网关（gateway）。用网关连接两个不兼容的系统需要在高层进行协议的转换。
        当中间设备是转发器或网桥时，这仅仅是把一个网络扩大了，而从网络层的角度看，这仍然是一个网络，一般并不称之为网络互连。网关由于比较复杂，目前使用得较少。因此现在我们讨论网络互连时都是指用路由器进行网络互连和路由选择。路由器其实就是一台专用计算机，用来在互联网中进行路由选择。由于历史的原因，许多有关TCP/IP的文献曾经把网络层使用的路由器称为网关（在本书中，有时也这样用）。对此请读者加一注意。
        TCP/IP体系在网络互连上采用的做法是在网路层（即IP层）采用了标准化协议，但相互连接的网络则可以是异构的。有许多计算机网络通过一些路由器进行互连。由于参加互连的计算机网络都使用相同的网际协议IP（Internet Protocol），因此可以把互连以后的计算机网络看成一个虚拟互联网络（internet）。所谓虚拟互联网络也就是逻辑互联网络，它的意思就是互连起来的各种物理网络的异构性本来是客观存在的，但是我们利用IP协议就可以使这些性能各异的网络在网络层上看起来好像是一个统一的网络。
        这种使用IP协议的虚拟互联网络可简称为IP网（IP网是虚拟的，但平常不必每次都强调“虚拟”二字）。使用IP网的好处是：当IP网上的主机进行通信时，就好像在一个单个网络上通信一样，它们看不见互连的各网络的具体异构细节（如具体的编织方案、路由选择协议，等等）。
        当很多异构网络通过路由器互连起来时，如果所有的网络都使用相同的IP协议，那么在网络层讨论问题就显得很方便。现在用一个例子来说明。
        互联网中的源主机H1要把一个IP数据报发送给目的主机H2.根据第1章中讲过的分组交换的存储转发概念，主机H1先要查找自己的路由表，看目的主机是否就在本网络上。如是，则不需要经过任何路由器而是直接交付，任务就完成了。如不是，则必须把IP数据报发送给某个路由器（R1）。R1在查找了自己的路由表后，知道应把数据报转发给R2进行间接交付。这样一直转发下去，最后由路由器R5知道自己是和H2连接在同一个网络上，不需要再使用别热路由器转发了，于是就把数据报直接交付给目的主机H2。源主机、目的主机以及各路由器的协议栈。我们注意到，主机的协议栈共有五层，但路由器的协议栈只有下三层。在R4和R5之间使用了卫星链路，而R5所连接的是个无线局域网。在R1到R4之间的三个网络则可以是任意类型的网络。总之，这里强调的是：互联网可以由多种异构网络互联组成。
        如果我们只从网络层考虑问题，那么IP数据报就可以想象是在网络层中传送。这样就不必画出许多完成的协议栈，使问题的讨论更加简单。
        有了虚拟互联网络的概念后，再讨论在这样的虚拟网络上如何寻址。
    4.2.2分类的IP地址
        在TCP/IP体系中，IP地址是一个最基本的概念，一定要把它弄清楚。有关IP最重要的文档就是REC791，它很早就成了因特网的正式标准。
        1.IP地址及其表示方法
        整个的因特网就是一个单一的、抽象的网络。IP地址就是给因特网上的每一个主机（或路由器）的每一个接口分配一个在全世界范围是唯一的32位的标识符。IP地址的结构使我们可以在因特网上很方便地进行寻址。IP地址现在在由因特网名字与号码指派公司ICANN（Internet Corporation for Assigned Names and Numbers）进行分配。
        IP地址的编织方法共经过了三个历史阶段。这三个阶段是：
            1）分类的IP地址。这是最基本的编制方法，在1981年就通过了相应的标准协议。
            2）子网的划分。这是对最基本的编址方法的改进，其标准RFC950在1985年通过。
            3）构成超网。这是比较新的五分类编址方法。1993年提出后很快就得到推广应用。
        本节只讨论最基本的分类IP地址。后两种方法将在4.3节中讨论。
        所谓“分类的IP地址”就是将IP地址划分为若干个固定类，每一类地址都由两个固定长度的字段组成，其中第一个字段是网络号（net-id），它标志主机（或路由器）所连接到的网络。一个网络号在整个因特网范围内必须是唯一的。第二个字段是主机号（host-id），它标志该主机（或路由器）。一个主机号在他前面的网络号所指明的网络范围内必须是唯一的。由此可见，一个IP地址在整个因特网范围内是唯一的。
            这种两级的IP地址可以记为：
                              IP地址::={<网络号>,<主机号>}
            上式中的“::=”便是“定义为”。各种IP地址的网络号字段和主机号字段，这里A类、B类和C类地址都是单薄地址（一对一通信），是最常用的。
                ·A类、B类和C类地址的网络号字段分别为1，2，和3字节长，而在网络号字段的最前面有1-3位的类别位，其数值分别规定为0，10和110。
                ·A类、B类和C类地址的主机号字段分别为3个、2个和1个字节长。
                ·D类地址（前4位是1110）用于多播（一对多通信）。我们将在4.6节讨论IP多播。而E类地址（前4位是1111）保留为以后用。
            这里要指出，由于近年来已经广泛使用无分类IP地址进行路由选择，A类、B类和C类地址的区分已经成为历史，但由于很多文献和资料都还使用传统的分类IP地址，因此我们在这里还要从分类IP地址讲起。
            从IP地址的结构来看，IP地址并不仅仅指明一个主机，而是还指明了主机所连接到的网络。
            把IP地址划分为三个类别，当初是这样考虑的。各种网络的差异很大，有的网络拥有很多主机，而有的网络上的主机则很少。把IP地址划分为A类、B类和C类是为了更好地满足不同用户的要求。当某个单位申请到一个IP地址时，实际上是获得了具有同样网络号的一块地址。其中具体的各个主机号则由该单位自行分配，只要做到在该单位管辖的范围内无重复的主机号即可。对主机或路由器来说，IP地址都是32位的二进制代码。为了提高可读性，我们常常把32位的IP地址中的每8位用其等效的十进制数字表示，并且在这些数字之间加上一个点。这就叫做点分十进制记法（dotted decimal notation）。一个B类IP地址。显然，128.11.3.31比10000000 00001011 00000011 00011111读起来要方便得多。
        2.常用的三种类别的IP地址
        A类地址的网路号字段占一个字节，只有7位可供使用（该字段的第一位已固定为0），但可指派的网络号是126个（即2^7-2）。减2的原因是：第一，IP地址中的全0表示“这个（this）。”网络号字段为全0的IP地址是个保留地址，意思是“本网络”。第二，网络号为127（即01111111）保留作为本地软件环回测试（loopback test）本主机的进程之间的通信之用。若主机发送一个目的地址为环回地址（例如127.0.0.1）的IP数据报，则本主机中的协议软件就处理数据报中的数据，而不会把数据报发送到任何网络。目的地址为环回地址的IP数据报永远不会出现在任何网络上，因为网路号为127的地址根本不是一个网络地址。
        A类地址的主机号占3字节，因此每一个A类网络中最大主机数是2^24-2，即16777214.这里减2的原因是：全0的主机号字段表示该IP地址是“本主机”所连接到的单个网络地址（例如，一主机的IP地址为5.6.7.8，则该主机所在的网络地址就是5.0.0.0），而全1表示“所有的（all）”，因此全1的主机号字段表示该网络上的所有主机。
        IP地址空间共有2^32（即4294967296）个地址。整个A类地址空间共有2^31个地址，占有整个IP地址空间的50%。
        B类地址的网络号字节由2字节，但前面两位（10）已经固定了，只剩下14位可以进行分配。因为网络号字段后面的14位无论怎样取值也不可能出现使整个2字节的网络号字段成为全0或全1，因此这里不存在网络总数减2的问题。但实际上B类网络地址128.0.0.0是不指派的，而可以指派的B类最小网络地址是128.1.0.0.因此B类地址可指派的网络数为2^14-1，即16383.B类地址的每一个网络上的最大主机数是2^16-2，即65534.这里需要减2是因为要扣除全0和全1的主机号。整个B类地址空间共约有2^30个地址，占整个IP地址空间的25%。
        C类地址有3个字节的网路号字段，最前面的3位是（110），还有21位可以进行分配。C类网络地址192.0.0.0也是不指派的，可以指派的C类最小网络地址是192.0.1.0，因此C类地址可指派的网络总数是2^21-1，即2097151.每一个C类地址的最大主机数是2^8-2，即254.整个C类地址空间共约有2^29个地址，占整个IP地址的12.5%。
            这样，我们就可得出表所示的IP地址的指派范围。
            ----------------------------------------------------------------------------------------
            |网络类别|最大可指派的网络数|第一个可指派的网络号|最后一个可指派的网络号|每个网络中的最大主机数|
            ----------------------------------------------------------------------------------------
            |A      |126（2^7-2）     |1                  |126                 |16777214           |
            ----------------------------------------------------------------------------------------
            |B      |16383（2^14-1）  |128.1              |191.255             |65534              |
            ---------------------------------------------------------------------------------------
            |C      |2097151（2^21-1）|192.0.1            |223.255.255         |254                |
            ----------------------------------------------------------------------------------------
            一般不实用的IP地址，这些地址只能在特定的情况下使用。
            ------------------------------------------------------------------------------------
            |网络号|主机号           |源地址使用|目的地址使用|代表的意思                           |
            ------------------------------------------------------------------------------------
            |0     |0                |可以     |不可       |在本网络上的本主机（见6.6节的DHCP协议）|
            ------------------------------------------------------------------------------------
            |0     |host-id          |可以     |不可       |在本网络上的某个主机host-id           |
            ------------------------------------------------------------------------------------
            |全1   |全1              |不可      |可以      |只在笨网络上进行广播（各路由器均不转发）|
            ------------------------------------------------------------------------------------
            |net-id|全1              |不可      |可以      |对net-id上的所有主机进行广播          |
            ------------------------------------------------------------------------------------
            |127   |非全0或全1的任何数|可以      |可以      |用作本地软件环回测试之用              |
            ------------------------------------------------------------------------------------

        IP地址具有以下一些重要特点：
            1）每一个IP地址都由网络号和主机号两部分组成。从这个意义上说，IP地址是一种分等级的地址结构。分两个等级的好处是：第一，IP地址管理机构在分配IP地址时只分配网络号（第一级），而剩下的主机号（第二级）则由得到该网络号的单位自行分配。这样就方便了IP地址的管理。第二路由器仅根据目的主机所连接的网络号来转发分组（而不考虑主机号），这样就可以使路由表中的项目数大幅度减少，从而减小了路由表所占的存储空间以及查找路由表的时间。
            2）实际上IP地址是标志一个主机（或路由器）和一条链路的接口。当一个主机同时连接到两个网络上，该主机就必须同时具有两个相应的IP地址，其网络号必须是不同的。这种主机称为多归属主机（multihomed host）。由于一个路由器至少应当连接到两个网络，因此一个路由器至少应当有两个不同的IP地址。
            3）按照因特网的观点，一个网络是指具有相同网络号net-id的主机的集合，因此，用转发器或网桥连接起来的若干个局域网仍为一个网络，因为这些局域网都具有同样的网络号。具有不同网络号的局域网必须使用路由器进行互连。
            4）在IP地址中，所有分配到网络号的网络（不管是范围很小的局域网，还是可能覆盖很大地理范围的广域网）都是平等的。
        三个局域网（LAN1、LAN2和LAN3）通过三个路由器（R1、R2和R3）互连起来构成的一个互联网（此互联网用虚线圆角方框表示）。其中局域网LAN2是由两个网段通过网桥B互连的。
        我们应当注意到：
            1）在同一个局域网上的主机或路由器的IP地址中的网络号必须是一样的。网络号就是IP地址中的网络号字段的值，这也是文献中常见的一种表示方法。另一种表示方法使用主机号为全0的网络IP地址。
            2）用网桥（它只在链路层工作）互连的网段仍然是一个局域网，只能有一个网络号。
            3）路由器总是具有两个或两个以上的IP地址。即路由器的每一个接口都有一个不同网络号的IP地址。
            4）当两个路由器直接相连是（例如通过一条租用线路），在连线两端的接口处，可以分配也可以不分配IP地址。如分配了IP地址，则这一段连线就构成了一种只包含一段线路的特殊“网络”（如图中的N1，N2和N3）。之所以叫做“网络”是因为它有IP地址。但为了节省IP地址资源，对于这种仅有一段连线构成的特殊“网络”，现在也常常不分配IP地址。通常把这样的特殊网络叫做无编号网络（unnumbered network）或无名网络（anonymous network）。
    4.2.3IP地址与硬件地址
        在学习IP地址时，很重要的一点就是要弄懂主机的IP地址与硬件地址的区别。
        这两种地址的区别。从层次的角度看，物理地址是数据链路层和物理层使用的地址，而IP地址是网络层和以上各层使用的地址，是一种逻辑地址（称为IP地址是逻辑地址是因为IP地址使用软件实现的）。
                      |首部|应用层数据 |
                      |----TCP报文----|
                 |首部|               |
                 |----  IP数据报  ----|
            |首部|                    |尾部|
            |----        MAC帧         ----|
            数据链路层使用硬件地址；网络层及以上使用IP地址
        在发送数据时，数据从高层下到底层然后才到通信链路上传输。使用IP地址的IP数据报一旦交给了数据链路层，就被封装成MAC帧了。MAC帧在传送时使用的源地址和目的地址都是硬件地址，这两个硬件地址都写在MAC帧的首部中。
        连接在通信链路上的设备（主机或路由器）在接收MAC帧时，其根据是MAC帧首部中的硬件地址。在数据链路层看不见隐藏在MAC帧的数据中的IP地址。只有在剥去MAC帧的首部和尾部后把MAC层的数据上交给网络层后，网络层才能在IP数据报的首部中找到源IP地址和目的地址。
        总之，IP地址放在IP数据报的首部，而硬件地址则放在MAC帧的首部。在网络层和网络层以上使用的是IP地址，而数据链路层及以下使用的是硬件地址。当IP数据报放入数据链路层的MAC帧中以后，整个的IP数据报就成为MAC帧的数据，因而在数据链路层看不见数据报的IP地址。
        三个局域网用两个路由器R1和R2互连起来。现在主机H1要和主机H2通信。这两个主机的IP地址分别是IP1和IP2，而它们硬件地址分别为HA1和HA2（HA表示Hardware Address）。通信的路径是：H1->经过R1转发->再经过R2转发->H2.路由器R1因同时连接到两个局域网上，因此它有两个硬件地址，即HA3和HA4.同理，路由器R2也有两个硬件地址HA5和HA6.
        这里要强调指出的是：
            1）在IP层抽象的互联网上只能看到IP数据报。虽然IP数据报要经过路由器R1和R2的两次转发，但在它的首部中的源地址和目的地址始终分别是IP1和 IP2。数据报上写的“从IP1到IP2”就表示前者是源地址而后者是目的地址。数据报中间经过的两个路由器的IP地址并不出现在IP数据报的首部中。
            2）虽然在IP数据报首部有源站IP地址，但路由器值根据目的站的IP地址的网络号进行路由选择。
            3）在局域网的链路层，只能看见MAC帧。IP数据报被封装在 MAC帧中。MAC帧在不同网络上传送时，其MAC帧首部中的源地址和目的地址要发生变化。开始在H1到R1间传送时，MAC帧首部中写的是从硬件地址HA1发送到硬件地址HA3，路由器R1收到此MAC帧后，在转发时要改变首部中的源地址和目的地址，将它们换成从硬件地址HA4发送到硬件地址HA5.路由器R2收到此帧后，再改变一次MAC帧的首部，填入从HA6发送到 HA2ranhou在R2到H2之间传送。 MAC帧的首部的这种变化，在上面的IP层上也是看不见的。
            4）尽管互连在一起的网络的硬件地址体系各不相同，但IP层抽象的互联网却屏蔽了下层这些很复杂的细节。只要我们在网络层上讨论问题，就能够使用统一的、抽象的IP地址研究主机和主机或路由器之间的通信。上述这种“屏蔽”概念是一个很有用、很普遍的基本概念。例如，计算机中广泛使用的图形用户界面使得用户只需要简单地点击几下鼠标就能让电脑完成很多任务。实际上电脑要完成这些任务必须执行很多条指令。但这些复杂的过程全被设计良好的图形用户界面屏蔽掉了，使用户看不见这些复杂过程。
            以上这些概念是计算机网络的精髓所在，对这些重要概念务必仔细思考和掌握。
        细心的读者会发现，还有两个重要问题没有解决：
            1）主机或路由器怎样知道应当在MAC帧的首部填入什么样的硬件地址？
            2）路由器中的路由表是怎样得出的？
            第一个问题就是下一节所要将的内容，而第二个问题将在后面4.5节详细讨论。
    4.2.4地址解析协议ARP和逆地址解析协议RARP
        在实际应用中，我们经常会遇到这样的问题：已经知道了一个机器（主机或路由器）的IP地址，需要找出其相应的物理地址；或反过来，已经知道了物理地址，需要找出相应的IP地址。地址解析协议ARP和逆地址解析协议RARP就是用来解决这样的问题的。
        这两种协议的作用：
            IP地址===>|ARP|===>物理地址
            物理地址===>|RARP|===>IP地址
        逆地址解析协议RARP在过去曾起到重要作用。但现在的DHCP协议（见第6章的6.6节）已经包含了RARP协议的功能。因此现在已经没有人再使用单独的RARP协议了。因此这里不再进一步介绍RARP协议。我们只需要了解，逆地址解析协议RARP的作用是只知道自己硬件地址的主机能够通过RARP协议找出其IP地址。
            下面就介绍ARP协议的要点。
        我们知道，网络层使用的是IP地址，但在实际网络的链路上传送数据帧时，最终还是必须使用该网络的硬件地址。但IP地址和下面的网络的硬件地址之间由于格式不同而不存在简单的映射关系(例如，IP地址有32位，而局域网的硬件地址是48位)。此外，在一个网络上可能经常会有新的主机加入进来，或撤走一些主机。更换网络适配器也会使主机的硬件地址改变。地址解析协议ARP解决这个问题的方法是在主机ARP高速缓存中应存放一个从IP地址到硬件地址的映射表，并且这个映射表还经常动态更新（新增或超市删除）。
        每一个主机都没有一个ARP高速缓存（ARPcache），里面有本局域网上的个主机和路由器的IP地址到硬件地址的映射表，这些都是该主机目前知道的一些地址。那么主机怎样知道这些地址呢？我们可以通过下面的例子来说明。
        当主机A要向本局域网上的某个主机B发送IP数据报时，就先在其ARP高速缓存中查看有无主机B的IP地址。如有，就在ARP高速缓存中查出其对应额硬件地址，再把这个硬件地址写入MAC帧，然后通过局域网把该MAC帧发往此硬件地址。
        也有可能查不到主机B的IP地址的项目。这可能是主机B才入网，也可能是主机A刚刚加电，其高速缓存还是空的。在这种情况下，主机A就自动运行ARP，然后按一下步骤找出主机B的硬件地址。
        1）ARP进程在本局域网上广播发送一个 ARP请求分组（集体格式可参阅例如附录C中的第23章）。主机A广播发送ARP请求分组。ARP请求分组的主要内容是表明：“我的IP地址是209.0.0.5，硬件地址是00-00-C0-15-AD-18.我想知道IP地址为209.0.0.6的主机的硬件地址。”
        2）在本局域网上的所有主机上运行的ARP进程都收到此ARP请求分组。
        3）主机B在ARP请求分组中见到自己的IP地址，就向主机A发送ARP响应分组，并写入自己的硬件地址。其余的所有主机都不理睬这个ARP请求分组。ARP响应分组的主要内容是表明：“我的IP地址是209.0.0.6，我的硬件地址是08-00-2B-00-EE-0A。”请注意：虽然ARP请求分组是广播发送的，但ARP响应分组是普通的单播，即从不一个源地址发送到一个目的地址。
        4）主机A收到主机B的ARP响应分组，就在其ARP高速缓存中写入主机B的IP地址到硬件地址的映射。
        当主机A向B发送数据报时，很可能以后不久主机B还要向A发送数据报，因而主机B也可能要向A发送ARP请求分组。为了减少网络上的通信量，主机A在发送其ARP请求分组时，就把自己的IP地址到硬件地址的映射写入ARP请求分组。当主机B收到A的ARP请求分组时，就把主机A的这一地址映射写入主机B自己的ARP高速缓存中。以后主机B向A发送数据报时就很方便了。
        可见ARP高速缓存非常有用。如果不使用ARP高速缓存，那么任何一个主机只要进行一次通信，就必须在网络上用广播方式发送ARP请求分组，这就使网络上的通信量大大增加。ARP把已经得到的地址映射保存在高速缓存中，这样就使得该主机下次再和具有同样目的地址的主机通信时，可以直接从高速缓存中找到所需的硬件地址而不必再用广播方式发送ARP请求分组。
        ARP把保存在高速缓存中的每一个映射地址项目都设置生存时间（例如，10~20分钟）。凡超过生存时间的项目就从高速缓存中删除掉。设置这种地址映射的生存时间是很重要的。设想有一种情况。主机A和B通信。A的ARP高速缓存里保存有B的物理地址。但B的网络适配器突然坏了，B立即更换了一块，因此B的硬件地址就改变了。假定A还要和B继续通信。A在其ARP高速缓存中查找到B原先的硬件地址，并使用该硬件地址向B发送数据帧。但B原先的硬件地址已经失效了，因此A无法找到主机B。但是过了一段不长时间，A的ARP高速缓存中已经删除了B原先的硬件地址（因为他的生存时间到了），于是A重新广播发送ARP请求分组，又找到了B。
        请注意，ARP是解决同一个局域网上的主机或路由器的IP地址和硬件地址的映射问题。如果所要找的主机和源主机不在同一个局域网上，例如，主机H1就无法解析出主机H2的硬件地址（实际上主机H1也不需要知道远程主机H2的硬件地址）。主机H1发送给H2的IP数据报首先需要通过与主机H1连接在同一个局域网上的路由器R1来转发。因此主机H1这时需要把路由器R1的IP地址IP3解析为硬件地址HA3，以便能够把IP数据报传送到路由器R1.以后，R1从转发表找出了下一跳路由器R2，同时使用ARP解析出R2的硬件地址HA5.于是IP数据报按照硬件地址HA5转发到路由器R2.路由器R2在转发这个IP数据报时用类似方法解析出目的主机H2的硬件地址HA2，使IP数据报最终交付给主机H2.
        从IP地址到硬件地址的解析是自动进行的，主机的用户对这种地址解析过程是不知道的。只要主机或路由器要和本网络上的另一个已知IP地址的主机或路由器进行通信，ARP协议就会自动地把这个IP地址解析为链路层所需要的硬件地址。
            下面我们归纳使用ARP的四种典型情况。
            1）发送方是主机，要把IP数据报发送到本网络上的另一个主机。这时用ARP找到目的主机的硬件地址。
            2）发送方是主机，要把IP数据报发送到另一个网络上的一个主机。这时用ARP找到本网络上的一个路由器的硬件地址。剩下的工作由这个路由器来完成。
            3）发送方是路由器，要把IP数据报转发到本网络上的一个主机。这时用ARP找到目的主机的硬件地址。
            4）发送方是路由器，要把IP数据报转发到另一个网络上的一个主机。这时用ARP找到本网络上的一个路由器的硬件地址。剩下的工作由这个路由器来完成。
        在许多情况下需要多次使用ARP。但这只是以上的几种情况的反复使用而已。
        有的读者可能会产生这样的问题：既然在网络链路上传送的帧最终是按照硬件地址找到目的主机的，那么为什么我们不直接使用硬件地址进行通信，而是要使用抽象的IP地址并调用ARP来寻找出相应的硬件地址呢？
        这个问题必须弄清楚。
        由于全世界存在着各种各样的网络，它们使用不同的硬件地址。要使这些异构网络能够互相通信就必须进行非常复杂的硬件地址转换工作，因此由用户或用户主机来完成这项工作几乎是不可能的事。但统一的IP地址把这个复杂问题解决了。连接到因特网的主机只需拥有统一的IP地址，它们之间的通信就像连接在同一网络上那样简单方便，因为上述的调用ARP的复杂过程都是由计算机软件自动进行的，对用户来说是看不见这种调用过程的。
        因此，在虚拟的 IP网络上用IP地址进行通信给广大的计算机用户带来很大的方便。
    4.2.5IP数据报的格式
        IP数据报的格式能够说明IP协议都具有什么功能。在TCP/IP的标准中，各种数据格式常常以32位（即4字节）位单位来描述。
        一个IP数据报由首部和数据两部分组成。首部的前一部分是固定长度，共20字节，是所有IP数据报必须具有的。在首部的固定部分的后面使一些可选字段，其长度是可变的。下面介绍首部各字段的意义。
            1.IP数据报首部的固定部分中的各字段
                1）版本    占4位，指IP协议的版本。通信双方使用的IP协议的版本必须一致。目前广泛使用的IP协议版本号为4（即IPv4）。关于以后要使用的IPv6（即版本6的IP协议），我们将在第10章的10.1节讨论。
                2）首部长度    占4位，可表示的最大十进制数值是15.请注意，这个字段所表示数的单位是32位字（1个32位字长是4字节），因此，当IP的首部长度为1111时（即十进制的15），首部长度就达到最大值60字节。当IP分组的首部长度不是4字节的整数倍时，必须利用最后的填充字段加以填充。因此数据部分永远在4字节的整数倍时开始，这样做是实现IP协议时较为方便。首部长度限制为60字节的缺点是有时可能不够用。但这样做是希望用户尽量减少开销。最常用的首部长度就是20字节（即首部长度为0101），这时不使用任何选项。
                3）区分服务    占8位，用来获得更好的服务。这个字段在旧标准中叫做服务类型，但实际上一直没有被使用过。1998年IETF把这个字段改名为区分服务DS（Differentiated Services）。只有在使用区分服务时，这个字段才起作用（见8.4.4节）。在一般情况下都不使用这个字段。
                4）总长度   总长度指首部和数据之和的长度，单位为字节。总长度字段为16位，因此数据报的最大长度为2^16-1=65535字节。
                在IP层下面的每一种数据链路层都有其自己的帧格式，其中包括帧格式中的数据字段的最大长度，这称为最大传送单元MTU（MaximumTransgerUnit）。当一个IP数据报封装成链路层的帧时，此数据报的总长度（即首部加上数据部分）一定不能超过下面的数据链路层的MTU值。
                虽然使用尽可能长的数据报会使传输效率提高，但由于以太网的普遍应用，所以实际上使用的数据报长度很少有超过1500字节的。为了不使IP数据报的传输效率降低，有关IP的标准文档规定，所有的主机和路由器必须能够处理的IP数据报长度不得小于576字节。这个数值也就是最小的IP数据报的总长度。当数据报长度超过网络所容许的最大传送单元MTU时，就必须把过长的数据报进行分片后才能在网络上传送（见后面的“片偏移”字段）。这时，数据报首部中的“总长度”字段不是指为分片前的数据报长度，而是指分片后的每一个分片的首部长度与数据长度的总和。
                5）标识（identification）    占16位。IP软件在存储器中维持一个计数器，每产生一个数据报，计数器就加1，并将此值赋给标识字段。但这个“标识”并不是序号，因为IP是无连接服务，数据报不存在按序接收的问题。当数据报由于长度超过网络的MTU而必须分片时，这个标识字段的值就被复制到所有的数据报片的标识字段中。相同的标识字段的值使分片后的各数据报片最后能正确地重装成为原来的数据报。
                6）标志（flag）    占3位，但目前只有两位有意义。
                    ·标志字段中的最低位记为MF（MoreFragment）。MF=1即表示后面“还有分片”的数据报。MF=0表示这已是若干数据报片中的最后一个。
                    1标志字段中间的一位记为DF（Don'tFragment），意思是“不能分片”。只有当DF=0时才允许分片。
                7）片偏移   占13位。片偏移指出：较长的分组在分片后，某片在原分组中的相对位置。也就是说，相对于用户数据字段的起点，该片从何处开始。片偏移以8个字节位偏移单位。这就是说，每个分片的长度一定是8字节（64位）的整数倍。
                下面举一个例子。
                【例4-1】一数据报的总长度为3820字节，其数据部分为3800字节长（使用固定首部），需要分片为长度不超过1420字节的数据报片。因固定首部长度为20字节，因此每个数据报片的数据部分长度不能超过1400字节。于是分为3个数据报片，其数据部分的长度分别为1400，1400和1000字节。原始数据报首部被复制为各数据报片的首部，但必须修改有关字段的值。
                本例中的数据报首部与分片有关的字段中的数值，其中标识字段的值是任意给定的（12345）。具有相同的数据报片在目的站就可无误地重装成原来的数据报。
                现在假定数据报片2经过某个网络时还需要再进行分片，即划分为数据报片2-1（携带数据800字节）和数据报片2-2（携带数据600字节）。那么这两个数据报片的总长度、标识、MF、DF和片偏移分别为：820，12345，1，0，175；620，12345，1，0，275。
                8）生存时间    占8位，生存时间字段常用的英文缩写是TTL（TimeToLive），表明是数据报在网络中的寿命。由发出数据报的源点设置这个字段。其目的是防止无法交付的数据报无限制地在因特网中兜圈子（例如从路由器R1转发到R2，再转发到R3，然后又转发到R1），因而白白消耗网路资源。最初的设计是以秒作为TTL值的单位。每经过一个路由器时，就把TTL减去数据报在路由器所消耗的一段时间。若数据报在路由器消耗的时间小于1秒，就把TTL值减1。当TTL值减为零时，就丢弃这个数据报。
                然而随着技术的进步，路由器处理数据报所需的时间不断在缩短，一般都远远小于1秒钟，后来就把TTL字段的功能改为“跳数限制”（但名称不变）。路由器在转发数据报之前就把TTL值减1.若TTL值减小到零，就丢弃这个数据报，不再转发。因此现在TTL的单位不再是秒，而是跳数。TTL的意义是指明数据报在因特网中至多可经过多少个路由器。显然，数据报能在因特网中经过的路由器的最大数值是255.若把TTL的初始值设置为1，就表示这个数据报只能在本局域网中传送。因为这个数据报一传送到局域网上的某个路由器，在被转发之前TTL值就减小到零，因而就会被这个路由器丢弃。
                9）协议    占8位，协议字段指出此数据报携带的数据是使用何种协议，以便使目的主机的IP层知道应将数据部分上交给哪个处理过程。
                    常用的一些 协议和相应的协议字段值如下：
                    |协议名    |ICMP|IGMP|TCP|EGP|IGP|UDP|IPv6|OSPF|
                    ------------------------------------------------
                    |协议字段值|1   |2   |6   |8  |9  |17 |41  |89  |
                10）首部检验和    占16位。这个字段只检验数据报的首部，但不包括数据部分。这是因为数据报每经过一个路由器，路由器都要重新计算一下首部检验和（一些字段，如生存时间、标志、片偏移等都可能发生变化）。不检验数据部分可减少计算的工作量。为了进一步减小计算检验和的工作量，IP首部的检验和不采用复杂的CRC检验码而采用下面的简单计算方法：在发送方，先把IP数据报首部划分为许多16位字的序列，并把检验和字段置零。用反码算术运算把所有的16位字段相加后，将得到的和的反码写入检验和字段。接收方接到数据报后，将首部的所有16位字段再使用反码算术运算相加一次。将得到的和取反码，即得出接收方检验和的计算结果。若首部未发生任何变化，则此结果必为0，于是就保留这个数据报。否则即认为出差错，并将此数据报丢弃。
                11）源地址    占32位
                12）目的地址   占32位。
            2.IP数据报首部的可变部分
                IP首部的可变部分就是一个选项字段。选项字段用来支持排错、测量以及安全等措施，内容很丰富。此字段的长度可变，从1个字节到40个字节不等，取决于所选择的项目。某些选项项目只需要1个字节，它只包括1个字节的选项代码。但还有些选项需要多个字节，这些选项一个个拼接起来，中间不需要有分隔符，最后用全0的填充字段补齐成为4字节的整数倍。
                增加首部的可变部分是为了增加IP数据报的功能，但这同时也使得IP数据报的首部长度成为可变的。这就增加了每一个路由器处理数据报的开销。实际上这些选项很少被使用。新的IP版本IPv6就把IP数据报的首部长度做成固定的。因此这里不再继续讨论这些选项的细节。
        4.2.6IP层转发分组的流程
            下面我们先用一个简单例子来说明路由器是怎样转发分组的。一个路由表的简单的例子。有四个A类网络通过三个路由器连接在一起。每一个网络上都可能有成千上万个主机。可以想象，若按目的主机号来制作路由表，则所得出的路由表就会过于庞大（如果每一个网络由1万台主机，四个网络就有4万台主机，因而每一个路由表就有4万个项目，也就是4万行。每一行对应一个主机）。但若按主机所在的网络地址来制作路由表，那么每一个路由器中的路由表就只包含4个项目（即只有4行，每一行对应于一个网络）。以路由器R2的路由表为例。由于R2同时连接在网络2和网络3上，因此只要目的站在这两个网络上，都可通过接口0或1由路由器R2直接交付（当然还要利用地址解析协议ARP才能找到这些主机相对应的硬件地址）。若目的主机在网络1中，则下一跳路由器应为R1，其IP地址为20.0.0.7。路由器R2和R1由于同时连接在网络2上，因此从路由器R2把分组转发到路由器R1是很容易的。同理，若目的主机在网络4中，则路由器R2应把分组转发给IP地址为30.0.0.1的路由器R3.
            可以把整个网络拓扑简化。简化后，网络变成了一条链路，但每一个路由器旁边都注明其IP地址。使用这样的简化，可以使我们不用关心某个网络内部的具体拓扑以及连接在该网络上有多少台计算机，因为这些对于研究分组转发问题并没有什么关系。这样的简化强调了在互联网上转发分组时，是从一个路由器转发到下一个路由器。
            总之，在路由表中，对每一条路由最重要的是一下两个信息：（目的网络地址，下一跳地址）
            于是，我们就根据目的网络地址来确定下一跳路由器，这样做的结果是：
                1）IP数据报最终一定可以找到目的主机所在目的网络上的路由器（可能要通过多次的简介交付）。
                2）只有到达最后一个路由器时，才试图向目的主机进行直接交付。
            虽然因特网所有的分组转发都是基于目的主机所在的网络，但在大多数情况下都允许有这样的特例，即对特定的目的主机指明一个路由。这种路由叫做特定主机路由。采用特定主机路由可使网络管理人员能更方便地控制网络和测试网络，同时也可在需要考虑某种安全问题时采用这种特定主机路由。在对网络的连接或路由表进行排错时，指明到某一个主机的特殊路由就十分有用。
            路由器还可采用默认路由（default route）以减少路由表所占用的空间和搜索路由表所用的时间。这种转发方式在一个网络只有很少的对外连接时是很有用的。实际上，默认路由在主机发送IP数据报时往往更能显示出它的好处。我们在前面的4.2.1节已经讲过，主机在发送每一个IP数据报时都要查找自己的路由表。如果一个主机连接在一个小网络上，而这个网络只用一个路由器和因特网连接，那么在这种情况下使用默认路由是非常合适的。例如，在4-17的互联网中，连接在网络N1上的任何一个主机中的路由表只需要三个项目即可。第一个项目就是到本网络主机的路由，其目的网络就是本网络N1，因而不需要路由器转发，而是直接交付。第二个项目是到网络N2的路由，对应的下一跳路由器是R2.第三个项目就是默认路由。只要目的网络不是N1和N2，就一律选择默认路由，把数据报先间接交付到路由器R1，让R1再转发给下一个路由器，一直转发到目的网络上的路由器，最后进行直接交付。在实际上的路由器中，路由表中所示的“直接”和“默认”的几个字符并没有出现在路由表中，而是被记为0.0.0.0。
            这里我们应当强调指出，在IP数据报的首部中没有地方可以用来指明“下一跳路由器的IP地址”。在IP数据报的首部写上的IP地址是源IP地址和目的地址，而没有中间经过的路由器的IP地址。既然IP数据报中没有下一跳的IP地址，那么待转发的数据报又怎样能够找到下一跳路由器呢？
            当路由器收到一个待转发的数据报，在从路由表得出下一跳的IP地址后，不是把这个地址填入IP数据报，而是送交给下层的网络接口软件。网络接口软件负责把下一跳路由器的IP地址转换成硬件地址（使用ARP），并将此硬件地址放在链路层的MAC帧的首部，然后根据这个硬件地址找到下一跳路由器。由此可见，当发送一连串的数据报时，上述的这种查找路由表、计算硬件地址、写入MAC帧的首部等过程，将不断地重复进行、造成了一定的开销。
            那么，能不能在路由表中不实用IP地址而直接使用硬件地址呢？不行。我们一定要弄清楚，使用抽象的IP地址，本来就是为了隐藏各种底层网络的复杂性而便于分析和研究问题，这样就不可避免地要付出些代价，例如在选择路由时多了一些开销。但反过来，如果在路由表中直接使用硬件地址，那就会带来更多的麻烦。
            根据以上所述，可归纳出分组转发算法如下：
                1）从数据报的首部提取的主机的IP地址D，得出目的网络地址为N。
                2）若N就是与此路由器直接相连的某个网络地址，则进行直接交付，不需要再经过其他的路由器，直接把数据报交付给目的主机（这里包括把目的主机地址D转换为具体的硬件地址，把数据报封装为 MAC帧，再发送此帧）；否则就是间接交付，执行3。
                3）若路由表中有目的地址为D的特定主机路由，则把数据报传送给路由表中所指明的下一跳路由器；否则，执行4。
                4）若路由表中有到达网络N的路由，则把数据报传送给路由表中所指明的下一跳路由器；否则；执行5。
                5）若路由表中有一个默认路由，则把数据报传送给路由表中所指明的默认路由器；否则，执行6。
                6）报告转发分组出错。
            上面所讨论的是IP层怎样根据路由表的内容进行分组转发，而没有涉及到路由表一开始是如何建立的以及路由表中的内容应如何更新。但是在进一步讨论路由选择之前，我们还要先介绍分子网和构造超网这两个非常重要的概念。
4.3划分子网和构造超网
    4.3.1划分子网
        1.从两级IP地址到三级IP地址
        在今天看来，在ARPANET的早起，IP地址的设计确实不够合理。例如：
        第一，IP地址空间的利用率有时很低。
        每一个A类地址网络可连接的主机数超过1000万，而每一个N类地址网络可连接的主机数也超过6万。然而有些网络对连接在网络上的计算机数目有限制，根本达不到这样大的数值。例如10BASE-T以太网规定其最大节点数只有1024个。这样的以太网若使用一个B类地址就浪费6万多个IP地址，地址空间的利用率还不到2%，而其他单位的主机无法使用这些被浪费的地址。有的单位申请到了一个B类地址网络，但所连接的主机数并不多，可是又不愿意申请一个足够使用的C类地址，理由是考虑到今后可能的发展。IP地址的浪费，还会使IP地址空间的资源过早地被用完。
        第二，给每一个物理网络分配一个网络号会使路由表变得太大因而使网络性能变坏。
        每一个路由器都应当能够从路由表查出应怎样到达其他网络的下一跳路由器。因此，互联网中的网络数越多，路由器的路由表的项目数也就越多。这样，即使我们拥有足够多的IP地址资源可以给每一个物理网络分配一个网络号，也会导致路由器中的路由表中的项目数过多。这不仅增加了路由器的成本（需要更多的存储空间），而且使查找路由时耗费更多的时间，同时也使路由器之间定期交换的路由信息急剧增加，因而使路由器和整个因特网的性能都下降了。
        第三，两级IP地址不够灵活。
        有时情况紧急，一个单位需要在新的地点马上开通一个新的网络。但是在申请到一个新的IP地址之前，新增加的网络是不可能连接到因特网上工作的。我们希望有一种方法，使一个单位能随时灵活地增加本单位的网络，而不必事先到因特网管理机构去申请新的网络号。原来的两级IP地址无法做到这一点。
        为解决上述问题，从1985年起IP地址中又增加了一个“子网号字段”，使两级IP地址变成为三级IP地址，它能够较好地解决上述问题，并且使用起来也很灵活。这种做法叫做划分子网（subnetting），或子网寻址或子网路由选择、划分子网已成为因特网的正式标准协议。
        划分子网的基本思路如下：
        1）一个拥有许多物理网络的单位，可将所属的物理网络划分为若干个子网（subnet）。划分子网纯属一个单位内部的事情。本单位以外的网络看不见这个网络是由多少个子网组成，因为这个单位对外仍然变现为一个网络。
        2）划分子网的方式时从网络的主机号借用若干位作为子网号subnet-id，当然主机号也就相应减少了同样的位数。于是两级IP地址在本单位内部就变为三级IP地址：网络号、子网号和主机号。也可以用一下记法来表示：IP地址::={<网络号>,<子网号>,<主机号>}
        3）凡是从其他网络发送给本单位某个主机的IP数据报，仍然是根据IP数据报的目的网络好找到连接在本单位网络上的路由器。但此路由器在收到IP数据报后，再按目的网络好和子网号找到目的子网，把IP数据报交付给目的主机。
        下面用例子说明划分子网的概念某单位拥有一个B类IP地址，网络地址是145.13.0.0（网络号是145.13）。凡目的地址为145.13.x.x的数据报都被送到这个网络上的路由器R1.
        把网络划分为三个字网。这里假定子网号占用8位，因此在增加了子网号后，主机号就只有8位。所划分的三个字网分别是145.13.3.0，145.13.7.0和145.13.21.0.在划分子网后，整个网络对外部仍表现为一个网络，其网络地址仍为145.13.0.0。但网络145.13.0.0上的路由器R1在收到外来的数据报后，再根据数据报的目的地址把它转发到相应的子网。
        总之，当没有划分子网时，IP地址是两级结构。划分子网后IP地址变成了三级结构。划分子网只是把IP地址的主机号host-id这部分进行再划分，而不改变IP原来的网络号net-id。
        2.子网掩码
        现在剩下的问题就是：假定有一个数据报（其目的地址是145.13.3.10）已经到达了路由器R1.那么这个路由器如何把它转发到子网145.13.3.0呢？
        我们知道，从IP数据报的首部并不知道源主机或目的主机所连接的网络是否进行了子网的划分。这是因为32位的IP地址本身以及数据报的首部都没有包含任何有关子网划分的信息。因此必须另外想办法，这就是使用子网掩码（subnet mask）。
        IP地址为145.13.3.10的主机本来的两级IP地址结构。同一主机到的三级IP地址的结构，也就是说，现在从原来16位的主机号中拿出8位作为子网号subnet-id，而主机号减少到8位。请注意，现在子网号为3的网络的网络地址是145.13.3.0（既不是原来的网络地址，也不是子网号3）。为了使路由器R1能够很方便地从数据报中的目的IP地址中提取所要找的子网的网络地址，路由器R1就要使用子网掩码。子网掩码，它也是32位，由一串1和跟随的一串0组成。子网掩码中的1对用于IP地址中原来的net-id加上subnet-id，而子网掩码中的0对应于现在的host-id。虽然RFC文档中没有规定子网掩码中的1必须是连续的，但却极力推荐子网掩码中选用连续的1，以免出现可能发生的差错。
        R1把子网掩码和收到的数据报的目的IP地址145.13.3.10逐位相“与”（AND）（计算机进行这种逻辑AND运算是很容易的），得出了所要找的子网的网络地址145.13.3.0。
        使用子网掩码的好处是：不管网络有没有划分子网，只要把子网掩码和IP地址进行逐位的“与”运算（AND），就立即得出网络地址来。这样在路由器处理到来的分组时就可采用同样的算法。
        这里还要弄清一个问题，这就是：在不划分子网时，既然没有子网，为什么还要使用子网掩码？这就是为了更便于查找路右边。现在因特网的标准规定：所有的网络都必须使用子网掩码，同时在路由器的的路由表中也必须有子网掩码这一栏。如果一个网络不划分子网，那么该网络的子网掩码就使用默认子网掩码。默认子网掩码中1的位置和IP地址中的网络好字段net-id正好相对应。因此，若用默认子网掩码和某个不划分子网的IP地址逐位相“与”（AND），就应当能够得出该IP地址的网络地址来。这样做可以不用查找改地址的类别位就能知道这是哪一类的IP地址。显然，
            A类地址的默认子网掩码是255.0.0.0，或0xFF000000。
            B类地址的默认子网掩码是255.255.0.0，或0xFFFF0000。
            C类地址的默认子网掩码是255.255.255.0，或0xFFFFFF00。
            这三类IP地址的网络地址和相应的默认子网掩码。
        子网掩码是一个网络或一个子网的重要属性。在RFC950成为因特网的正式标准后，路由器在和相邻路由器交换路由器路由信息时，必须把自己所在网络（或子网）的子网掩码告诉相邻路由器。在路由器的路由表中的每一个项目，除了要给出目的网络地址外，还必须同时给出该网络的子网掩码。若一个路由器连接在两个子网上就拥有两个网络地址和两个子网掩码。
        我们以一个B类地址为例，说明可以有多少种子网划分的方法。在采用固定长度子网时，所划分的所有子网的子网掩码都是相同的。
            ----------------------------------------------------------------
            |        |网络地址-默认子网掩码|net-id-host-id为全0               |
            |A类地址  |255.0.0.0          |11111111-000000000000000000000000|
            |B类地址  |255.255.0.0        |1111111111111111-0000000000000000|
            |C类地址  |255.255.255.0      |111111111111111111111111-00000000|
            ----------------------------------------------------------------
        ==========================================================================
            B类地址的子网划分选择（使用固定长度子网）
            ---------------------------------------------------
            |子网号的位数|子网掩码        |子网数|每个子网的主机数|
            |2          |255.255.292.0  |2     |16382         |
            |3          |255.255.224.0  |6     |8190          |
            |4          |255.255.240.0  |14    |4094          |
            |5          |255.255.248.0  |30    |2046          |
            |6          |255.255.252.0  |62    |1022          |
            |7          |255.255.254.0  |126   |510           |
            |8          |255.255.255.0  |254   |254           |
            |9          |255.255.255.128|510   |126           |
            |10         |255.255.255.192|1022  |62            |
            |11         |255.255.255.224|2046  |30            |
            |12         |255.255.255.240|4096  |14            |
            |13         |255.255.255.248|8190  |6             |
            |14         |255.255.255.252|16382 |2             |
            ---------------------------------------------------
        在表中，自王淑是根据子网号subnet-id计算出来的。若subnet-id有n位，则共有2^n种可能的排列。除去全0和全1这两种情况，就得出表中的子网数。
        表中的“子网号的位数”中没有0，1，15和16这四种情况，因为这没有意义。
        请读者注意，虽然根据已成为因特网标准协议的RFC950文档，子网号不能全1或全0，但随着无分类域间路由选择CIDR的广泛使用，现在全1和全0的子网号也可以使用了，但一定要谨慎使用，要弄清你的路由器所用的路由选择软件是否支持全0或全1的子网号这种较新的用法。
        我们可以看出，若使用较少位数的子网号，则每一个子网上可连接的主机数就较多。反之，若使用较多位数的子网号，则子网的数目较多但每个字网上课连接的主机数就较少。因此我们可根据网络的具体情况（一共需要划分多少个子网，每个字网最多有多少个主机）来选择合适的子网掩码。
        通过简单的计算，读者不难得到这样的结论：划分子网增加了灵活性，但却减少了能够连接在网络上的主机总数。例如，本来一个B类地址最多可连接65534台主机，但表中任意一行的最后两项的乘积一定小于65534。
        对A类和C类地址的子网划分也可得出类似的表格，读者可自行算出。
        例4-2已知IP地址是141.14.72.24，子网掩码是255.255.192.0。试求网络地址。
            子网掩码是11111111 11111111 11000000 00000000。请注意，掩码的钱两个字节都是全1，因此网络地址的前两个字节位141.14。子网掩码的第四字节是全0，因此网络地址的第四字节是0。可见本题仅需对地址中的第三字节进行计算。我们只要把IP地址和子网掩码的第三字节用二进制表示，就可以很容易地得出网络地址。
            a.点分十进制表示的IP地址        141.      14.      72.      24
            b.IP地址的第3字节是二进制       141.      14.01001000.      24
            c.子网掩码是255.255.192.0 11111111.11111111.11000000.00000000
            d.IP地址与子网掩码逐位相与      141.      14.01000000.       0
            e.网络地址（点分十进制表示）    141.      14.       64.      0
        例4-3在上例中，若子网掩码改为255.255.224.0。试求网络地址，并讨论所得结果。
            用同样方法，可以得出网络地址是141.14.64.0，和例4-2的结果完全一样。
            a.点分十进制表示的IP地址        141.      14.      72.      24
            b.IP地址的第3字节是二进制       141.      14.01001000.      24
            c.子网掩码是255.255.192.0 11111111.11111111.11100000.00000000
            d.IP地址与子网掩码逐位相与      141.      14.01000000.       0
            e.网络地址（点分十进制表示）     141.      14.       64.      0
            这个例子说明，同样的IP地址和不通的子网掩码可以得出相同的网络地址。但是，不通的掩码的效果是不同的。在例4-2中，subnet-id是2位，host-id是14位。在例4-3中，subnet-id是3位，host-id是13位。因此这两个例子中可划分的子网数和每一个子网中国的最大主机数都是不一样的。
        下面进一步讨论使用了子网掩码后应怎样查找路由表。
    4.3.2使用子网时分组的转发
        在划分子网的情况下，分组转发的算法必须做相应的改动。
        我们应当注意到，使用子网划分后，路由表必须包含以下三项内容：目的网络地址、子网掩码和下一跳地址。
        在划分子网的情况下，路由器转发分组的算法如下：
            1）从收到的数据报的首部提取目的IP地址D。
            2）先判断是否为直接交付。对路由器直接相连的网络逐个进行检查：用各网络的子网掩码和D逐位相“与”（AND操作），看结构是否和相应的网络地址匹配。若匹配，则把分组进行直接交付（当然还需要把D转换成物理地址，把数据报疯转成帧发送出去），转发任务结束。否则就是间接交付，执行3。
            3）若路由表中有目的地址为D的特定主机路由，则把数据报传送给路由表中所指明的下一跳路由器；否则，执行4。
            4）对路由表中的每一行（目的网络地址，子网掩码，下一跳地址），用其中的子网掩码和D逐位相“与”（AND操作），其结果为N。若N与该行的目的网络地址匹配，则把数据报传送给该行指明的下一跳路由器；否则，执行5。
            5）若路由表中有一个默认路由，则把数据报传送给路由表中所指明的默认路由器；否则，执行6。
            6）报告转发分组出错。
        例4-4已知互联网，以及路由器R1中的路由表。现在主机H1向H2发送分组。试讨论收到H1向H2发送的分组后查找路由表的过程。
            -----H1：128.30.33.13-------------------------------子网1：网络地址128.30.22.0子网掩码255.255.255.128
                                     |（128.30.33.1）
                                     R1
                                     |（128.30.33.130）
            -------------------------------H2：128.30.33.138----子网2：网络地址128.30.33.128子网掩码255.255.255.128
                |（128.30.33.129）
                R2
                |（128.30.36.2）
            --------H3：128.30.36.12-----------------------------子网3：网路地址128.30.36.0子网掩码255.255.255.0

            =========================================================================
            R1的路由表（未给出默认路由器）
            |目的网络地址  |子网掩码        |下一跳|
            |128.30.33.0  |255.255.255.128|接口0 |
            |128.30.33.128|255.255.255.128|接口1 |
            128.30.36.0   |255.255.255.0  |R2    |
            ===============================================
            主机H1向H2发送的分组目的地址是H2的IP地址128.30.33.138。主机H1首先要进行的操作是把本子网的“子网掩码255.255.255.128”与H2的“IP地址128.30.33.138”逐位相“与”，得出128.30.33.128，它不等于H1的网络地址（128.30.33.0）。这说明H2与H1不在同一个子网上。因此H1不能把分组直接交付给H2.而必须交给子网上的默认路由器R1，由R1来转发。
            路由器R1在收到一个分组后，先找到路由表中的第一行，看看这一行的网络地址和收到的分组的网络是否匹配。因为并不知道收到的分组的网络地址，因此只能试试看。这就是用这一行（子网1）的“子网掩码255.255.255.128”和收到的分组的“目的地址128.30.33.138”逐位相“与”，得出128.39.33.128.然后和这一行给出的目的地址进行比较。但现在比较的结果是不一致（即不匹配）。
            用同样方法继续往下找第二行。用第二行的“子网255.255.255.128”和该分组的“目的地址128.30.33.128”逐位相“与”，结果也是128.30.33.128。但这个结果和第二行目的的网络相匹配，说明这个网络（子网2）就是收到分作所要寻找的出口网络。于是我不需要再找下一个路由器进行间接交付了。R1把分组从接口1直接交付给主机H2 （它们都在一个子网上）。
    4.3.3无分类编织CIDR（构造超网）
        1.网络前缀
            划分子网在一定程度上缓解了因特网在发展中遇到的困难。然而在1992年因特网仍然面临三个必须尽早解决的问题，这就是：
                1）B类地址在1992年已分配了近一半，眼看很快就将全部分配完毕！
                2）因特网主干网上的路由表中的项目数急剧增长（从几千个增长到几万个）。
                3）整个IPv4的地址空间最终将全部耗尽。
            当时预计前两个问题将在1994年变得非常严重。因此IETF很快地就研究出采用无分类编址的方法来解决前两个问题。IETF认为上面的第三个问题属于更加长远的问题，因此专门成立IPv6工作组负责研究解决新版本IP协议的问题。
            其实早在1987年，RFC1009就指明了在一个划分子网的网络中可同时使用几个不同的子网掩码。使用变长子网掩码VLSM（Variable Length Subnet Mask）可进一步提高IP地址资源的利用率。在VLSM的基础上又进一步研究出无分类编址方法，它的正式名字是无分类域间路由选择CIDR（Classless Inter-Domain Rounting，CIDR的读音是“sider”）。在1993年形成了CIDR的RFC文档：RFC1517~1519和1520。现在CIDR已经成为因特网建议标准协议。
            CIDR最主要的特点有两个：
                1）CIDR消除了传统的A类、B类和C类地址以及划分子网的概念，因而可以更加有效地分配IPv4的地址空间，并且可以在新的IPv6使用之前容许因特网的规模继续增长。CIDR把32位的IP地址划分为两个部分。前面的部分是“网络前缀”（network-prefix）（或简称为“前缀”），用来指明网络，后面的部分则用来指明主机。因此CIDR使IP地址从三级编址（使用子网掩码）又回到了两级编址，但这已是无分类的两级编址。他的记法是：IP地址::={<网络前缀>,<主机号>}，CIDR还使用“斜线记法”（slash notation），或称为CIDR记法，即在IP地址后面加上斜线“/”，然后写上网路前缀所占的位数。
                2）CIDR把网络前缀都相同的连续的IP地址组成一个“CIDR地址块”。我们只要知道CIDR地址块中的任何一个地址，就可以知道这个地址块的起始地址（即最小地址）和最大地址，以及地址块中的地址数。例如，已知IP地址128.14.35.7/20是某CIDR地址块中的一个地址，现在把它写成二进制表示，其中的前20位是网络前缀，而前缀后面的12位是主机号：128.14.35.7/20=10000000 00001110 0010|0011 00000111
                        这个地址所在的地址块中的最小地址和最大地址可以很方便地得出：
                            最小地址    128.14.32.0    10000000 00001110 0010|0000 00000000
                            最大地址    128.14.47.255  10000000 00001110 0010|1111 11111111
                    当然，这两个主机号是全0和全1的地址一般不使用。通常只使用在这两个地址之间的地址。不难看出，这个地址块共有2^12个地址。我们可以用地址块中的最小地址和网络前缀的位数指明这个地址块。例如，上面的地址块可记为128.14.32.0/20。在不需要指出地址块的起始地址时，也可把这样的地址块简称为“/20地址块”。
                    为了更方便地进行路由选择，CIDR使用32位的地址掩码（address mask）。地址掩码是一串1和一串0组成，而1的个数就是网络前缀的长度。虽然CIDR不使用的子网了，但由于目前仍有一些网络还使用子网划分和子网掩码，因此CIDR使用的地址掩码也可继续称为子网掩码。例如，/20地址块的地址掩码是：11111111 11111111 11110000 00000000（20个连续的1）。斜线记法中，斜线后面的数字就是地址掩码中1的个数。
                    请读者注意，“CIDR不使用子网”时指CIDR并没有在32位地址中指明若干位作为子网字段（subnet-id）。但分配到一个CIDR地址块的组织，仍然可以在本组织内根据需要划分出一些子网。这些子网也都只有一个网络前缀和主机好字段，但子网的网络前缀比整个组织的网络前缀要长些。例如某组织分配到地址块/20，就可以再划分为8个子网（即需要从主机号中借用3位来划分子网）。这时每一个子网的网络前缀就变成23位（原来的20位加上从主机号借来的3位），比该组织的网络前缀长3位。
                    斜线记法还有一个好处就是它除了表示一个IP地址外，还提供了其他一些重要信息。
                    例如，地址192.199.170.82/27不仅表示IP地址是192.188.170.82，而且还表示这个地址块的网络的前缀有27位，地址块包含32个IP地址。通过简单的计算还可得出，这个地址块的最小地址是192.199.170.64，最大地址是192.199.170.95.具体的计算方法是这样的。找出地址掩码中1和0的交界处发生在地址中的哪一个字节。现在是第四个字节。因此只要把这一个字节用二进制表示，写成01010010，取其前3位（这3位加上前3个字节的24位等于前缀的27位），再把后面的5位都写成0，即010|00000，等于十进制的64.这就找出了地址块的最小地址。再把地址的第四字节的最后5位都置1，即010|11111，等于十进制的95，这就找出了地址块中的最大地址。
                    由于一个CIDR地址块中有很多地址，所以在路由表中就利用CIDR地址块来查找目的网络。这种地址的聚合常称为路由聚合（route aggregation），它使得路由表中的一个项目可以表示原来传统分类地址的很多个（例如上千个）路由。路由聚合也称为构成超网（supernetting）。如果没有采用CIDR，则在1994和1995年，因特网的一个路由表就会超过7万个项目，而使用了CIDR后，在1996年一个路由表的项目数才只有3万多个。路由聚合有利于减少路由器之间选择信息的交换，从而提高了整个因特网的性能。
                    CIDR记法有多种形式，例如，地址块10.0.0.0/10可简写为10/10，也就是把点分十进制中低位连续的0省略。另一种简化表示方法是在网络前缀的后面加一个星号*，如：0000101000*  ，意思是：在星号*之前是网络前缀，而星号*表示IP地址中的主机号，可以是任意值。前缀位数不是8的整数倍时，需要进行简单的计算才能得到一些地址信息。
                    常用的CIDR地址块。表中的K表示2^10即1024.网络前缀小于13或大于27都较少使用。在“包含的地址数”中没有把全1和全0的主机号除外。
                        |CIDR前缀长度|点分十进制      |包含的地址数|相当于包含分类的网络数|
                        |/13        |255.248.0.0    |512K       |8个B类或2048个C类    |
                        |/14        |255.252.0.0    |256K       |4个B类或1024个C类    |
                        |/15        |255.254.0.0    |128K       |2个B类或512个C类     |
                        |/16        |255.255.0.0    |64K        |1个B类或256个C类     |
                        |/17        |255.255.128.0  |32K        |128个C类             |
                        |/18        |255.255.192.0  |16K        |64个C类              |
                        |/19        |255.255.224.0  |8K         |32个C类              |
                        |/20        |255.255.240.0  |4K         |16个C类              |
                        |/21        |255.255.248.0  |2K         |8个C类               |
                        |/22        |255.255.252.0  |1K         |4个C类               |
                        |/23        |255.255.254.0  |512        |2个C类               |
                        |/24        |255.255.255.0  |256        |1个C类               |
                        |/25        |255.255.255.128|128        |1/2个C类             |
                        |/26        |255.255.255.192|64         |1/4个C类             |
                        |/27        |255.255.255.224|32         |1/8个C类             |
                    从表可看出，每一个CIDR地址块中的地址数一定是2的整数次幂。除最后几行外，CIDR地址块都包含了多个C类地址（是一个C类地址的2^n倍，n是整数），这就是“构成超网”这一名词的来源。
                    使用CIDR的一个好处就是可以更加有效地分配IPv4的地址空间，可根据客户的需要分配适当大小的CIDR地址块。然而在分类地址的环境中，向一个组织分配IP地址，就只能以/8,/16或/24为单位来分配。这就很不灵活。
                    CIDR地址块分配的例子。假定某ISP已拥有地址块206.0.64.0/18（相当于有64个C类网络）。现在某大学需要800个IP地址。ISP可以给该大学分配一个地址块206.0.68.0/22，它包括1024（即2^10）个IP地址，相当于4个连续的C类/24地址块，占该ISP拥有的地址空间的1/16。这个大学然后可自由地对本校的各系分配地址块，而各系还可再划分本系的地址块。CIDR的地址块分配有时不易看清，这是因为网络前缀和主机号的界限不是恰好出现在整数字节处。只要写出地址的二进制表示（从表中可看出，实际上只需要将其中的一个关键字节转换为二进制的表示即可），弄清网络前缀的位数，就不会把地址块的范围弄错。
                    地址聚合的概念。这个ISP共拥有64个C类网络。如果不采用CIDR技术，则在与该ISP的路由器交换路由信息的每一个路由器的路由表中，就需要有64个项目。但采用地址聚合后，就只需要用路由聚合的一个项目206.0.64.0/18就能找到该ISP。同理，这个大学共有4个系。在ISP内的路由器的路由表中，也是需使用206.0.68.0/22这一个项目。
                    从表格中的二进制地址可看出，把四个系的路由聚合为大学的一个路由（即构成超网），是将网络前缀缩短。网络前缀越短，其地址块所包含的地址数就越多。而在三级结构的IP地址中，划分子网是使网络前缀边长。
                            |单位|地址块          |二进制表示                   |地址数|
                            |ISP|206.0.64.0/18   |11001110.00000000.01*       |16384 |
                            |大学|206.0.68.0/22  |1101110.00000000.010001*     |1024 |
                            |一系|206.0.68.0/23  |11001110.00000000.0100010*   |512  |
                            |二系|206.0.70.0/24  |11001110.00000000.01000110.* |256  |
                            |三系|206.0.71.0/25  |11001110.00000000.01000111.0*|128  |
                            |四系|206.0.71.128/25|11001110.00000000.01000111.1*|128  |
        2.最长前缀匹配
            在使用CIDR时，由于采用了网络前缀这种记法，IP地址由网络前缀和主机号这两个部分组成，因此在路由表中的项目也有相应的改变。这是，每个项目由“网络前缀”和“下一跳地址”组成。但是在查找路由表时可能会得到不止一个匹配结果。这样就带来一个问题：我们应当从这些匹配结果中选择哪一条路由呢？
            正确的答案是：应当从匹配结果中选择具有最长网络前缀的路由。这叫作最长前缀匹配（longest-prefix matching），这是因为网络前缀越长，其地址块就越小，因而路由就越具体（more specific）。最长前缀匹配又称为最长匹配或最佳匹配。为了说明最长前缀匹配的概念，我们仍以前面的例子来讨论。
            假定大学下属的四系希望ISP把转发给四系的数据报直接发到四系而不要经过大学的路由器，但又不愿意改变自己使用的IP地址块。因此，在ISP的路由器的路由表中，至少要有以下两个项目，即206.0.68.0/22（大学）和206.0.71.128/25（四系）。现在假定ISP收到一个数据报，其目的IP地址为D=206.0.71.130。把D分别和路由表中这两个项目的掩码逐位相“与”（AND操作）。将所得的逐位AND操作的结果按顺序写在下面。
                D和11111111 11111111 111111|00 00000000逐位相“与”=206.0.68.0/22    匹配
                D和11111111 11111111 11111111 1|0000000逐位相“与”=206.0.71.128/25    匹配
            不难看出，现在同一个IP地址D可以在路由表中找到两个目的网络（大学和四系）和该地址相匹配。根据最长前缀匹配的原理，应当选择后者，把收到的数据报转发到后一个目的网络（四系），即选择两个匹配的地址中更具体的一个。
            从以上的谈论可以看出，如果IP地址的分配一开始就采用CIDR，那么我们可以按网络所在的地理位置来分配地址块，这样就可大大减少路由表中的路由项目。例如，可以将世界划分为四大地区，每一个地区分配一个CIDR地址块：
                地址块194/7(194.0.0.0至195.255.255.255)分配给欧洲；
                地址块198/7(198.0.0.0至199.255.255.255)分配给北美洲；
                地址块200/7(200.0.0.0至201.255.255.255)分配给中美洲和南美洲；
                地址块202/7(202.0.0.0至203.255.255.255)分配给亚洲和太平洋地区。
            上面的每一个地址块包含有约3200万个地址。这种分配地址的方法就使得IP地址与地理位置相关联。它的好处是可以大大压缩路由表中的项目数。例如，凡是从中国发往北美的数据报（不管它是地址块198/7中的哪一个地址）都先送交位于美国的一个路由器，因此在路由表中使用一个项目就行了。
            但是，在使用CIDR之前，因特网的地址管理机构没有按地理位置来分配IP地址。现在要把已分配出的IP地址收回再重新分配是十分困难的事，因为这牵涉到很多正在工作的主机必须改变其IP地址。尽管这样，CIDR的使用已经推迟了IP地址将要耗尽的日期。
        3.使用二叉线索查找路由表
            使用CIDR后，由于要寻找最长前缀匹配，使路由表的查找过程变得更加复杂了。当路由表的项目数很大时，怎样设法减小路由表的查找时间就成为一个非常重要的问题。例如，连接路由器的线路的速率为10Gb/s，而分组的平均长度为2000bit，那么路由器就应当平均每秒钟能够处理500万个分组（常记为5Mpps）。或者说，路由器处理一个分组的平均时间只有200ns（1ns=10^-9秒）。因此，查找每一个路由所需的时间应当是非常短的。可见在路由表中必须使用很好的数据结构和使用先进的快速查找算法，这一直是人们积极研究的热门课题。
            对无分类编址的路由表的最简单的查找算法就是对所有可能的前缀进行循环查找。例如，给定一个目的地址D。对每一个可能的网络前缀长度M，路由器从D中提取前M个位成一个网络前缀，然后查找路由表中的年网络前缀。所找到的最长匹配就对应于要查找的路由。
            这种最简单的算法的明显缺点就是查找的次数太多。最坏的情况是路由表中没有这个路由。在这种情况下，算法仍要进行32次（具有32位的网络前缀是一个特定主机路由）。就是要找到一个传统的B类地址（即/16），也要查找16次。对于经常使用的默认路由，这种算法都要经历31次的不必要的查找。
            为了进行更加有效的查找，通常是把无分类编址的路由表存放在一种层次的数据结构中，然后自上而下地按层次进行查找。这里最常用的就是二叉线索（binary trie），它是一种特殊结构的树。IP地址中从左到右的比特值决定了从根节点逐层向下层延伸的路径，而二叉线索中的各个路径就代表路由表中存放的各个地址。
            一个例子来说明二叉线索的结构。5个IP地址。为了简化二叉线索的结构，可以先找出对用于每一个IP地址的唯一前缀（unique prefix）。所谓唯一前缀就是在表中所有的IP地址中，该前缀是唯一的。这样就可以用这些唯一前缀来构造二叉线索。在进行查找时，只要能够和唯一前缀相匹配就行了。
                5个前缀构成的二叉线索：
                32位的IP地址                        |唯一前缀
                01000110 00000000 00000000 00000000|0100
                01010110 00000000 00000000 00000000|0101
                01100001 00000000 00000000 00000000|011
                10110000 00000010 00000000 00000000|10110
                10111011 00001010 00000000 00000000|10111
            从二叉线索的根节点自顶向下的深度最多有32层，每一层对应于IP地址中的一位。一个IP地址存入二叉线索的规则很简单。先检查IP地址左边的第一位，如为0，则第一层的结点就在根节点的左下方；如为1，则在右下方。然后再检查地址的第二位，构造出第二层的节点。以此类推，直到唯一前缀的最后一位。由于唯一前缀一般都小于32位，因此用唯一前缀构造的二叉线索的深度往往不到32层。图中较粗的折线就是前缀0101在这个二叉线索中的路径。二叉线索中的小圆圈是中间节点，而在路径终点的小方框是叶节点（也叫做外部结点）。每个叶节点代表一个唯一前缀。节点之前的连线旁边的数字表示这条边在唯一前缀中对应的比特是0或1。
            假定有一个IP地址是10011011 01111010 00000000 00000000，需要查找该地址是否在此二叉线索中。我们从最左边查起。很容易发现，查到第三个字符（即前缀10后面的0）时，在二叉线索中就找不到匹配的，说明这个地址不在这个二叉线索中。
            以上只是给出了二叉线索这种数据结构的用法，而并没有说明“与唯一前缀匹配”和“与网络前缀匹配”的关系。显然，要将二叉线索用于路由表中，还必须使二叉线索中的每一个叶节点包含所对应的网络前缀的子网掩码。当搜索到一个叶节点时，就必须将寻找匹配的目的地址和该叶节点的子网掩码进行逐位“与”运算，看结果是否与对应的网络前缀相匹配。若匹配，就按下一跳的接口转发该分组。否则，就丢弃该分组。
            总之，二叉线索只是提供了一种可以快速在路由表中找到匹配的叶节点的机制。但这是否和网络前缀匹配，还要和子网掩码进行一次逻辑与的运算。
            为了提高二叉线索的查找速度，广泛使用了各种压缩技术。例如，在图中的最后两个地址，其最前面的4位都是1011.因此，只要一个地址的前4位是1011，就可以跳过前面4位（即压缩了4个层次）而直接从第5位开始比较。这样就可以减少查找的时间。当然，制作经过压缩的二叉线索需要更多的计算，但由于每一次查找路由表时都可以提高查找速度，因此这样做还是值得的。
4.4网际控制报文协议ICMP
    为了更有效地转发IP数据报和提高交付成功的机会，在网际层使用了网际控制报文协议ICMP（Internet Control Message Protocol）。ICMP允许主机或路由器报告差错情况和提供有关异常情况的报告。ICMP是因特网的标准协议。但ICMP不是高层协议，而是IP层的协议。ICMP报文作为IP层数据报的数据，加上数据报的首部，组成IP数据报发送出去。ICMP报文格式：
        位                  0       8         16          31
        前4个字节是统一的格式|类型    |代码      |检验和      |
                           |（这4个字节取决于ICMP报文的类型）|
                           |ICMP的数据部分（长度取决于类型） |
                                   |ICMP报文|
                                       ↓
                              |首部|数据部分 |
                           ←------IP数据报----→
    4.4.1ICMP报文的种类
        ICMP报文的种类有两种，即ICMP差错报告报文和ICMP询问报文。
        ICMP报文的前4个字节是统一的格式，共有三个字段：即类型、代码和校验和。接着的4个字节内容与ICMP的类型有关。最后是数据字段，其长度取决于ICMP的类型。
            几种常用的ICMP报文类型：
            |ICMP报文种类|类型的值|ICMP报文的类型              |
            -------------------------------------------------
            |           |3       |终点不可达                  |
            |           |4       |源点抑制（Source quench）   |
            |差错报告报文|11      |时间超过                    |
            |           |12      |参数问题                    |
            |           |5       |改变路由（Redirect）        |
            --------------------------------------------------
            |询问报文   |8或0     |回送（Echo）请求或回答       |
            |          |13或14   |时间戳（Timestamp）请求或回答|
        现在已不再使用ICMP报文有“信息请求与回答报文”、“地址掩码请求与回答报文”和“路由器请求与通告报文”，这些报文就没有出现在表中。
        ICMP报文的代码字段是为了进一步区分某种类型中的几种不同的情况。检验和字段用来检验整个ICMP报文。我们应当还记得，IP数据报首部的检验和并不检验IP数据报的内容，因此不能保证经过传输的ICMP报文不产生差错。
        ICMP差错报告报文共有五种，即：
            1）终点不可达   当路由器或主机不能交付数据报时就向源点发送终点不可达报文。
            2）源点抑制    当路由器或主机由于拥塞而丢弃数据报时，就向源点发送源点抑制报文，使源点知道应当把数据报的发送速率放慢。
            3）时间超过    当路由器收到生存时间为零的数据报时，除丢弃该数据报外，还要向源点发送时间超过报文。当终点在预先规定的时间内不能收到一个数据报的全部数据报片时，就把已收到的数据报片都丢弃，并向远点发送时间超过报文。
            4）参数问题    当路由器或目的主机收到的数据报的首部中有的字段的值不正确时，就丢弃该数据报，并向源点发送参数问题报文。
            5）改变路由（重定向）   路由器把改变路由报文发送给主机，让主机知道下次应将数据报发送给另外的路由器（可通过更好的路由）。
              下面对改变路由报文进行简短的解释。我们知道，在因特网的主机中也要有一个路由表。当主机要发送数据报时，首先是查找主机自己的路由表，看应当从哪一个接口把数据报发送出去。在因特网中主机的数量远大于路由器的数量，出于效率的考虑，这些主机不喝连接在网络上的路由器定期交换路由信息。在主机刚开始工作时，一般都在路由表中设置一个默认路由器的IP地址。不管数据报要发送到那个目的地址，都一律先将数据报传送给网络上的这个默认路由器，而这个默认路由器知道到每一个目的网络的最佳路由（通过和其他路由器交换路由信息）。如果默认路由器发现主机发往某个目的地址的数据报的最佳路由不应当经过默认路由器而是应当经过网络上的另一个路由器R时，就改变路由报文把这情况告诉主机。于是，该主机就在其路由表中增加一个项目：到某某目的地址应经过路由器R（而不是默认路由器）。
        所有的ICMP差错报告报文中的数据字段都具有同样的格式。把收到的需要进行差错报告的IP数据报的首部和数据字段的前8个字节提取出来，作为ICMP报文的数据字段。再加上相应的ICMP差错报告报文的前8个字节，就构成了ICMP差错报告报文。提取收到的数据报的数据字段的前8个字节是为了得到运输层的端口号（对于TCP和UDP）以及运输层报文的发送序号（对于TCP）。这些信息对源点通知高层协议是有用的（端口的作用将在下一章的5.1.3节中介绍）。整个ICMP报文作为IP数据报的数据字段发送给源点。
            下面是不应发送ICMP差错报告报文的几种情况：
            ·对ICMP差错报告报文不再发送ICMP差错报告报文。
            ·对第一个分片的数据报片的所有后续数据报片都不发送ICMP差错报告报文。
            ·对具有多播地址的数据报都不发送ICMP差错报告报文。
            ·对具有特殊地址（如127.0.0.0或0.0.0.0）的数据报不发送ICMP差错报告报文。
            常用的ICMP询问报文有两种，即：
            1）回送请求和回答   ICMP回送请求报文是由主机或路由器向一个特定的目的主机发出的询问。收到此报文的主机必须给源主机或路由器发送ICMP回送回答报文。这种询问报文用来测试目的站是否可达以及了解其有关状态。
            2）时间戳请求和回答    ICMP时间戳请求报文是请某个主机或路由器回答当前的日期和时间。在ICMP时间戳回答报文中有一个32位的字段，其中写入的整数代表从1900奶奶1月1日起到当前时刻一共有多少秒。时间戳请求与回答可用来进行时钟同步和测量时间。
    4.4.2ICMP的应用举例
        ICMP的一个重要应用就是分组网间探测PING（Packet InterNet Groper），用来测试两个主机之间的连通性。PING使用了ICMP会送请求与回送回答报文。PING是应用层直接使用网络层ICMP的一个例子。他没有通过运输层的TCP或UDP。
        windows操作系统的用户可在接入因特网后转入MS DOS（点击“开始”，点击“运行”，再键入“cmd”）。看见屏幕上的提示符后，就键入“ping hostname”（这里的hostname是要测试连通性的主机名或它的IP地址），按回车键后可看到结果。
        从南京的一台PC机到新浪网的邮件服务器mail。sina。com。cn的连通性的测试结果。PC机一连发出四个ICMP回送请求报文。如果邮件服务器mail.sina.com.cn正常工作而且响应这个ICMP回送请求报文（有的主机为了防止恶意攻击就不理睬外界发送过来的这种报文），那么它就发回ICMP回送回答报文。由于往返的ICMP报文上都有时间戳，因此很容易得出往返时间。最后显示出的是统计结果：发送到哪个机器（IP地址），发送的、收到的和丢失的分组数（但不给出分组丢失的原因）。往返时间的最小值、最大值和平均值。从得到的结果可以看出，第三个测试分组丢失了。
        另一个非常有用的应用是traceroute（这是UNIX操作系统中的名字），它用来跟踪一个分组从源点到终点的路径。在windows操作系统中这个命令是tracert。下面简单介绍这个程序的工作原理。
        Traceroute从源主机向目的主机发送一连串的IP数据报，数据报中封装的是无法交付的UDP用户数据报。第一个数据报P1的生存时间TTL设置为1.当P1到达路径上的第一个路由器R1时，路由器R1先收下它，接着把TTL的值减1.由于TTL等于零了，R1就把P1丢弃了，并向源主机发送一个ICMP时间超过差错报告报文。
        源主机接着发送第二个数据报P2，并把TTL设置为2。P2先到达路由器R1，R1收下后把TTL减1再转发给路由器R2。R2收到P2时TTL为1，但减1后TTL变为零了。R2就丢弃P2，并向源主机发送一个ICMP时间超过差错报告报文。这样一直继续下去。当最后一个数据报刚刚到达目的主机时，数据报的TTL是1.主机不转发数据报，也不把TTL值减1.但因IP数据报中封装的是无法交付的运输层的UDP用户数据报，因此目的主机要向源主机发送ICMP终点不可达差错报告报文。
        这样，源主机达到了自己的目的，因为这些路由器和最后目的主机发来的ICMP报文正好给出了源主机想知道的路由信息----到达目的主机所经过的路由器的IP地址，以及到达其中的每一个路由器的往返时间。南京的一个PC机向新浪网的邮件服务器mail.sina.com.cn发出的tracert命令后所获得的结果。每一行有三个时间出现，是因为对应于每一个TTL值，源主机要发送三次同样的IP数据报。
            我们还应注意到，从原则上讲，IP数据报经过的路由器越多，所花费的时间也会越多。但，有时正好相反。这是因为因特网的拥塞程度随时都在变化，也很难预料到。因此，完全有这样的可能：经过更多的路由器反而花费更少的时间。
4.5因特网的路由选择协议
    本节将讨论几种常用的路由选择协议，也就是要讨论路由表中的路由是怎样得出的。
    4.5.1有关路由选择的几个基本概念
        1.理想的路由算法
        路由选择协议的核心就是路由算法，即需要何种算法来获得路由表中各项目。一个理想的路由算法应具有如下的一些特点：
            1）算法必须是正确的和完整的。这里，“正确”的含义是：沿着各路由表所指引的路由，分组一定能够最终到达目的网络和目的主机。
            2）算法在计算上应简单。路由选择的计算不应使网络通信量增加太多的额外开销。
            3）算法应能适应通信量和网络拓扑的变化。这就是说，要有自适应性。当网络中的通信量发生变化时，算法能自适应地改变路由以均衡各链路的负载。当某个或某些结点、链路发生故障不能工作，或者修理好了再投入运行时，算法也能及时地改变路由。有时称这种自适应性为“稳健性”（robustness）。
            4）算法应具有稳定性。在网络通信量和网络拓扑相对稳定的情况下，路由算法应收敛于一个可以接受的解，而不应使得出的路由不停地变化。
            5）算法应是公平的。路由选择算法应对所有用户（除对少数优先级高的用户）都是平等的。例如，若仅仅使某一对用户的端到端时延为最小，但却不考虑其他的广大用户，这就明显地不符合公平性的要求。
            6）算法应是最佳的。路由选择算法应当能够找出最好的路由，使得分组平均时延最小而网络的吞吐量最大。虽然我们希望得到“最佳”的算法，但这并不总是最重要的。对于某些网络，网络的可靠性有时要比最小的分组平均时延或最大吞吐量更加重要。因此，所谓“最佳”只能是相对于某一种特定要求下得出的较为合理的选择而已。
            一个实际的路由选择算法，应尽可能接近于理想的算法。在不同的应用条件下，对以上提出的六个方面也可由不同的侧重。
            应当指出，路由选择是个非常复杂的问题，因为它是网络中的所有结点共同协调工作的结果。其次，路由选择的环境往往是不断变化的，而这种变化有时无法事先知道，例如，网络中出了某些故障。此外，当网络发生拥塞时，就特别需要有能缓解这种拥塞的路由选择策略，但恰好在这种条件下，很难从网络中的各结点获得所需的路由选择信息。
        倘若从路由算法能否随网络的通信量或拓扑自适应地进行调整变化来划分，则只有两大类，即静态路由选择策略与动态路由选择策略。静态路由选择也叫做非自适应路由选择，其特点是简单和开销较小，但不能及时适应网络状态的变化。对于很简单的小网络，完全可以采用静态路由选择，用人工配置每一条路由。动态路由选择也叫做自适应路由选择，其特点是能较好地适应网络状态的变化，但实现起来较为复杂，开销也比较大。因此，动态路由选择适用于较复杂的大网络。
        2.分层次的路由选择协议
        因特网采用的路由选择协议主要是自适应的（即动态的）、分布式路由选择协议。由于以下两个原因，因特网采用分层次的路由选择协议：
            1）因特网的规模非常大，现在就已经有几百万个路由器互连在一起。如果让所有的路由器知道所有的网络应该怎样到达，则这种路由表将非常大，处理起来也太花时间。而所有这些路由器之间交换路由信息所需的带宽就会使因特网的通信链路饱和。
            2）许多单位不愿意外界了解自己单位网络的布局细节和本部门所采用的路由选择协议（这属于本部门内部的事情），但同时还希望连接到因特网上。
        为此，因特网将整个互联网划分为许多较小的自制系统（autonomous system），一般都记为AS。
        RFC4271对自制系统AS有下面这样的描述：
            自制系统AS的经典定义是在单一技术管理下的一组路由器，而这些路由器使用一种AS内部的路由选择协议和共同的度量以确定分组在该AS内的路由，同时还使用一种AS之间的路由选择协议用以确定分组在AS之间的路由。自从有了这个经典定义后，使用多种内部路由选择协议和多种度量的AS也是常用的。因此，现在对自制系统AS的定义是调下面的事实：尽管一个AS使用了多种内部路由选择协议和度量，但重要的是一个AS对其他AS表现出的是一个单一的和一致的路由选择。
        在目前的因特网中，一个大的ISP就是一个自制系统。这样，因特网就把路由选择协议划分为两大类，即：
            1）内部网关协议IGP（Interior Gateway Protocol）    即在一个自治系统内部使用的路由选择协议，而这与在互联网中的其他自治系统选用什么路由器
