第6章   应用层

在前五章我们已经详细地讨论了计算机网络提供通信服务的过程。但是我们还没有讨论这些通信服务是如何提供给应用进程来使用过的。本章就是讨论各种应用进程通过什么样的应用层协议来使用网络所提供的这些通信服务。
这里需要再强调一下，每个应用层协议都是为了解决某一类应用问题，而应用问题的解决又往往是通过位于不同主机中的多个应用进程之间的通信和协同工作来完成的。应用层的具体内容就是规定应用进程在通信时所遵循的协议。
应用层的许多协议都是基于客户服务器方式。即使是对等通信方式，实质上也是一种特殊的客户服务器方式。这里再明确一下，客户（client）和服务器（Server）都是指通信中所设计的两个应用进程。客户服务器方式所描述的是进程之间服务和被服务的关系。这里最主要的特征就是：客户是服务请求方，服务器是服务提供方。
下面先讨论许多应用协议都要使用的域名系统。在介绍了文件传送协议和远程登录协议后，就重点介绍万维网的工作原理及其主要协议。由于万维网的出现使因特网得到了飞速的发展，因此万维网在本章中占有最大的篇幅，也本章的重点。接着讨论用户最常用的因特网电子邮件，最后，介绍有关网络管理方面的问题以及有关网络编程的概念。对应用层更深入的学习可参阅【come04】【come06】【tane03】及有关标准。

6.1域名系统DNS
    6.1.1域名系统概述
    域名系统DNS（Domain Name System）是因特网使用的命名系统，用来把便于人们使用的机器名字转换为IP地址。域名系统其实就是名字系统。为什么不叫“名字”而叫“域名”呢？这是因为在这种因特网的命名系统中使用了许多的“域”（domain），因此就出现了“域名”这个名词。“名字系统”没有说清用在什么地方，而“域名系统”就很明确地指明这种系统是用在因特网中。在下一节我们就会讲到，在域名结构中会出现很重要的“点(.)”。
    许多应用层软件经常直接使用域名系统DNS，但计算机的用户只是简介而不是直接使用域名系统。
    用户与因特网上某个主机通信时，显然不愿意使用很难记忆的长达32位二进制主机地址。即使是点分十进制IP地址也并不太容易记忆。相反，大家愿意使用比较容易记忆的主机名字。早在ARPANET时代，整个网络只有数百台计算机，那时适用一个叫做hosts的文件，列出所有主机名字和相应的IP地址。只要用户输入一个主机名字，计算机就可很快地把这个主机名字转换成机器能够识别的二进制IP地址。
    为什么机器在处理IP数据报时要使用IP地址而不使用域名呢？这是因为IP地址的长度是固定的32位（如果是IPv6地址，那就是128位，也是定长的），而域名的长度并不是固定的，机器处理起来比较困难。
    从理论上讲，整个因特网可以只使用一个域名服务器，使它装入因特网上所有主机名，并回答所有对IP地址的查询。然而这种做法并不可取。因为因特网规模很大，这样的域名服务器肯定会因过负荷而无法正常工作，而且一旦域名服务器出现故障，整个因特网就会瘫痪。因此，早在1983年因特网就开始采用层次树状结构的命名方法，并使用分布式的域名系统DNS。DNS的因特网标准是RFC 1034，1035。
    因特网的域名系统DNS被设计成为一个联机分布式数据库系统，并采用客户服务器方式。DNS使大多数名字都在本地进行解析（resolve），仅少量解析需要在因特网上通信，因此DNS系统的效率的效率很高。由于DNS是分布式系统，即使单个计算机出了故障，也不会妨碍整个DNS系统的正常运行。
    域名到IP地址的解析是由分布在因特网上的许多域名服务器程序（可简称为域名服务器）共同完成的。域名服务器程序在专设的结点上运行，而人们也常把运行域名服务器程序的机器称为域名服务器。
    域名到IP地址的解析过程的要点如下：当某一个应用进程需要把主机名解析为IP地址时，该应用进程就调用解析程序（resolver），并成为DNS的一个客户，把待解析的域名放在DNS请求报文中，以UDP用户数据报方式发给本地域名服务器（使用UDP是为了减少开销）。本地域名服务器在查找域名后，把对应的IP地址放在回答报文中返回。应用进程获得目的主机的IP地址后即可进行通信。
    若本地域名服务器不能回答该请求，则此域名服务器就暂时称为DNS中的另一个客户，并向其他域名服务器发出查询请求。这种过程直至找到能够回答该请求的域名服务器为止。上述的这种查找过程，后面还要进一步讨论。
    6.1.2因特网的域名结构
    早期的因特网使用了非等级的名字空间，其优点是名字简短。但当因特网上的用户数急剧增加时，用非等级的名字空间来管理一个很大的而且是经常变换的名字集合是非常困难的。因此，因特网后来就采用了层次树状结构的命名方法，就像全球邮政系统和电话系统那样。采用这种命名方法，任何一个连续在因特网上的注意或路由器，都以一个唯一的层次结构的名字，即域名（domain name）。这里，“域”（domain）是名字空间中一个可被管理的划分。域还可以划分为子域，而子域还可继续划分为子域的子域，这样就形成了顶级域、二级域、三级域，等等。
    从语法上讲，每一个域名都是由标号（label）序列组成，而各标号之间用点隔开（请注意，是小数点“.”，不是中文的句号“。”）。例如下面的域名:mail.cctv.com(三级域名.二级域名.顶级域名)
    就是中央电视台用于收到电子邮件的计算机（即邮件服务器）的域名，它由三个标号组成，其中标号com是顶级域名，标号cctv是二级域名，标号mail是三级域名。
    DNS规定，域名中的标号都由英文字母或数字组成，每一个标号不超过63个字符（但为了记忆方便，最好不要超过12个字符），而不区分大小写字母（例如，CCYV或cctv在域名中是等效的）。标号中除连字符（-）外不能使用其他标点符号。级别最低的域名写在最左边，而级别最高的顶级域名则写在最右边。由多个标号组成的完整域名总共不超过255个字符。DNS既不规定一个域名需要包含多少个下级域名，也不规定每一级的域名代表什么意思。各级域名由其上一级的域名管理机构管理，而最高的顶级域名则由ICANN进行管理。用这种方法可使每一个域名在整个因特网范围内是唯一的，并且也容易设计出一种查找域名的机制。
    需要注意的是，域名只是个逻辑概念，并不代表计算机所在的物理地点。变成的域名和使用有助记忆的字符串，是为了便于人来使用。而IP地址是定长的32位二进制数字则非常便于机器进行处理。这里需要注意，域名中的“点”和点分十进制中的“点”并无一一对应的关系。点分十进制IP地址中一定是包含三个“点”，但每一个域名中“点”的数目则不一定正好是三个。
    据2006年12月的统计，现在顶级域名TLD（Top Level Domain）已有265个【W-TLD】，分为三大类：
    （1）国家顶级域名nTLD：采用ISO 3166的规定。如：cn表示中国，us表示美国，uk表示英国，等等。国家顶级域名又常记为ccTLD（cc表示国家代码country-code）。到2006年12月为止，国家顶级域名总共有247个。
    （2）通用顶级域名gTLD：到2006年12月为止，通用顶级域名的总数已经达到18个【W-gTLD】。最常见的通用顶级域名有7个，即：
        com（公司企业），net（网络服务机构），org（非营利性的组织），int（国际组织），edu（美国专用的教育机构），gov（美国的政府部门），mil表示（美国的军事部门）。
        其余11个通用顶级域名是：
        aero（航空运输企业），biz（公司和企业），cat（加泰隆人的语言和文化团体），coop（合作团体），info（各种情况），jobs（人力资源管理者），mobi（移动产品与服务的用户和提供者），museum（博物馆），name（个人），pro（有证书的专业人员），travel（旅游业）。
    （3）基础结构域名（infrastructure domain）：这种顶级域名只有一个，即arpa，用于反向域名解析，因此又称为反向域名。
        在国家顶级域名下注册的二级域名均由该国家自行确定。例如，顶级域名为jp的日本，将其教育和企业机构的二级域名定为ac和co，而不用edu和com。
        我国把二级域名划分为“类别域名”和“行政区域名”两大类。
        “类别域名”共7个，分别为ac（科研机构）；com（工、商、金融等企业）；edu（中国的教育机构）；gov（中国的政府机构）；mil（中国的国防机构）；net（提供互联网络服务的机构）；org（非营利性的组织）。
        “行政区域名”共34个，适用于我国的各省、自治区、直辖市。例如：bj（北京市），js（江苏省），等等。
    值得注意的是，我国修订的域名体系允许直接在cn的顶级域名下注册二级域名。这显然给我国的因特网用户提供了很大的方便。例如某公司abc以前要注册为abc.com.cn，是个三级域名。但现在可以注册为abc.cn，变成了二级域名。据统计，到2006年6月底为止，直接在cn的顶级域名下注册二级域名已经超过66万个。
    关于我国的互联网发展现状以及各种规定（如申请域名的手续），均可在中国互联网网络信息中心CNNIC的网址上找到【W-CNNIC】。
    用域名树来表示因特网的域名系统是最清楚的。图是因特网域名空间的结构，它实际上是一个倒过来的树，在最上面的是根，但没有对应的名字。根下面一级的节点就是最高一级的顶级域名（由于跟没有名字，所以在跟下面一级的域名就叫做顶级域名）。顶级域名可往下划分子域名，即二级域名。在往下划分就是三级域名四级域名，等等。图列举了一些域名作为自己。凡是在顶级域名com下注册的单位都获得了一个二级域名。图中给出的例子有：中央电视台cctv，以及IBM、惠普（HP）等公司。在顶级域名cn（中国）下面举出了几个二级域名，如bj，edu以及com。在某个二级域名下注册的单位就可以获得一个三级域名。图中给出的在edu下面额三级域名有：tsinghua（清华大学）和pku（北京大学）。一旦某个单位拥有了一个域名，它就可以自己决定是否要进一步划分其下属的子域名，并且不必由其上级机构批准。图中画出了cctv（中央电视台）和Tsinghua（清华大学）都分别划分了自己的下一级的域名mail和www（分别是三级域名和四级域名）。域名树的树叶就是单台计算机的名字，它不能在继续往下划分子域了。
    应当注意，虽然中央电视台和清华大学都各有一台计算机取名为mail，但它们的域名并不一样，因为前者是mail.cctv.com，而后者是mail.tsinghua.edu.cn。因此，即使在世界上还有很多单位的计算机取名为mail，但是它们在因特网中的域名却都必须是唯一的。
    这里还要强调指出，因特网的名字空间是按照机构的组织来划分的，与物理的网络无关，与IP地址中的“子网”也没有关系。
    6.1.3域名服务器
    上面讲述的域名体系是抽象的。但具体实现域名系统则是使用分布在各地的域名服务器。从理论上讲，可以让每一级的域名都有一个相对应的域名服务器，使所有的域名服务器构成和图相对应的“域名服务器树”的结构。但这样做会使域名服务器的数量太多，是域名系统的运行效率降低。因此DNS就采用划分区的办法来解决这个问题。
    一个服务器所负责管辖的（或有权限的）范围叫作区（zone）。各单位根据具体情况来划分自己管辖范围的区。但在一个区中的所有节点必须是能够连通的。每一个区设置相应的权限域名服务器（authoritative name Server），用来保存该区中的所有主机的域名到IP地址的映射。总之，DNS服务器的管辖范围不是以“域”为单位，而是以“区”为单位。区是DNS服务器实际管辖的范围。区可能等于或小于域，但一定不可能大于域。
    图是区的不同划分方法的举例。假定abc公司有下属部门x和y，部门x下面又分三个分部门u，v和w，而y下面还有其下属部门t、图表示abc公司只设一个区abc.com。这是，区abc.com和域abc.com指的是同一件事。但图表示abc公司划分了两个区（大的公司可能要划分多个区）：abc.com和y.abc.com。这两个区都隶属于域abc.com，都各设置了相应的权限域名服务器。不难看出，区是“域”的子集。
    图中公司abc划分的两个区为例，给出了DNS域名服务器树状结构图。这种DNS域名服务器树状结构图可以更准确地反映出DNS的分布式结构。在图中的每一个域名服务器都能够进行部分域名到IP地址的解析。当某个DNS服务器不能进行域名到IP地址的转换时，它就设法找因特网上别的域名服务器进行解析。
    从图可看出，因特网上的DNS域名服务器也是按照层次安排的。每一个域名服务器都只对域名体系中的一部分进行管辖。根据域名服务器所起的作用，可以把域名服务器划分为以下四种不同的类型：
    （1）根域名服务器（root name server）：根域名服务器是最高层次的域名服务器，也是最重要的域名服务器。所有的根域名服务器都知道所有的顶级域名服务器的域名和IP地址。根域名服务器是最重要的域名服务器，因为不管是哪一个本地域名服务器，若要对因特网上任何一个域名进行解析（即转换为IP地址），只要自己无法解析，就首先要求助于根域名服务器。假定所有的根域名服务器都瘫痪了，那么整个的DNS系统就无法工作。在因特网上共有13个不同的IP地址的根域名服务器，他们的名字是用一个英文字母命名，从a一直到m（前12个字母）。这些根域名服务器响应的域名分别是a.rootservers.net，...，m.rootservers.net。但请注意，根域名服务器的数目并不是13个机器，而是13套装置（13 installations）【W-ROOT】。实际上，到2006年底全世界已经安装了123个根域名服务器机器，分布在世界各地（虽然负责运营根域名服务器的组织大多在美国，但这些根域名服务器大部分并不在美国）。这样做的目的是为了方便用户，使世界上大部分DNS域名服务器都能就近找到一个根域名服务器。例如，根域名服务器f现在就有40个地点安装有机器，图是这40个地点的分布情况（中国有三个，位置是背景、香港和台北）。由于根域名服务器采用了任播（anycast）技术，因此当DNS客户向某个根域名服务器进行查询时（用这个根域名服务器的IP地址），因特网上的路由器就能找到里这个DNS客户最近的一个根域名服务器。这样做不仅加快了DNS的查询过程，也更加合理地利用了因特网的资源。
    需要注意的是，在许多情况下，根域名服务器并不直接把待查询的域名直接转换成IP地址（根域名服务器也没有存放这种信息），而是告诉本地域名服务器下一步应当找哪一个顶级域名服务器进行查询。
    由于根域名服务器在DNS中的地位特殊，因此对根域名服务器有许多具体的需求，可参阅 RFC 2870。
    （2）顶级域名服务器（即TLD服务器）：这些域名服务器负责管理在该顶级域名服务器注册的所有二级域名。当收到DNS查询请求时，就给出相应的回答（可能是最后的结果，也可能是下一步应当找的域名服务器的IP地址）。
    （3）权限域名服务器：这就是前面已经讲过的负责一个区的域名服务器。当一个权限域名服务器还不能给出最后的查询回答时，就会告诉发出查询请求的DNS客户，下一步应当找哪一个权限域名服务器。例如在图中，区abc.com和区y.abc.com各设有一个权限域名服务区。
    （4）本地域名服务器（local name server）：本地域名服务器并不属于图所示的域名服务器层次结构，但它对域名系统非常重要。当一个主机发出DNS查询请求时，这个查询请求报文就发送给本地域名服务器。由此可看出本地域名服务器的重要性。每一个因特网服务提供者ISP，或一个大学，甚至一个大学里的系，都可以拥有一个本地域名服务器，这种域名服务器有时也称为默认域名服务器。当PC机使用WindowsXP操作系统时，打开“控制面板”，选择“网络连接”，再用鼠标右键点击任何一种网络连接，选择“属性”、“网络”，然后选择“Internet协议（TCP/IP）”，再选择“属性”，就可看见有关DNS地址的选项（自动获取或指定地址）。这里的DNS服务器指的就是本地域名服务器。本地域名服务器离用户较近，一般不超过几个路由器的距离。当所要查询的主机也属于同一个本地ISP时，该本地域名服务器立即就能将所查询的主机名转换为它的IP地址，而不需要再去询问其他的域名服务器。
    为了提高域名服务器的可靠性，DNS域名服务器都把数据复制到几个域名服务器来保存，其中的一个是主域名服务器（master name server），其他的是辅助域名服务器（secondary name server）。当主域名服务器出故障时，辅助域名服务器可以保证DNS的查询工作不会中断。主域名服务器定期把数据复制到辅助域名服务器中，而更改数据只能在主域名服务器中进行。这样就保证了数据的一致性。
    下面简单讨论一下域名的解析过程。这里要注意两点。
    第一，主机向本地域名服务器查询一般都是采用递归查询（recursive query）。所谓递归查询就是：如果主机所询问的本地域名服务器不知道被查询域名的IP地址，那么本地域名服务器就以DNS客户的身份，向其他根域名服务器发出查询请求报文（即替该主机继续查询），而不是让该主机自己进行下一步的查询。因此，递归查询返回的查询结果或者是所要查询的IP地址，或者是报错，表示无法查询到所需的IP地址。
    第二，本地域名服务器向根域名服务器的查询通常是采用迭代查询（iterative query）。迭代查询的特点是这样的：当根域名服务器收到本地域名服务发出的迭代查询请求报文时，要么给出所要查询的IP地址，要么告诉本地域名服务器：“你下一步应当向哪一个域名服务器进行查询”。然后让本地域名服务器进行后续的查询（而不是替本地域名服务器进行后续的查询）。根域名服务器通常是把自己知道的顶级域名服务器的IP地址告诉本地域名服务器，让本地域名服务器再向顶级域名服务器查询。顶级域名服务器在收到本都域名服务器的查询请求后，要么给出所要查询的IP地址，要么告诉本地域名服务器下一步应当向哪一个权限域名服务器进行查询。本地域名服务器就这样进行迭代查询。最后，知道了所要解析的域名的IP地址，然后把这个结果返回给发起查询的主机。当然，本地域名服务器也可以采用递归查询。这取决于最初的查询请求报文的设置是要求使用哪一种查询方式。
    图用例子说明了这两种查询的区别。
    假定域名m.xyz.com的主机想知道另一个主机（域名为y.abc.com）的IP地址。例如，主机m.xyz.com打算发送邮件给主机y.abc.com。这是就必须知道主机y.abc.com的IP地址。下面是图的几个查询步骤：
    1.主机m.xyz.com先向其本地域名服务器dns.xyz.com进行递归查询。
    2.本地域名服务器采用迭代查询。它先向一个根域名服务器查询。
    3.根域名服务器告诉本地域名服务器，下一次应查询的顶级域名服务器dns.com的IP地址。
    4.本地域名服务器向顶级域名服务器dns.com进行查询。
    5.顶级域名服务器dns.com告诉本地域名服务器，下一次应查询的权限域名服务器dns.abc.com的IP地址。
    6.本地域名服务器向权限域名服务器dns.abc.com进行查询。
    7.权限域名服务器dns.abc.com告诉本地域名服务器，所查询的主机的IP地址。
    8.本地域名服务器最后把查询结果告诉m.xyz.com。
    我们注意到，这8个步骤总共要使用8个UDP用户数据报的报文。本地域名服务器经过三次迭代查询后，从权限域名服务器dns.abc.com得到了主机y.abc.com的IP地址，最后把结果返回给发起查询的主机m.xyz.com。
    图是本地域名服务器采用递归查询的情况。在这种情况下，本地域名服务器只需向根域名服务器查询一次，后面的几次查询都是在其他几个域名服务器之间进行的（步骤3至6）。只是在步骤7，本地域名服务器从根域名服务器得到了所需的IP地址。最后在步骤8，本地域名服务器把查询结果告诉主机m.xyz.com。整个的查询也是使用8个UDP报文。
    为了提高DNS查询效率，并减轻根域名服务器的负荷和减少因特网上的DNS查询报文数量，在域名服务器中广泛地使用了高速缓存（有时也称为高速缓存域名服务器）。高速缓存用来存放最近查询过的域名以及从何处获得域名映射信息的记录。
    例如，在图的查询过程中，如果在不久前已经有用户查询过域名y.abc.com的IP地址，那么本地域名服务器就不必向根域名服务器重新查询y.abc.com的IP地址，而是直接把高速缓存中存放的上次查询结果（即y.abc.com的IP地址）告诉用户。
    假定本地域名服务器的缓存中并没有y.abc.com的IP地址，而是存放着顶级域名服务器dns.com的IP地址，那么本地域名服务器也可以不向根域名服务器进行查询，而是直接向com顶级域名服务器发送请求报文。这样不仅可以大大减轻根域名服务器的负荷，而且也能够使因特网上的DNS查询请求和回答报文的数量大为减少。
    由于名字到地址的绑定并不经常改变，为了保持高速缓存中的内容正确，域名服务器应为每项内容设置计时器并处理超过合理时间的项（例如，每个项目只存放两天）。当域名服务器已从缓存中删去某项信息后又被请求查询该项信息，就必须重新到授权管理该项的域名服务器获取绑定信息。当权限域名服务器回答一个查询请求时，在响应中都指明绑定有效存在的时间值。增加此时间值可减少网络开销，而减少此时间值可提高域名转换的准确性。
    不但在本地域名服务器中需要高速缓存，在主机中也很需要。许多主机在启动时从本地域名服务器下载名字和地址的全部数据库，维护存放自己最近使用的域名的高速缓存，并且只在从缓存中找不到名字时才使用域名服务器。维护本地域名服务器数据库的主机自然应该定期地检查域名服务器以获得新的映射信息，而且主机必须从缓存中删掉无效的项。由于域名改动并不频繁，大多数网点不需花太多精力就能维护数据库的一致性。
6.2文件传送协议
    6.2.1FTP概述
    文件传送协议FTP（File Transfer Protocol）是因特网上使用得最广泛的文件传送协议。FTP提供交互式的访问，允许客户指明文件的类型与格式（如指明是否使用ASCII码），并允许文件具有存取权限（如访问文件的用户必须经过授权，并输入有效的口令）。FTP屏蔽了各计算机系统的细节，因而适合于在异构网络中任意计算机之间传送文件。RFC 959很早就成为了因特网的正式标准。
    在因特网发展的早期阶段，用FTP传送文件约占整个因特网的通信量的三分之一，而由电子邮件和域名系统所产生的通信量还小于FTP所产生的通信量。只是到了1995年，WWW的通信量才首次超过了FTP。
    在下面6.2.2和6.2.3节分别介绍基于TCP的FTP和基于UDP的TFTP，它们都是文件共享协议中的一大类，即复制整个文件，其特点是：若要存取一个文件，就必须先获得一个本地的文件副本。如果要修改文件，只能对文件副本进行修改，然后再将修改后的文件副本传回原节点。
    文件共享协议中的另一大类是联机访问（on-line access）。联机访问意味着允许多个程序同时对一个文件进行存取。和数据库系统不同之处是用户不需要调用一个特殊的客户进程，而是由操作系统提供对远地共享文件进行访问的服务，就如同对本地文件的访问一样。。这就使用户可以用远地文件作为输入和输出来运行任何应用程序，而操作系统中的文件系统则提供对共享文件的透明存取。透明存取的优点是：将原来用于处理本地文件的应用程序用来处理远地文件时，不需要对该应用程序作明显的改动。属于稳健共享协议的有网络文件系统NFS（Network File System）。网络文件系统NFS最初是在UNIX操作系统环境下实现稳健和目录的共享。NFS可使本地计算机共享远地的资源，就像这些资源在本地一样。由于NFS原先是SUN公司在TCP/IP网络上创建的，因此目前NFS主要应用在TCP/IP网络上。然而现在NFS也可在OS/2，MS-Windows，NetWare等操作系统上运行。NFS还没有成为因特网的正式标准，现在的版本4（NFSv4）是2000年底发表的【RFC 3010】，目前还只是建议标准。限于篇幅，本书不讨论NFS的详细工作过程。
    6.2.2FTP的基本工作原理
    网络环境中的一项基本应用就是将文件从一台计算机中复制到另一台可能相距很远的计算机中。初看起来，在两个主机之间传送文件是很简单的事情。其实这往往非常困难。原因是众多的计算机厂商研制出的文件系统多达数百种，且差别很大。经常遇到的问题是：
    （1）计算机存储数据的格式不同。
    （2）文件的目录结构和文件命名的规定不同。
    （3）对于相同的文件存取功能，操作系统使用的命令不同。
    （4）访问控制方法不同。
    文件传送协议FTP只提供文件传送的一些基本的服务，它使用TCP可靠的运输服务。FTP的主要功能是减少或消除在不同操作系统下处理文件的不兼容性。
    FTP使用客户服务器方式。一个FTP服务器进程可同时为多个客户进程提供服务。FTP的服务器进程有两大部分组成：一个主进程，负责接收新的请求；另外有若干个从属进程，负责处理单个请求。
    主进程的工作步骤如下：
    （1）打开熟知端口（端口号为21），是客户进程能够连接上。
    （2）等待客户进程发出连接请求。
    （3）启动从属进程来处理客户进程发来的请求。从属进程对客户进程的请求处理完毕后即终止，但从属进程在运行期间根据需要还可能创建其他一些子进程。
    （4）回到等待状态，继续接受其他客户进程发来的请求。主进程与从属进程的处理是并发地进行。
    FTP的工作情况如图所示。图中的椭圆圈表示在系统中运行的进程。图中的服务器端有两个从属进程：控制进程和数据传送进程。为简单起见，服务器端的主进程没有画上。在客户端除了控制进程和数据传送进程外，还有一个用户界面进程用来和用户接口。
    在进行文件传输时，FTP的客户和服务器之间要建立两个并行的TCP连接：“控制连接”和“数据连接”。控制链接在整个会话期间一直保持打开，FTP客户所发出的传送请求，通过控制连接发送给服务器端的控制进程，但控制链接并不用来传送文件。实际用于传输文件的是“数据连接”。服务器端的控制进程在接收到FTP客户发送来的文件传输请求后就创建“数据传送进程”和“数据连接”，用来连接客户端和服务器端的数据传送进程。数据传送进程实际完成文件的传送，在传送完毕关闭“数据传送连接”并结束运行。由于TFP使用了一个分离的控制链接，因此FTP的控制信息使带外（out of band）传送的。
    当客户进程向服务器进程发出建立连接请求时，要寻找连接服务器进程的熟知端口（21），同时还要告诉服务器进程自己的另一个端口号码，用于建立数据传送连接。接着，服务器进程用自己传送数据的熟知端口（20）与客户进程所提供的端口号码数据传送连接。由于FTP使用了两个不同的端口号，所以数据连接与控制链接不会发生混乱。
    使用两个独立的连接的主要好处是使协议更加简单和更容易实现，同时在传输文件时还可以利用控制链接（例如，客户发送请求终止传输）。
    FTP并非对所有的数据传输都是最佳的。例如，计算机A上运行的应用程序要在远地计算机B的一个很大的文件末尾添加一行信息。若使用FTP，则应先将此文件从计算机B传送到计算机A，添加上这一行信息后，再用FTP将此文件传送到计算机B，来回传送这样打的文件很花时间。实际上这种传送是不必要的，因为计算机A并没有使用该文件的内容。
    然而网络文件系统NFS则采用另一种思路。NFS允许应用进程打来一个远地文件，并能在该文件的某一个特定的位置上开始读写数据。这样，NFS可使用户只复制一个大文件中的一个很小的片段，而不需要复制整个大文件。对于上述例子，计算机A中的NFS客户软件，将要添加的数据和文件后面写数据的请求一起发送到远地的计算机B中的NFS服务器，NFS服务器更新文件后返回应答信息。在网络上传送的只是少量的修改数据。
    6.2.3简单文件传送协议TFTP
    TCP/IP协议族中还有一个简单文件传送协议TFTP（Trivial File Transfer Protocol），它是一个很小且易于实现的文件传送协议。TFTP的版本2是因特网的正式标准。虽然TFTP也使用客户服务器方式，但它使用UDP数据报，因此TFTP需要有自己的差错改正措施。TFTP只支持文件传输而不支持交互。TFTP没有一个庞大的命令集，没有列目录的功能，也不能对用户进行身份鉴别。
    TFTP的主要优点两个。第一，TFTP可用于UDP环境。例如，当需要将程序或文件同时向许多机器下载时就往往需要使用TFTP。第二，TFTP代码占的内存较小。这对较小的计算机或某些特殊用途的设备是很重要的。这些设备不需要硬盘，只需要固化了TFTP、UDP和IP的小容量只读存储器即可。当接通电源后，设备执行只读存储器中的代码，在网络上广播一个TFTP请求。网络上的TFTP服务器就发送响应，其中包括可执行二进制程序。设备收到此文件后将其放入内存，然后开始运行程序。这种方式增加了灵活性，也减少了开销。
    TFTP的主要特点是：
    （1）每次传送的数据报文中有512字节的数据，但最后一次可不足512字节。
    （2）数据报文按序编号，从1开始。
    （3）支持ASCII码或二进制传送。
    （4）可对文件进行读或写。
    （5）使用很简单的首部。
    TFTP的工作很像停止等待协议。发送完一个文件块后就等待对方的确认，确认是应指明确认的块编号。发完数据后在规定时间内收不到确认就要重新发数据PDU。发送确认PDU的一方若在规定时间内收不到下一个文件块，也要重发确认PDU。这样就可保证文件的传送不致因某一个数据报的丢失而告失败。
    在一开始工作时。TFTP客户进程发送一个读请求报文或写请求报文给TFTP服务器进程，其熟知端口号码为69。TFTP服务器进程要选择一个新的端口和TFTP客户进程进行通信。若文件长度恰好为512字节的整数倍，则在文件传送完毕后，还必须在最后放一个只含首部而无数据的数据报文。若文件长度不是512字节的整数倍，则最后传送数据报文中数据字段一定不满512字节，这正好可作为文件结束的标志。
6.3远程终端协议TELNET
    TELNET是一个简单的远程终端协议，它也是因特网的正式标准。用户用TELNET就可在其所在地通过TCP连接注册（即登录）到远地的另一个主机上（使用主机名或IP地址）。TELNET能将用户的击键传到远方主机，同时也能将远方主机的输出通过TCP连接返回到用户屏幕。这种服务是透明的，因为用户感觉到好像键盘和显示器是直接连在远地主机上。因此TELNET又称为终端仿真协议。
    TELNET并不复杂，以前应用得很多。现在由于PC机的功能越来越强，用户已较少使用TELNET了。
    TELNET也使用客户服务器方式。在本地系统运行TELNET客户进程，而在远地主机则运行TELNET服务器进程。和FTP的情况相似，服务器中的主进程等待新的请求，并产生从属进程来处理每一个连接。
    TELNET能够适应许多计算机和操作系统的差异。例如，对于文本中一行的结束，有的系统使用ASCII码的回车（CR），有的系统使用换行（LF），还有的系统使用两个字符，回车-换行（CR-LF）。又如，在中断一个程序时，许多系统使用Control-C（^C），但有的系统使用ESC按键。为了适应这种禅意，TELNET定义了数据和命令应怎样通过因特网。这些定义就是所谓的网络虚拟终端NVT（Network Virtual Terminal）。NVT的意思。客户软件把用户的击键和命令转换成NVT格式，并送交服务器。服务器软件把收到的数据和命令，从NVT格式转换成原地系统所需的格式。向用户返回数据，服务器吧原地系统的格式转换为NVT格式，本地客户再从NVT格式转换到本地系统所需的格式。
    NVT的格式定义很简单。所有的通信都使用8位一个字节。在运转时，NVT使用7位ASCII码传送数据。而当高位置1时用作控制命令。ASCII吗共有95个可打印字符（如字母、数字、标点符号）和33个控制字符。所有可打印字符在NVT中的意义和在ASCII码中一样。但NVT只使用了ASCII码 的控制字符中的几个。此外，NVT还定义了两字符的CR-LF为标准的行结束控制符。当用户键入回车按键时，TELENT和客户就把它转换为CR-LF再进行传输，而TELNET服务器要把CR-LF转换为远地机器的行结束字符。
    TELNET的选项协商（Option Negotiation）使TELNET客户和TELNET服务器可商定使用更多的终端功能，协商的双方是平等的。
6.4万维网WWW
    6.4.1万维网概述
    万维网WWW（World WIde Web）并非某种特殊的计算机网络。万维网是一个大规模的联机式的信息储藏所，英文简称为Web。万维网用链接的方法能非常方便地从因特网上的一个斩断访问另一个站点（也就是所谓的“连接到另一个站点”），从而主动地按需获取丰富的信息。图说明了万维网提供分布式服务的特点。
    图画出了五个万维网上的站点，他们可以相隔数千公里，但都必须连接在因特网上。每一个万维网站点都存放了许多文档。在这些文档中有一些地方的文字是用特殊方式显示的（例如用不同的颜色，或廉价了下划线），而放我们将鼠标移动到这些地方时，鼠标的箭头就变成了一只手的形状。这就表明这些地方有一个链接（这种连接有时也称之为超链），如果我们在这些地方点击鼠标，就可以从这个文档链接到可能相隔很远的另一个文档。经过一定的时延（几秒钟、几分钟甚至更长，取决于所链接的文档的大小和网络的拥塞情况），在我们的屏幕上就能将远方传送古来的文档显示出来。例如，站点A的某个文件有两个地方1和2可以链接到其他的站点。当我们点击链接1时，就可连接到站点B的某个文档。若点击2则可链接到站点E。站点B的文档也有两个地方和3和4有链接。若点击链接3就可链接到站点D，而点击链接4就链接到站点E，但从E的这个文档已不能继续链接到其他任何的站点。站点D的文档中有两个地方5和6有链接，可以分别链接到A和C。
    正是由于万维网的出现，使因特网从仅由少数计算机专家使用变为普通百姓也能利用的信息资源。万维网的出现使网站数按指数规律增长。因此，万维网的出现使因特网发展中的一个非常重要的里程碑。
    万维网是欧洲粒子物理实验室的Tim Berbers-Lee最初于1989年3月提出的。1993年2月，第一个图形界面浏览器开发成功，名字叫做Mosaic。1995年著名的NetscapeNavigator浏览器上市。目前最流行的浏览器是微软公司的Internet Explorer。
    万维网是一个分布式的超媒体（hypermedia）系统，它是超文本（hypertext）系统的扩充。所谓超文本是包括指向其他文档的链接的文本。也就是说，一个超文本由多个信息源链接成，而这些信息源的数目实际上是不受限制的。利用一个链接可使用户找到另一个文档，而这些又可链接到其他的文档（以此类推）。这些文档可以位于世界上任何一个接在因特网上的超文本系统中。超文本是万维网的基础。
    超媒体与超文本的区别是文档内容不同。超文本文档仅包含文本信息，而超媒体文档还包含其他表示方式的信息，如图形、图像、声音、动画，甚至活动视频图像。
    分布式的和非分布式的超媒体系统有很大区别。在非分布式系统中，各种信息都驻留在单个计算机的磁盘中。由于各种文档都可从本地获得，因此这些文档之间的连接可进行一致性检查。所以，一个非分布式超媒体系统能够保证所有的连接都是有效的和一致的。
    万维网把大量信息分布在整个因特网上。每台主机上的文档都独立进行管理。对这些文档的增加、修改、删除或重新命名都不需要（实际上也不可能）通知到因特网上成千上万的节点。这样，万维网文档之间的连接就经常会不一致。例如，主机A上的文档X本来包含了一个指向主机B上的文档Y的连接。若主机B的管理员在某日删除了文档Y，那么主机A的上述链接显然就失效了。
    万维网以客户服务器方式工作。上面所说的浏览器就是在用户主机上的万维网客户程序。万维网文档所驻留的主机则运行服务器程序，因此这个主机也称为万维网服务器。客户程序向服务器程序发出请求，服务器程序向客户程序送回客户所要的万维网文档。在一个客户程序主窗口上显示出的万维网文档称为页面（page）。
    从以上所述可以看出，万维网必须解决以下几个问题：
    （1）怎样标志分布在整个因特网上的万维网文档。
    （2）用什么样的协议来实现万维网上各种链接？
    （3）怎样使不同作者创作的不同风格的万维网文档都能在因特网上各种主机上显示出来，同时使用户清除地知道在什么地方存在着链接？
    （4）怎样使用户能够很方便地找到所需的信息？
    为了解决第一个问题，万维网使用统一资源定位符URL（Uniform Resource Locator）来标志万维网上的各种文档，并使每一个文档在整个因特网的范围内具有唯一的标识符URL。
    为了解决上述的第二个问题，就要使万维网客户程序与万维网服务器程序之间的交互遵守严格的协议，这就是超文本传送协议HTTP（HyperText Transfer Protocol）。HTTP是一个应用层协议，它使用TCP连接进行可靠的传送。为了解决上述的第三个问题，万维网使用超文本标记语言HTML（HyperText Markup Language），使得万维网页面的设计者可以很方便地用链接从本页面的某处链接到因特网上的任何一个万维网页面，并且能够在自己的主机屏幕上讲这些页面显示出来。最后，用户可使用搜索工具在万维网上方便地查找所需的信息。
    下面我们将进一步讨论上述的这些重要概念。
    6.4.2统一资源定位符URL
    1.URL的格式
    统一资源定位符URL是用来表示从因特网上得到的资源位置和访问这些资源的方法。URL给资源的位置提供一种抽象的识别方法，并用这种方法给资源定位。只要能够对资源定位，系统就可以对资源进行各种操作，如存取、更新、替换和查找其属性。
    这里所说的“资源”是指在因特网上可以被访问的任何对象，包括文件目录、文件、文档、图像、声音等，以及与因特网相连的任何形式的数据。“资源”还包括电子邮件的地址和USENET新闻组，或USENET新闻组中的报文。
    URL相当于一个文件名在网络范围的扩展。因此，URL是与因特网相连的机器上的任何可访问对象的一个指针。由于访问不同对象所使用的协议不同，所以URL还指出读取某个对象时所使用的协议。URL的一半形式由以下四个部分组成：<协议>://<主机>:<端口>/<路径>
    URL的第一部分是最左边的<协议>。这里的<协议>就是指出使用什么协议来获取该万维网文档。现在最常用的协议就是http（超文本传送协议HTTP），其次是ftp（文件传送协议FTP）。
    在<协议>后面使规定必须协商的格式“://”，不能省略。它的右边是第二部分<主机>，它指出这个万维网文档是在哪一个主机上。这里的<主机>就是指该主机在因特网上的域名。再后面使第三和第四部分<端口>和<路径>，有时可省略。
    下面我们简单介绍使用得最多的一种URL。
    2.使用HTTP的URL
    对于万维网的网点的访问要使用HTTP协议。HTTP的URL的一般形式是：http://<主机>:<端口>/<路径>
    HTTP的默认端口是80，通常可省略。若再省略文件的<路径>项，则URL就指到因特网上的某个主页（home page）。主页是个很重要的概念，它可以是以下几种情况之一：
    （1）一个WWW服务器的最高级别的页面。
    （2）某一个组织或部门的一个定制的页面或目录。从这样的页面可链接到因特网上的与本组织或部门有关的站点。
    （3）由某一个人自己设计的描述他本人情况的WWW页面。
    例如，要查有关清华大学的信息，就可先进入清华大学的主页，其URL为：http://www.tsinghua.edu.cn
    这里省略了默认的端口号80。我们从清华大学的主页入手，就可以通过许多不同的链接找到所要查找的各种有关清华大学各个部门的信息。
    更复杂一些的路径是指向层次结构的从属页面。例如：http://www.tsinghua.edu.cn/chn/yxsz/index.htm
    是清华大学的“院系设置”页面的URL。注意，上面的URL中使用了指向文件的路径，而文件名就是最后的index.htm。后缀htm（有时可写为html）表示这是一个用超文本标记语言HTML写出的文件。
    虽然URL里面的字母不分大小写，但有的页面为了读者看起来方便，故意用了一些大写字母，实际上这对使用Windows的PC机用户是没有关系的。
    用户使用URL并非仅仅能够访问万维网的页面，而且还能够通过URL使用其他的因特网应用程序，如FTP或USENET新闻组等。更重要的是，用户在使用这些应用程序时，只使用一个程序，即浏览器。这显然是非常方便的。
    6.4.3超文本传送协议HTTP
    1.HTTP的操作过程
    HTTP协议定义了浏览器（即万维网客户进程）怎样向万维网服务器请求万维网文档，以及服务器怎样把文档传送给浏览器。从层次的角度看，HTTP是面向事务的（transaction-oriented）应用层协议，它是万维网上能够可靠地交换文件（包括文本、声音、图像等各种多媒体文件）的重要基础。
    万维网的大致工作过程。
    每个万维网网点都有一个服务器进程，它不断地监听TCP的端口80，以便发现是否有浏览器（即万维网客户。请注意，浏览器和万维网客户是同义词）向它发出连接建立请求。一旦监听到连接建立请求并建立了TCP连接之后，浏览器就向万维网服务器发出浏览某个页面的请求，服务器接着就返回请求的页面作为相应。最后，TCP连接就被释放了。在浏览器和服务器之间的请求和响应的交互，必须按照规定的格式和遵循一定的规则。这些格式和规则就是超文本传送协议HTTP。
    HTTP规定在HTTP客户与HTTP服务器之间的每次交互，都由一个ASCII码串构成的请求和一个“类MIME（MIME-like）”的响应组成。HTTP报文通常都使用GTCP连接传送。
    用户浏览页面的方法有两种。一种方法是在浏览器的地址窗口中键入所要找的页面的URL。另一种方法是在某一个页面中用鼠标点击一个可选部分，这是浏览器会自动在因特网上找到所要链接的页面。
    假定图中的用户用鼠标点击了屏幕上的一个可选部分。他使用的连接指向了“清华大学院系设置”的页面，其URL是http://www.tsinghua.edu.cn/chn/yxsz/index.htm。下面我们用HTTP/1.0更具体地说明在用户点击鼠标后所发生的几个时间：
    （1）浏览器分析链接指向页面的URL。
    （2）浏览器向DNS请求解析www.tsinghua.edu.cn的IP地址。
    （3）域名系统DNS解析出清华大学服务器的IP地址为166.111.4.100。
    （4）浏览器与服务器建立TCP连接（在服务器端IP地址是166.111.4.100，端口是80）
    （5）浏览器发出取文件命令：GET/chn/yxsz/index.htm。
    （6）服务器www.tsinghua.edu.cn给出响应，把文件index.htm发送给浏览器。
    （7）释放TCP连接。
    （8）浏览器显示“清华大学院系设置”文件index.htm中的所有文本。
    浏览器在下载文件时，可以设置为只下载其中的文本部分。这样可使下载的速度加快。在这种情况向，文件中原来嵌入图像或声音的地方只用一个小图标来显示。用户若要下载这些图像或声音，可用鼠标再分别点击这些图标。每点击一次鼠标，就重复执行一次类似于上面的8个步骤。也就是先建立TCP连接，在使用TCP连接传送命令和传送文件，最后释放TCP连接。
    HTTP使用了面向连接的TCP作为运输层协议，保证了数据的可靠传输。HTTP不必考虑数据在传输过程中被丢弃后又怎样被重传。但是HTTP协议本身是无连接的。这就是说，虽然HTTP使用了TCP连接，但通信的双方在交换HTTP报文之前不需要先建立HTTP连接。在1997年以前使用的是RFC 1945定义的HTTP/1.0协议。在1998年这个协议升级为HTTP/1.1，目前是因特网草案标准。
    HTTP协议是无状态的（stateless）。也就是说，同一个客户第二次访问同一个服务器上的页面时，服务器的响应与第一次被访问时的相同（假定现在服务器还没有把该页面更新），因为服务器并不记得曾经访问过的这个客户，也不记得为该客户曾经服务过多少次。HTTP的无状态特性简化了服务器的设计，使服务器更容易支持大量并发的HTTP请求。
    下面我们粗略估算一下，从浏览器请求一个万维网文档到收到整个文档所需的时间。用户在点击鼠标链接某个万维网文档时，HTTP协议首先要和服务器建立TCP连接。这需要使用三次握手。当三次握手的前两部分完成后（即经过了一个RTT时间后），万维网客户就把HTTP请求报文作为三次握手的第三个报文的数据发送给万维网服务器。服务器收到HTTP请求报文后，就把所有的文档作为相应报文返回给客户。
    从图可看出，请求一个万维网文档所需的时间是该文档的传输时间（与文档大小成正比）加上两倍往返时间RTT（一个RTT用于连接TCP连接，另一个RTT用于请求和接收万维网文档。这里TCP建立连接的三次握手的第三个报文段中捎带了客户对万维网文档的请求）。
    HTTP/1.0的主要缺点，就是每请求一个文档就要有两倍的RTT的开销。若一个主页上有很多链接的对象（如图片等）需要依次进行链接，那么每一次链接下载都导致2xRTT的开销。另一种开销就是万维网客户和服务器为每一次建立新的TCP连接都要分配缓存和变量。特别是万维网服务器往往要同时服务于大量客户的请求，这样会使万维网服务器的负担很重。好在浏览器都提供了能够打开5~10个并行的TCP连接，而每一个TCP连接处理客户的一个请求。因此，使用并行TCP连接可以缩短响应时间。
    HTTP/1.1协议较好地解决了这个问题，它使用了持续连接（persistent connection）。所谓持续连接就是万维网服务器在发送响应后仍然在一段时间内保持这条连接，使同一个客户（浏览器）和该服务器可以继续在这条连接上传送后续的HTTP请求报文和响应报文。这并不局限于传送同一个页面上链接的文档，而是只要这些文档都在同一个服务器上就行。目前一些流行的浏览器（例如，IE6.0）的默认设置就是使用HTTP/1.1。如果用户不愿意使用持续连接的浏览器，可以点击IE浏览器上面的“工具”，然后点击“Internet选项”，再点击“高级”，把“HTTP1.1设置”的选择取消即可。
    HTTP/1.1协议的持续连接有两种工作方式，即非流水线方式（without pipelining）和流水线方式（with pipelining）。
    非流水线方式的特点，是客户在收到前一个响应后才能发出下一个请求。因此，在TCP连接已建立后，客户每访问一次对象都要用去一个往返时间RTT。这比非持续连接的两倍RTT的开销节省了建立TCP连接所需的一个RTT时间。但非流水线方式还是有缺点的，因为服务器咋ifasongwan一个对象后，其TCP连接就处于空闲状态，浪费了服务器资源。
    流水线方式的特点，是客户在收到前一个响应后才能发出下一个请求。因此，在TCP连接已建立后，客户每访问一次对象都要用去一个往返时间RTT。这比费持续连接的两倍RTT的开销节省了建立TCP连接所需的一个RTT时间。但非流水线方式还是有缺点的，因为服务器在发送完一个对象后，其TCP连接就处于空闲状态，浪费了服务器资源。
    流水线方式的特点，是客户在收到HTTP的响应报文之前就能够接着发送新的请求报文。于是一个接一个的请求报文到达服务器后，服务器就可连续发回响应报文。因此，使用流水线方式时，客户访问所有的对象只需花费一个RTT时间。流水线工作方式使TCP连接中的空闲时间减少，提高了下载文档效率。
    2.代理服务器
    代理服务器（proxy server）是一种网络实体，它又称为万维网高速缓存（Web Cache）。代理服务器把最近的一些请求和响应暂存在本地磁盘中。当新请求到达时，若代理服务器发现这个请求与暂时存放的请求相同，就返回暂存的响应，而不需要按URL的地址再次去因特网访问该资源。代理服务器可在客户端或服务器端工作，也可在中建系统上工作。下面我们用例子说明他的作用。
    设图是校园网不使用代理服务器的情况。这是，校园网中所有的PC机都通过2Mb/s专线链路（R1-R2）与因特网上的远点服务器建立TCP连接。因而校园网各PC机访问因特网的通信量往往会使这条2Mb/s的链路过载，使得时延大大增加。
    图是校园网使用代理服务器的情况。这是，访问因特网的过程是这样的：
    （1）校园网PC机中的浏览器向因特网的服务器请求服务时，就先和校园网的代理服务器建立TCP连接，并向代理服务器发出HTTP请求报文。
    （2）若代理服务器已经存放了所请求的对象，代理服务器就把这个对象放入HTTP响应报文中返回给PC机的浏览器。
    （3）否则，代理服务器就代表发出请求的用户浏览器，与因特网上的源点服务器（origin server）建立TCP连接，并发送HTTP请求报文。
    （4）源点服务器把所请求的对象放在HTTP响应报文中返回给校园网的代理服务器。
    （5）代理服务器收到这个对象后，先复制在自己的本地存储器中（留待以后用），然后再把这个对象放在HTTP响应报文中，通过已建立的TCP连接，返回给请求该对象的浏览器。
    我们注意到，代理服务器有时是作为服务器（当接收浏览器的HTTP请求时），但有时却作为客户（当向因特网上的源点服务器发送HTTP请求时）。
    在使用代理服务器的情况下，由于有相当一大部分通信量局限在校园网的内部，因此，2Mb/s专线链路（R1-R2）上的通信量大大减少，因而减小了访问因特网的时延。
    3.HTTP的报文结构
    HTTP有两类报文：
    （1）请求报文--从客户向服务器发送请求报文。
    （2）响应报文--从服务器到客户的回答。
    由于HTTP是面向文本的（text-oriented），因此在报文中的每一个字段都是一些ASCII码串，因而各个字段的长度都是不确定的。
    HTTP请求报文的响应报文都是由三个部分组成。可以看出，这两种报文格式的区别就是开始行不同。
    （1）开始行，用于区分是请求报文还是响应报文。在请求报文中的开始行叫做请求行（Request-Line），而在响应报文中的开始行叫做状态行（Status-Line）。在开始行的三个字段之间都以空格分隔开，最后的“CR”和“LF”分贝代表“回车”和“换行”。
    （2）首部行，用来说明浏览器、服务器或报文主题的一些信息。首部可以有好几行，但也可以不使用。在每一个首部行中都有首部字段名和它的值，每一行在结束的地方都要有“回车”和“换行”。整个首部行结束时，还有一空行将首部行和后面的实体主体分开。
    （3）实体主体（entity body），在请求报文中一般都不用这个字段，而在响应报文中也可能没有这个字段。
    下面先介绍HTTP请求报文最重要的一些主要特点。
    请求报文的第一行“请求行”只有三个内容，即方法，请求资源的URL，以及HTTP的版本。
    请注意：这里的名词“方法”（method）是面向对象技术中使用的专门名词。所谓“方法”就是对所请求的对象进行的操作，这些方法实际上也就是一些命令。因此，请求报文的类型是由它所采用的方法决定的。表6-1给出了请求报文中常用的集中方法。
            |方法（操作）|意义                        |
            |OPTION     |请求一些选项的信息            |
            |GET        |请求读取由URL所标志的信息     |
            |HEAD       |请求读取由URL所标志的信息的首部|
            |POST       |给服务器添加信息（例如，注释） |
            |PUT        |在指明的URL下存储一个文档     |
            |DELETE     |删除指明的URL所标志的资源     |
            |TRACE      |用来进行环回测试的请求报文     |
            |CONNECT    |用于代理服务器                |
    对于我们在图中的例子，即要链接到“清华大学院系设置”的页面。HTTP的请求报文的开始行（即请求行）应当是（请注意在GET后面和HTTP/1.1前面的空格）：
    GET  http://www.tsinghua.edu.cn/chn/yxsz/index.htm HTTP/1.1
    下面是一个请求报文的例子：
    GET  /chn/yxsz/index.htm  HTTP/1.1  {请求行使用了相对URL}
    Host:www.tsinghua.edu.cn  {此行是首部行的开始。这行给出主机的域名}
    Connection:close  {高速服务器发送完请求的文档后就可释放连接}
    User-Agent:  Mozilla/5.0  {表明用户代理是使用Netscape浏览器}
    Accept-Language: cn  {表明用户希望优先得到中文版本的文档}
    {请求报文的最后还有一个空行}

    在请求行使用了相对URL（即省略了主机的域名）是因为下面的首部行（第2行）给出了主机的域名。第3行是告诉服务器不使用持续连接，表示浏览器希望服务器在传送完所请求的对象后即关闭TCP连接。这个请求报文没有实体主体。
    再看一下HTTP响应报文的主要特点。
    每一个请求报文发出后，都能收到一个响应报文。响应报文的第一行就是状态行。
    状态行包括三项内容，即HTTP的版本，状态吗，以及解释状态码的简单短语。
    状态码（Status-Code）都是三位数字的，分为5大类共33种。例如，
    1xx表示通知信息，如请求收到了或正在进行处理。
    2xx表示成功，如接受或知道了。
    3xx表示重定向，如要完成请求还必须采取进一步的行动。
    4xx表示客户的差错，如请求中有错误的语法或不能完成。
    5xx表示服务器的差错，如服务器失效无法完成请求。
    下面三种状态行在响应报文中是经常见到的。
    HTTP/1.1  202  Accepted  {接受}
    HTTP/1.1  400  Bad Request {错误的请求}
    HTTP/1.1  404  Not Found  {找不到}
    若请求的网页从http://www.ee.xyz.edu/index.html 转移到了一个新的地址，则响应报文的状态行和一个首部行就是下面的形式：
    HTTP/1.1  301  Moved Permanently  {永久性地转移了}
    Location:http://www.xyz.edu/ee/index.html  {新的URL}
    4.在服务器上存放用户的信息
    上面已经讲过，HTTP是无状态的。这样做虽然简化了服务器的设计，但在实际工作中，一些万维网站点却常常希望能够识别用户。例如，在网上购物时，一个顾客要购买多种物品。当他把选好的一件物品放入“购物车”后，他还要继续浏览和选购其他物品。因此，服务器需要记住应用户的身份，使他再接着选购的一些物品能够放入同一个“购物车”中，这样就便于集中结账。有时某些万维网站点也可能想限制某些用户的访问。要做到这点，可以在HTTP中使用Cookie。在RFC 2109中对Cookie进行了定义，规定万维网站点可以使用Cookie来跟踪用户。Cookie原意是“小甜饼”（广东人用方言音译为“曲奇”），目前尚无标准译名，在这里Cookie表示在HTTP服务器合客户之间传递的状态信息。现在很多网站都已广泛使用Cookie。
    Cookie是这样工作的。当用户张三浏览某个使用Cookie的网站时，该网站的服务器就为张三产生一个唯一的识别码，并以此作为索引在服务器的后端数据库中产生一个项目。接着在给张三的HTTP响应报文中添加一个叫做Set-cookie的首部行。这里的“首部字段名”就是“Set-cookie”，而后面的“值”就是赋予该用户的“识别码”。例如这个首部行是这样的：Set-cookie：12345678
    当张三收到这个响应时，其浏览器就在它管理的特定Cookie文件中添加一行，其中包括这个服务器的主机名和Set-cookie后面给出的识别码。当张三继续浏览这个网站时，每发送一个HTTP请求报文，其浏览器就会从其Cookie文件中取出这个网站的识别码，并放到HTTP请求报文的Cookie首部行中：Cookie：12345678
    于是，这个网站就能够跟踪用户12345678（张三）在该网站的活动。需要注意的是，服务器并不需要知道这个用户的姓名张三和其他的信息。但服务器能够知道用户12345678在什么时间访问了哪些页面，以及访问这些页面的顺序。如果张三是在网上购物，那么这个服务器可以为展示干维护一个所购物品的列表，使张三在结束这次购物时可以一起付费。
    如果张三在几天后再次访问这个网站，那么他的浏览器会在其HTTP请求报文中继续使用首部行Cookie：12345678，而这个网站服务器根据张三过去的访问记录可以向他推荐商品。如果张三已经在该网站登记过和使用过信用卡付费，那么这个网站就已经保存了张三的姓名、电子邮件地址、信用卡号码等信息。这样，当张三继续在该网站购物时，只要还是用同一个电脑上网，由于浏览器产生的HTTP请求报文中都携带了同样的Cookie首部行，服务器就可利用Cookie来验证这是用户张三，因此以后张三在这个网站购物时就不必重新在键盘上输入姓名、信用卡号码等信息。这样，当张三继续在该网站购物时，只要还使用同一个电脑上网，由于浏览器产生的HTTP请求报文中都携带了同样的Cookie首部行，服务器就可利用Cookie来验证这是用户张三，因此以后张三在这个网站购物时就不必重新在键盘上输入姓名、信用卡号码等等信息。这对顾客显然是很方便的。
    尽管Cookie能够简化用户网上购物的过程，但Cookie的使用一直引起很多争论。有人认为Cookie会把计算机病毒带到用户的计算机中。其实这是对Cookie的误解。Cookie只是一个小小的文本文件，不是计算机的可执行程序，因此不可能传播计算机病毒，也不可能用来获取用户计算机硬盘中的信息。对于Cookie的另一个争议，是关于用户隐私的保护问题。例如，网站服务器知道了张三的一些信息，就有可能把这些信息出卖给第三方。Cookie还可用来手机用户在万维网网站上的行为。这些都属于用户个人的隐私。有些网站为了使顾客放心，就公开声明他们会保护顾客的隐私，绝不会把顾客的识别码或个人信息出售或转移给其他厂商。
    在网上进行过浏览的用户可以在Cookie的文件夹中看到这些Cookie文件。对于使用WindowsXP的用户可在C盘的文件夹“Documents and Settings”中继续打开使用自己的“用户名”的文件夹，然后就可看到“Cookies”文件夹，里面就是存放Cookie文件的地方。用户不仅又看到Cookie识别码，而且可以看到是哪个网站发送过来的Cookie文件。
    为了让用户有拒绝接受Cookie的自由，在浏览器中用户可自行设置接受Cookie的条件。例如在浏览器IE6.0中，点击工具栏中的“工具”按钮，找到“Internet选项”，再点击“隐私”，就可以看见菜单中的左边有一个可上下滑动的标尺，它有了六个位置。最高的位置是阻止所有Cookie，而最低的位置是接受所有Cookie。中间的位置则是在不同条件下可以接受Cookie。用户可根据自己的情况对IE浏览器进行必要的设置。
    6.4.4万维网的文档
    1.超文本标记语言HTML
    要使任何一台计算机都能显示出任何一个万维网服务器上的页面，就必须解决页面制作的标准化问题。超文本标记语言HTML（HyperText Markup Language）就是一种制作万维网页面的标准语言，它消除了不同计算机之间信息交流的障碍。由于HTML非常易于掌握且实施简单，因此它很快就成为万维网的重要基础。官方的HTML标准由W3C（即WWW Consortium）负责制定。有关HTML的一些参考资料见[W-HTML]。现在最新的版本是HTML4.0。更新的版本正在研究之中。
    HTML定义了许多用于排版的命令，即“标签”（tag）。例如，<I>表示后面开始用斜体字排版，而</I>则表示斜体字排版到此结束。HTML就把各种标签嵌入到万维网的页面中，这样就构成了所谓的HTML文档。HTML文档是一种可以用任何文本编辑器（例如，Windows的记事本Notepad）创建的ASCII码文件。但应注意，仅当HTML文档是以.html或.htm为后缀时，浏览器才对这样的HTML文档的各种标签进行解释。如果HTML文档改换以.txt为其后缀，则HTML解释程序就不对标签进行解释，而浏览器只能看见原来的文本文件。
    并非所有的浏览器都支持所有的HTML标签。若某一个浏览器不支持某一个HTML标签，则浏览器将忽略此标签，但在一对不能识别的标签之间的文本仍然会被显示出来。
    下面是一个简单例子，用来说明HTML文档中标签的用法。在每一个语句后面的花括号中的字是为读者看的注释，在实际的HTML文档中并没有这种注释。
    把上面的HTML文档存入D盘的文件夹HTML，文件名是HTML-example.html（注意：没有文档中的注释部分）。当浏览器读取了该文档后，就按照HTML文档中的各种标签，根据浏览器所使用的显示器的尺寸和分辨率的大小，重新进行排版并显示出来。图表示IE浏览器在计算机屏幕上显示出的与该文档有关部分的画面。文档的标题（title）“一个HTML的例子”显示在浏览器最上面的标题栏中。文件的路径显示在地址栏中。再下面就是文档的主体部分。主体部分的题头（heading），即文档主体部分的标题“HTML很容易掌握”，用较大的字号显示出来，因为在标签中指明了使用的是1级题头<H1>。
    目前已开发出了很好的制作万维网页面的软件工具，使我们能够像使用Word字处理器那样很方便地制作各种页面。即使我们用Word字处理器编辑了一个文件，但只要在“另存为（Save As）”时选取文件后缀为.htm或.html，就可以很方便地把Word的.doc格式文件转换为浏览器可以显示的HTML格式的文档。
    HTML允许在万维网页面中掺入图像。一个页面本身带有的图像称为内涵图像（inline image）。HTML标准并没有规定该图像的格式。实际上，大多数浏览器都支持GIF和JPEG文件。很多种格式的图像占据的存储空间太大，因而这种图像在因特网传送石就很浪费时间。例如，一副位图文件（.bmp）可能要占用500~700KB的存储空间。但若将此图像该村为经压缩的.gif格式，则可能只有十几个千字节，大大减少了存储空间。
    HTML还规定了链接的设置方法。我们知道每个链接都有一个起点和终点。链接的起点说明在万维网页面中什么地方可引出一个链接。在一个页面中，链接的起点可以是一个字或几个字，或是一幅图，或是一段文字。在浏览器所显示的页面上，链接的起点是很容易识别的。对于以文字作为链接的起点时，这些文字往往用不同的颜色显示（例如，一般的文字用黑色字时，链接起点往往使用蓝色字），甚至还加上下划线（一般由浏览器来设置）。当我们将鼠标移动到一个链接的起点时，表示鼠标位置的箭头就变成了一只手。这是只要点击鼠标，这个链接就被激活。
    链接的重点可以是其他网站上的页面。这种链接方式叫做远程链接。这时必须在HTML文档中指明链接到网站的URL。有时链接可以指向本计算机中的某一个文件或本文件中的某处。这叫作本地链接。这是必须在HTML文档中指明链接的路径。
    实际上，现在这种链接方式已经不局限于用在万维网文档中。在最常用的Word字处理器的工具栏中，也设有“插入超链接”的按钮。只要点击这个按钮，就可以看到设置超链接的窗口。用户可以很方便地在自己写的Word文档中设置各种链接的起点和终点。
    2.动态万维网文档
    上面所讨论的万维网文档只是万维网文档中最基本的一种，即所谓的静态文档（static document）。静态文档是指咋iwendang创作完毕后就存放在万维网服务器中，在被用户浏览的过程中，内容不会改变。由于这种文档的内容不会改变，因此用户UID静态文档的每次读取所得到的返回结果都是相同的。
    静态文档的最大优点是简单。由于HTML是一种排版语言，因此静态文档可以由不懂程序设计的人员来创建。但静态文档的缺点是不够灵活。当信息变化时就要由文档的作者手工对文档进行修改。可见，变换频繁的文档不适于做成静态文档。
    动态文档（dynamic document）是指文档的内容是在浏览器访问万维网服务器时才由应用程序动态创建。当浏览器请求到达时，万维网服务器要运行另一个应用程序，并把控制转移到此应用程序。接着，该应用程序对浏览器发来的数据进行处理，并输出HTML格式的文档，万维网服务器应用程序的输出作为对浏览器的响应。由于对浏览器每次请求的响应都是临时生成的，因此用户通过动态文档所看到的内容是不断变化的。动态文档的主要优点是具有报告当前最新信息的能力。例如，动态文档可用来报告股市行情、天气预报或民航售票情况等内容。但动态文档的创建难度比静态文档的高，因为动态文档的开发不是直接编写文档本身，而是编写用于生成文档的应用程序，这就要求动态文档的开饭人员必须会编程，而所编写的程序还要通过大范围的测试，以保证输入的有效性。
    动态文档和静态文档之间的主要差别提现在服务器一端。这主要是文档内容的生成方法不同。而从浏览器的角度看，这两种文档并没有区别。动态文档的静态文档的内容都遵循HTML所规定的格式，浏览器仅根据在屏幕上看到的内容并无法判定服务器送来的是哪一种文档，只有文档的开发者才知道。
    从以上所述可以看出，要实现动态文档就必须在以下两个方面对万维网服务器的功能进行扩充：
    （1）应增加另一个应用程序，用来处理浏览器发来的数据，并创建动态文档。
    （2）应增加一个机制，用来使万维网服务器将浏览器发来的数据传送给这个应用程序，然后万维网服务器能够解释这个应用程序的输出，并向浏览器返回HTML文档。
    图是扩充了功能的万维网服务器的示意图。这里增加了一个机制，叫做通用网关接口CGI（Common Gateway Interface）。CGI是一种标准，它定义了动态文档应如何创建，输入数据应如何提供给应用程序，以及输出结果应如何使用。
    在万维网服务器中新增加的应用程序叫做CGI程序。取这个名字的原因是：万维网服务器与CGI的通信是遵循这CGI标准。“通用”是因为这个标准所定义的规则对其他任何语言都是通用的。“网关”二字的出现是因为CGI程序还可能要访问其他的服务器资源，如数据库或图形软件包，因而CGI程序的作用有点像一个网关。也有人将CGI程序简称为网关程序。“接口”是因为又一些已定义好的变量和调用等可供其他CGI程序使用。请读者注意：在看到CGI这个名词时，应弄清是指CGI标准，还是指CGI程序。
    CGI程序的正式名字是CGI脚本（script）。按照计算机科学的一般概念，“脚本”指的是一个程序，它被另一个程序（解释程序）而不是计算机的处理机来解释或执行。有一些语言专门作为脚本语言（script language），如Perl，REXX（在IBM主机上使用），JavaScript以及Tcl/Tk等。脚本也可用一些常用的编程语言写出，如C，C++等。使用脚本语言可更容易地和更快地进行编码，这对一些有限功能的小程序是很合适的。但一个脚本运行起来比一般的编译程序要慢，因为它的每一条指令先要被另一个程序来处理（这就要一些附加的指令），而不是直接被指令处理器来处理。脚本不一定是一个独立的程序，它可以是一个动态装入的库，甚至是服务器的一个子程序。
    CGI程序又称为cgi-bin脚本，这是因为在许多万维网服务器上，为便于找到CGI程序，就将CGI程序放在/cgi-bin的目录下。
    3.活动万维网文档
    随着HTTP和万维网浏览器的发展，上一节所述的动态文档已明显地不能满足发展的需要。这是因为，动态文档一旦建立，它所包含的信息内容也就固定下来而无法及时刷新屏幕。另外，像动画之类的显示效果，动态文档也无法提供。
    有两种技术可用于浏览器屏幕显示的连续更新。一种技术称为服务器推送（server push），这种技术是将所有的工作都交给服务器。服务器不断地运行与动态文档相关联的应用程序，定期更新信息，并发送更新过的文档。
    尽管从用户角度看，这样做可达到连续更新的目的，但这又很大的缺点。
    首先，为了满足很多客户的请求，服务器就要运行很多的服务器推送程序。这将造成过多的服务器开销。其次，服务器推送技术要求服务器为每一个浏览器客户维持一个不释放的TCP连接。随着TCP连接的数目增加，每一个连接所能分配到的网络带宽就下降，这就导致网络传输时延的增大。
    另一种提供屏幕连续更新的技术是活动文档（active document）技术。这种技术是把所有的工作都转移给浏览器端。每当浏览器请求一个活动文档时，服务器就返回一段活动文档程序副本，是该程序副本在浏览器端运行。这时，活动文档的内容就可与用户直接交互，并可连续地改变屏幕的显示。只要用户运行活动文档程序，活动文档的内容就可以连续地改变。由于活动文档技术不需要服务器的连续更新传送，对网络带宽的要求也不会太高。
    从传送得角度看，浏览器和服务器都把活动文档看成是静态文档。在服务器上的活动文档的内容是不变的，这点和动态文档是不同的。浏览器可在本地缓存一份活动文档的副本。活动文档还可处理成压缩形式，便于存储和传送。另一点要注意的是，活动文档本身并不包括其运行所需的全部软件，大部分的支持软件是事先存放在浏览器中。图说明了活动文档的创建过程。
    有美国Sun公司开发的Java语言是一项用于创建和运行活动文档的技术。在Java技术中使用了一个新的名词“小应用程序”（applet）来描述活动文档程序。当用户从万维网服务器下载一个嵌入了Java小应用程序的HTML文档后，用户可在浏览器的显示屏幕上点击某个图像，然后就可看到动画的效果，或是在某个下拉式菜单中点击某个项目，然后就可看到根据用户键入的数据所得到额计算结果。实际上，Java技术是活动文档技术的一部分。
    Java技术共有三个主要组成部分：
    （1）程序设计语言。Java包含一个新的程序设计语言，它即可用来编写传统的计算机程序，也可用来编写Java小应用程序。
    （2）运行（runtime）环境。Java系统还定义了一个运行Java程序所必须的运行环境，其中包括一个Java虚拟机（简称为JVM），该软件定义了Java二进制代码的执行模型。
    （3）类库（class library）。为了更容易编写Java小应用程序，Java提供了强大的类库支持。
    Java是一种面向对象的高级语言，编程方便直观。Java是从C++派生出来的，它省略了C++很多复杂的、很少用的语言特点。但Java和C或C++并不兼容。Java的每一个数据项都有一个确定的类型。对数据的操作严格按照该数据的类型来进行。
    Java的编译程序将源程序转换成Java字节码（bytecode），这是一种与机器无关的二进制代码。计算机程序调用解释程序（interpreter）读取字节码，并解释执行。
    Java语言、字节码以及Java运行系统都被设计成与计算机硬件无关。一旦形成了字节码，就可在任何计算机上运行，并产生相同的输出。为什么要使Java小应用程序与具体的机器无关呢？这是因为，首先，在因特网上用户使用的计算机种类繁多，Java小应用程序与机器无关可使在任何计算机上运行的浏览器程序能够下载并运行活动文档，Java小应用程序与机器无关可使在任何计算机上运行的浏览器程序能够下载并运行活动文档。其次，这样做可保证活动文档在所有的浏览器上产生同样的正确输出。第三，可大大地降低活动文档的创建和测试费用，因为不必为每一种计算机都制作一个副本。
    Java运行环境包括一些设置，可允许小应用程序操纵用户的显示，而Java类库则包含提供高级图形接口的软件。这些合在一起，就称为抽象窗口工具箱AWT（Abstract Window Toolkit）执行。为什么需要这样的一个AWT呢？有这样另个原因。首先，使用小应用程序主要是为了复杂的显示，只要静态显示不能满足要求是就要使用小应用程序。其次，一个控制图形显示的程序还必须指明许多的细节。例如，若要显示一个图形，程序就必须决定：是将此图形显示在已有的窗口内，还是另外创建一个新的窗口。若创建新的窗口，那么程序就要指明窗口的题头、大小、颜色、窗口所放的位置，以及是否需要滚动条等。
    由于Java小应用程序可能需要和静态文档进行交互，在AWT中还包括常规的万威望浏览器操作的类。例如，给定一个URL，一个小应用程序能够使用AWT的类来读取和显示一个HTML文档，读取和显示一个图像，以及读取和播放一个声音片段。
    最早的浏览器只有一个HTML解释程序，用来显示静态或动态文档。但运行Java的浏览器则需要两个解释程序，即HTML解释程序和Java小应用程序解释程序。
    解释程序是一个复杂的程序，其核心是一个模仿计算机的简单循环。解释程序维持一个指令指针，在初始化时在小应用程序的开始处。在每一个循环操作时，解释程序在指令指针指向的地址读取字节码，然后解释程序对字节码进行解码，并完成指明的操作。
    解释程序除了应具备基本的指令解码功能，还必须包括对Java运行环境的支持。也就是说，一个Java解释程序必须能够在屏幕上显示图形，接入到因特网，以及执行I/O操作等。此外，解释程序必须设计成使得小应用程序能够利用浏览器的设施来读取和显示静态和动态文档。因此，在浏览器中的Java解释程序必须能够与浏览器中的HTTP客户以及HTML解释程序进行通信。
    4.浏览器的结构
    浏览器的结构比较复杂。它包含若干个协同在一起工作的大型软件组件。图是一个浏览器的主要组成部分。
    从图可看出，一个浏览器包括一组客户程序、一组解释程序，以及一个控制程序。控制程序管理这些客户程序和解释程序，是浏览器的核心部件。控制程序解释鼠标的点击和键盘的输入，并调用有关的组件来执行用户指定的操作。例如，当用户用鼠标点击一个链接的起点时，控制程序就调用客户程序从所需文档所在的远程服务器上取回该文档，并调用解释程序想用户显示该文档。
    HTML解释程序是必不可少的，而其他的解释程序（如Java）则是可选的。HTML解释程序的输入就是符合HTML语法的文档。解释程序把HTML规格转换为适合用户显示硬件的命令来处理版面的细节。例如，当遇到一个强制换行标签<BR>，解释程序就输出一个新的行。
    HTML解释程序对页面中所有的可选项（即所有链接的起点）都保存有其位置信息。当用户的鼠标点击某个选项时，浏览器就根据当前光标位置和存储的位置信息来决定哪个选项被用户选中。
    前面已经讲过，浏览器的任务不仅是浏览。许多浏览器还包含一个FTP客户程序，用来获取文件传送的服务。一些浏览器也包括一个电子邮件客户程序，使浏览器能够发送和接收电子邮件。现在的浏览器都设计得很好，使用户看不见许多细节，用户也并不知道它执行了一个可选客户程序，如FTP客户程序或SMTP客户程序。
    在浏览器中还没有一个缓存。浏览器把它取回的每一个页面副本都放入本地磁盘的缓存中。当用户用鼠标点击某个选项时，浏览器首先检查磁盘的缓存。若缓存中保存了该项，那么浏览器就直接从缓存中得到该项副本而不必从网络来获取。在这种情况下，可明显地改善浏览器的运行特性。对于网络连接较为缓慢的用户，这种缓存就显得更加重要。因为从网络上取回一个很大的文件所需的时间，大大超过从本地磁盘直接读取的时间。
    然而使用缓存也带来了一些问题。首先，缓存要占用磁盘大量的空间。其次，浏览器性能的改善只有在用户再次查看缓存中国的页面时才有帮助。实际上，用户在进行浏览时，一般会及时将有保存价值的页面存储下来（只需点击几下鼠标即可）。因此，缓存中保存的大部分今后不再查看的文件并不会改善浏览器的性能。相反，由于浏览器要耗费时间来把这些文件不必要地存储在磁盘上，这反而降低了浏览器的效率。
    为了改善浏览器的特性，许多浏览器允许用户调整缓存策略。例如，用户可设置缓存的时间限制，并在此时间限制到期后在缓存中删除这些文件。
    6.4.5万维网的信息检索系统
    1.全文检索搜索与分类目录搜索
    万维网是一个大规模的、联机式的信息储藏所。那么，应当采用什么方法才能找到所需的信息呢？如果已经知道存放该信息的网点，那么只要在浏览器的地址（Location）框内键入该网点的URL和回车键，就可进入该网点。但是，若不知道要找的信息在何网点，那就要使用万维网的搜索工具。
    在万维网中用来进行搜索的工具叫做搜索引擎（search engine）。搜索引擎的种类很多，但大体上可划分为两大类，即全文检索搜索引擎和分类目录搜索引擎。
    全文检索搜索引擎是一种纯技术型的检索工具。它的工作原理是通过搜索软件（例如一种叫做“蜘蛛”或“网络机器人”的Spider程序）到因特网上的各网站收集信息，找到一个网站后可以从这个网站再链接到另一个网站，像蜘蛛爬行一样。然后按照一定的规律建立一个很大的在线数据库供用户查询。用户在查询时只要输入关键词，就从已经建立的索引数据库上进行查询（并不是实时地在因特网上检索到的信息）。因此很可能有些查到的信息已经是过时的。建立这种索引数据库的网站必须顶起对已建立的数据库进行更新维护。现在最出名的全文检索搜索引擎就是Google（谷歌）网站（www.google.com），它搜集的网页数量超过80亿个，图片超过10亿个，在整个搜索引擎市场中占有的份额超过50%。我们将在下一小节介绍Google搜索技术的特点。在中文搜索引擎中，最出名的是百度网站（www.baidu.com）。
    分类目录搜索引擎并不采集网站的任何信息，而是利用各网站想搜索引擎提交的网站信息时填写的关键词和网站描述等信息，经过人工审核编辑后，如果认为符合网站登录的条件，则输入到分类目录的数据库中，供网上用户查询。因此，分类目录搜索也叫做分类网站搜索。分类目录的好处就是用户可根据网站设计好的目录有针对性地逐级查询所需要的信息，查询时不需要使用关键词，只需要按照分类（先找大类，再找下面的小类），因而查询的准确性较好。但分类目录查询的结果并不是具体的页面，而是被收录网站主页的URL地址，因而所得到的内容就比较有限。相比之下，全文检索可以检索出大量的信息（一次检索的结果是几百万条，甚至是千万条以上），但缺点是查询结果不够准确，往往是罗列出了海量的信息（如上千万和页面），使用户无法迅速找到所需的信息。在分类目录搜索引擎中最著名的信息（如上千万个页面），使用户无法迅速找到所需的信息。在分类目录搜索引擎中最著名的就是雅虎（www.yahoo.com）。国内著名的分类搜索引擎有雅虎中国（cn.yahoo.com）、新浪（www.sina.com）、搜狐（www.sohu.com）、网易（www.163.com）等。
    从用户的角度看，使用这两种不同的搜索引擎都能够自己查询信息的目的。但用户得到的信息的形式并不一样。全文检索搜索引擎往往可直接检索到相关内容的网页，但分类目录搜索引擎一般只能检索到相关信息的网站。为了使用户能够更加方便地搜索到有用信息，目前许多网站往往同时具有全文检索搜索和分类目录搜索的功能。在因特网上搜索信息需要经验的积累。要多实践才能掌握从因特网获取信息的技巧。
    值得注意的是，目前出现了垂直搜索引擎（Vertical Search Engine），它针对某一特定领域、特定人群或某一特定需求提供搜索服务。垂直搜索也是提供关键字来进行搜索的，但被放到了一个行业知识的上下文中，返回的结果更倾向于信息、消息、条目等。例如，对买房的人讲，他希望查找的是房子的具体供求信息（如面积、地点、价格等），而不是有关房子供求的一般性的论文或新闻、政策等。目前热门的垂直搜索行业有：购物、旅游、汽车、求值、房产、交友等行业。还有一种元搜索引擎（Meta Search Engine），它把用户提交的检所请求发送到多个独立的搜索引擎上去搜索，并把检索结果集中统一处理，以统一的格式提供给用户，因此是搜索引擎之上的搜索引擎。他的主要精力放在提高搜索速度、智能化处理搜索结果、个性化搜索功能的设置和用户检索界面的友好性上。元搜索引擎的查全率和查准率都比较高。
    2.Google搜索技术的特点
    Google的搜索引擎性能优良，因为它使用了先进的硬件和软件。以往的大多数的搜索引擎是使用少量大型服务器。在访问高峰期，搜索的速度就会明显减慢。Google则利用在因特网上相互链接的PC机来快速查找每个搜索的答案，并且成功地缩短了查找的相应时间。Google的搜索软件可同时进行许多运算，它的核心技术就是PageRank，译为网页排名。
    PageRank对搜索出来的结果按重要性进行排序，这是Google的两个创始人Larry Page和Sergey Brin共同开发出来的[W-GOOGLE]。由于用户在有限的时间内，不可能阅读全部的搜索结果（因为数量往往非常大），而通常仅仅是查询一下前几个（或前几十个）项目。因此用户希望检索结果能够按重要性来排序。但怎样确定某个页面的重要性呢？传统的搜索引擎往往是检查关键字在网页上出现的频率。PageRank技术则把整个互联网当做了一个整体对待，检查整个网络链接的结构，并确定哪些网页重要性最高。更具体些，就是如果有很多网站上的连接都指向页面A，那么页面A就比较重要。PageRank对连接的数目进行加权统计。对来自重要网站的链接，其权重也较大。统计链接数目的问题是一个二维矩阵相乘的问题，从理论上讲，这种二维矩阵有网页数目平方之多个元素。对于1亿个网页，这个矩阵就有1亿亿个元素。这样大的矩阵相乘，计算量是非常大的。Larry Page和Sergey Brin两人利用稀疏矩阵计算的技巧，大大的简化了计算量。他们用迭代的方法解决了这个问题。他们先假定所有网页的排名是相同的，并且根据此初始值，算出各个网页的第一次迭代排名，再根据第一次迭代排名算出第二次迭代排名。他们从理论上证明了不论初始值如何选取，这种算法都保证了网页排名的估计值能够收敛到排名的真实值。这种算法是完全没有任何人工干预，厂商不可能用金钱购买网页的排名。Google还要进行超文本匹配分析，以确定哪些网页与正在执行的特定搜索相关。在综合考虑整体重要性以及与特定查询的相关性之后，Google就把最相关、最可靠的搜索结果放在首位。
6.5电子邮件
    6.5.1电子邮件概述
    大家知道，实时通信的电话有两个严重缺点。第一，电话通信的主叫和被叫双方必须同时在场。第二，一些不是十分紧迫的电话也常常不必要地打断人们的工作或休息。
    电子邮件（e-mail）是因特网上使用最多的和最受用户欢迎的一种应用。电子邮件把邮件发送到收件人使用的邮件服务器，并放在其中的收件人邮箱（mail box）中，收件人可随时上网到自己使用的邮件服务器进行读取。这相当于因特网为用户设立了存放邮件的信箱，因此e-mail有时候也称为“电子信箱”。电子邮件不仅使用方便，而且还具有传递迅速和费用低廉的优点。具有的公司报道，使用电子邮件后可提高劳动生产率30%以上。现在电子邮件不仅可传送文字信息，而且还可附上声音和图像。由于电子邮件的广泛使用，现已很少有人愿意到邮电局去打电报，因为这种传统电报即贵又慢，且不够方便。
    1982年ARPANET的电子邮件标准问世，简单邮件传送协议SMTP（Simple Mail Transfer Protocol）和因特网文本报文格式，都是因特网的正式标准。
    由于因特网的SMTP只能传送可打印的7位ASCII码邮件，因此在1993年又提出了通用因特网邮件扩充MIME（Multipurpose Internet Mail Extensions）。1996年经修订后成为因特网的草案标准。MIME在其首部中说明了邮件的数据类型（如文本、声音、图像、视像等）。在MIME邮件中可同时传送多种类型的数据。这在多媒体通信的环境下是非常有用的。
    在2001年4月，电子邮件的两个重要标准RFC 821和RFC 822在经过多次修订后，终于形成了新的文档RFC 2821和RFC 2822，而原来RFC 821和RFC 822就变成陈旧的。
    一个电子邮件系统应具有图所示的三个主要组成构件，这就是用户代理、邮件服务器，以及邮件发送协议（如SMTP）和邮件读取协议（如POP3）。POP3是邮局协议（Post Office Protocol）的版本3。
    用户代理UA（User Agent）就是用户与电子邮件系统的接口，在大多数情况下它就是运行在用户PC机中的一个程序。因此用户代理又称为电子邮件客户端软件。用户代理向用户提供一个很友好的接口（目前主要是用窗口界面）来发送和接收邮件。现在可供大家选择的用户代理有很多种。例如，微软公司的Outlook Express和我国张小龙制作的Foxmail，都是很受欢迎的电子邮件用户代理。
    用户代理至少应当具有以下四个功能：
    （1）撰写。给用户提供编辑信件的环境。例如，应让用户能创建便于使用的通讯录（有常用的人名和地址）。回信时不仅能很方便地从来信中提取出对方地址，并自动地将此地址写入到邮件中合适的位置，而且还能方便地对来信提出的问题进行答复（系统自动将来信复制一份在用户撰写回信的窗口中，因而用户不需要再输入来信中的问题）。
    （2）显示。能方便地在计算机屏幕上显示出来信（包括来信附上的声音和图像）。
    （3）处理。处理包括发送邮件和接收邮件。收件人应能根据情况按不同方式对来信进行处理。例如，阅读后删除、存盘、打印、转发等，以及自建目录对来信进行分类保存。有时还可在读取信件之前先查看一下邮件的发件人和长度等，对于不愿收的新建可直接在邮箱中删除。
    （4）通信。发信人在撰写完邮件后，要利用邮件发送协议发送到用户所使用的邮件服务器。收件人在接收邮件时，要使用邮件读取协议从本地邮件服务器接收邮件。
    因特网上有许多的邮件服务器可供用户选用（有些要收取少量的邮箱费用）。邮件服务器24小时不间断地工作，并且具有很大容量的邮件信箱。邮件服务器的功能是发送和接收邮件，同时还要向发件人报告邮件传送的结果（已交付、被拒绝、丢失等）。邮件服务器按照客户服务器方式工作。邮件服务器需要使用两种不同的协议。一种协议用于用户代理向邮件服务器发送邮件或邮件服务器之间发送邮件，如SMTP协议，而另一种协议用于用户代理从邮件服务器读取邮件，如邮局协议POP3。
    这里应当注意，邮件服务器必须能够同时充当客户和服务器。例如，当邮件服务器A向另一个邮件服务器B发送邮件时，A就作为SMTP客户，而B是SMTP服务器。反之，当B向A发送邮件时，B就是SMTP客户，而A就是SMTP服务器。
    图给出了PC即之间发送和接收电子邮件的几个重要步骤。请注意，SMTP和POP3（或IMAP）都是在TCP连接上面传送邮件，使用TCP的目的是为了使邮件的传送称为可靠的。
        1.发件人调用PC机中的用户代理撰写和编辑要发送的邮件。
        2.发件人点击屏幕上“发送邮件”的按钮，把发送邮件的工作全部交给用户代理来完成。用户代理把邮件用SMTP协议发给发送方邮件服务器，用户代理充当SMTP客户，而发送方邮件服务器充当SMTP服务器。用户代理所进行的这些工作，用户是看不到的。有的用户代理可以让用户在屏幕上看见邮件发送的进度显示。
        3.SMTP服务器收到用户代理发来的邮件后，就把邮件临时存放在邮件缓存队列中，等待发送到接收方的邮件服务器（等待时间的长短取决于邮件服务器的处理能力和队列中待发送的信件的数量。但这种等待时间一般都远远大于分组在路由器中等待转发的排队时间）。
        4.发送方邮件服务器的SMTP客户与接收方邮件服务器的SMTP服务器建立TCP连接，然后就把邮件缓存队列中的邮件依次发送出去。请注意，邮件不会再因特网中国的某个中间邮件服务器落地。如果SMTP客户还有一些邮件要发送到同一个邮件服务器，那么可以在原来已建立的TCP连接上重复发送。如果SMTP客户无法和SMTP服务器建立TCP连接（例如，接收方服务器过负荷或出了故障），那么要发送的邮件就会继续保存在发送方的邮件服务器中，并在稍后一段时间再进行新的尝试。如果SMTP客户超过了规定的时间还不能把邮件发送出去，那么发送邮件服务器就把这种陪你过情况通知用户代理。
        5.运行在接收方邮件服务器中的SMTP服务器进程收到邮件后，把邮件放入收件人的用户邮箱中，等待收件人进行读取。
        6.收件人在打算收信时，就运行PC机中的影虎代理，使用POP3（或IMAP）协议读取发送给自己的邮件。请注意，在图中，POP3服务器合POP3客户之间的箭头表示是邮件传送的方向。但它们之间的听信是由POP3客户发起的。
    请注意这里有两种不同的通信方式。一种是“推”（push）：SMTP客户把邮件“推”给SNTP服务器。另一种是“拉”（pull）：POP3客户把邮件从POP3服务器 "拉"过来。细心的读者可能会想到这些的问题L如果让图中的邮件服务器程序就在发送方和接收方的PC机中运行，那么岂不是可以直接把邮件发送到接收人的PC机中？
    答案是"不行"。这是因为并非所有的计算机都能运行邮件服务器程序。有些计算机可能没有足够的存储器来运行允许程序在后台运行的操作系统，或是可能没有足够的CPU能力来运行邮件服务器程序。更重要的是，邮件服务器程序必须不间断地运行，每天24小时都必须不间断地连接在因特网上，否则就可能使很多外面发来的邮件无法接收。这样看来，让用户的PC机运行邮件服务器程序显然是很不现实的（一般用户在不使用PC机时就将机器关闭）。让来信暂时存储在用户的邮件服务器中，而当用户方便时就从邮件服务器的用户信箱中读取来信，则是一种比较合理的做法。在Foxmail中使用一种“特快专递”服务。这种服务就是从发件人的用户代理直接利用SMTP把邮件发送到接收方邮件服务器。这就加快了邮件的交付（省去发送方邮件服务器中的排队等待时间）。但这种“特快专递”和邮政的EMS直接把邮件送到用户家中不同，它并没有把邮件直接发送到收件人的PC机中。但有些邮件服务器为了防止垃圾邮件和计算机病毒，拒绝接收从一般用户直接发来的邮件。
    电子邮件由信封（envelope）和内容（content）两部分组成。电子邮件的传输程序根据邮件信封上的信息来传送邮件。这与邮局按照信封上的信息投递信件是相似的。
    在邮件的信封上，最重要的就是收件人的地址。TCP/IP体系的电子邮件系统规定电子邮件地址（e-mail address）的格式如下：收件人邮箱名@邮箱所在主机的域名
    收件人邮箱名又简称为用户名（user name），是收件人自己定义的字符串标识符。但应注意，标志收件人邮箱名的字符串在邮箱所在邮件服务器的计算机中必须是唯一的。这样就保证了这个电子邮件地址在世界范围内是唯一的。这对保证电子邮件能够在整个因特网范围内的准确交付是十分重要的。电子邮件的用户一般采用容易记忆的字符串。
    6.5.2简单邮件传送协议SMTP
    下面介绍SMTP的一些主要特点。
    SMTP规定了在两个相互通信的SMTP进程之间应如何交换信息。由于SMTP使用客户服务器方式，因此负责发送邮件的SMTP进程就是SMTP客户，而负责接收永健的SMTP进程就是SMTP服务器。至于邮件内部的格式，邮件如何存储，以及邮件系统应以多块的速度来发送邮件，SMTP也都未做出规定。
    SMTP规定了14条命令和21种应答信息。每条命令用4个字母组成，而每一种永达信息一般只有一行信息，由一个3位数字的代码开始，后面附上（也可不附上）很简单的文字说明。下面通过发送方和接收方的邮件服务器之间的SMTP通信的三个阶段介绍几个最主要的命令和相应信息。
    1.连接建立
    发件人的邮件送到发送方邮件服务器的邮件缓存后，SMTP客户就每隔一定时间（例如30分钟）对邮件缓存扫描一次。如发现有邮件，就使用SMTP的熟知端口号吗（25）与接收方邮件服务器的SMTP服务器建立TCP连接。在连接建立后，接收方SMTP服务器要发出“220 Service ready”（服务就绪）。然后SMTP客户向SMTP服务器发送HRLO命令，附上发送方的主机名。SMTP服务器若有能力接收邮件，则回答：“250 OK”，表示已准备好接收。若SMTP服务器不可用，则回答“421 Service not available”（服务器不可用）。
    如在一定时间内（例如三天）发送不了邮件，邮件服务器会把这个情况通知发件人。
    SMTP不使用中间的邮件服务器。不管发送方和接收方的邮件服务器相隔有多远，不管在邮件的传送过程中要经过多少个路由器，TCP连接总是在发送方和接收方这两个邮件服务器之间直接建立。当接收方邮件服务器出故障而不能工作时，发送方邮件服务器只能等待一段时间后再尝试和该邮件服务器建立TCP连接，而不能先找一个中间的邮件服务取为I建立TCP连接。
    2.邮件传送
    邮件的传送从MAIL命令开始。MAIL命令后面又发件人的地址。如：MAIL FROM：<xiexiren@tsinghua.org.cn>。若SMTP服务器已准备好接收邮件，则回答“250 OK”。否则，返回一个代码，指出原因。如451（处理时出错），452（存储空间不够），500（命令无法识别）等。
    下面跟着一个或多个RCPT命令，取决于把同一个邮件发送给一个或多个收件人，其格式为RCPT TO：<收件人地址>。RCPT是recipient（收件人）的缩写。每发送一个RCPT命令。都应当有相应的信息从SMTP服务器返回，如：“250 OK”，表示指明的邮箱在接收方的系统中。或“550 No such user here”（无此用户），即不存在此邮箱。
    RCPT命令的作用就是：先弄清接收方系统是否已做好接受邮件的准备，然后才发送邮件。这样做是为了避免浪费通信资源，不致于发送了很长的邮件以后才知道是因地质错误。
    在下面就是DATA命令，表示要开始传送邮件的内容了。SMTP服务器返回的信息是：“354 Start mail input；end with <CRLF>.<CRLF>”。这里<CRLF>是“回车换行”的意思。若不能接受邮件，则返回421（服务器不可用），500（命令无法识别）等。接着SMTP客户就发送邮件的内容。发送完毕后，再发送<CRLF>.<CRLF>（两个回车换行中间用一个点隔开）表示邮件内容结束。实际上在服务器端看到的可打印字符只是一个英文的句点。若邮件收到了，则SMTP服务器返回信息“250 OK”，或返回差错代码。
    虽然SMTP使用TCP连接试图使邮件的传送可靠，但它并不能保证不丢失邮件。也就是说，使用SMTP传送邮件只能说可以可靠地传送到接收方的邮件服务器。再往后的情况如何就不知道了。接收方的邮件服务器也许会出故障，使收到的邮件全部丢失（在收件人读取信件之前）。然而基于SMTP的电子邮件通常都被认为是可靠的。
    3.连接释放
    邮件发送完毕后，SMTP客户应发送QUIT命令。SMTP服务器返回的信息是“221 （服务关闭）”，表示SMTP同意释放TCP连接。邮件传送的全部过程即结束。
    这里再强调一下，使用电子邮件的用户看不见以上这些过程，所有这些复杂过程都被电子邮件的用户代理屏蔽了。
    6.5.3电子邮件的信息格式
    一个电子邮件分为信封和内容两大部分。在RFC 2822文档中只规定了邮件内容中的首部（header）格式，而对邮件的主体（body）部分则让用户自由撰写。用户写好首部后，邮件系统自动地将信封所需的信息提取出来并写在信封上。所以用户不需要填写电子邮件信封上的信息。
    邮件内容首部包括一些关键字，后面加上冒号。最重要的关键字是：To和Subject。
    “To：”后面填入一个或多个收件人的电子邮件地址。在电子邮件软件中，用户把经常同系你的对象姓名和电子邮件地址写到地址簿（address book）中。当撰写邮件时，只需打开地址簿，点击收件人名字，收件人的电子邮件地址就会自动地填入到合适的位置上。
    “Subject：”是邮件的主题。它反映了邮件的主要内容。主题类似于文件系统的文件名，便于用户查找邮件。
    邮件首部还有一项是抄送“CC：”。这两个字符来自“Carbon copy”，意思是留下一个“复写副本”。这是借用旧的名词，表示应给某某人发送一个邮件副本。
    有些邮件系统允许用户使用关键字Bcc（Blind carbon copy）来实现盲复写副本。这是使发件人能将邮件的副本送给某人，但不希望此事为收件人知道。Bcc又称为暗送。
    首部关键字还有“From”和“Date”，表示发件人的电子邮件地址和发信日期。这两项一般都由邮件系统自动填入。
    另一个关键字是“Reply-To”，即对方回信所用的地址。这个地址可以与发件人发信时所用的地址不同。例如有时到外地借用他人的邮箱给自己的朋友发送邮件，但仍希望对方将回信发送到自己的邮箱。这一项可以事先设置好，不需要再每次写信时进行设置。
    6.5.4邮件读取协议POP3和IMAP
    现在常用的邮件读取协议有两个，即邮局协议第3个版本POP3和网际报文存取协议IMAP（Internet Message Access Protocol）。现分别讨论如下。
    邮局协议POP是一个非常简单、但功能有限的邮件读取协议。邮局协议POP最初公布于1984年。经过几次的更新，现在使用的是1996年的版本POP3，它已成为因特网的正式标准。大多数的ISP都支持POP。POP3可简称为POP。
    POP也使用客户服务器的工作方式。在接受邮件的用户PC机中的用户代理必须运行POP客户程序，而在收件人所连接的ISP的邮件服务器中则运行POP服务器程序。当然，这个ISP的邮件服务器还必须运行SMTP服务器程序，以便接收发送方邮件服务器的SMTP客户程序发来的邮件。这些请参阅图。POP服务器只有在用户输入鉴别信息（用户名和口令）后，才允许对邮箱进行读取。
    POP3协议的一个特点就是只要用户从POP服务器读取了邮件，POP服务器就把该邮件删除。这在某些情况下就不够方便。例如，某用户在办公室的台式计算机上接受了一些邮件，还来不及写回信，就马上携带笔记本电脑出差。当他打开笔记本电脑写回信时，却无法再看到原先在办公室收到的邮件（除非他事先将这些邮件复制到笔记本电脑中）。为了解决这一问题，POP3进行了一些功能扩充，其中包括让用户能够事先设置邮件读取后仍然在POP服务器中存放的时间。目前RFC 2449还只是因特网建议标准。
    另一个读取邮件的协议是网际报文存取协议IMAP，它比POP3复杂得多。IMAP和POP都按客户服务器方式工作，但它们有很大的差别。现在较新的版本是2003年3月修订的版本4，即IMAP4，它目前还只是因特网的建议标准。
    在使用IMAP时，在用户的PC机上运行IMAP客户程序，然后与接收方的邮件服务器上的IMAP服务器程序建立TCP连接。用户在自己的PC机上就可以操纵邮件服务器的邮箱，就像在本地操纵一样，因此IMAP是一个联机协议。当用户PC机上的IMAP客户 程序打开IMAP服务器的邮箱时，用户就可看到邮件的首部。若用户需要打开某个邮件，则该邮件才传到用户的计算机上。用户可以根据需要为自己的邮箱创建便于分类管理的层次式的邮箱文件夹，并且能够将存放的邮件从某一个文件夹中移动到另一个文件夹中。用户也可按某种条件对邮件进行查找。在用户未发出删除邮件的命令之前，IMAP服务器邮箱中的邮件一直保存着。
    IMAP最大的好处就是用户可以在不同的地方使用不同的计算机（例如，使用办公室的计算机、或家中的计算机，或在外地使用笔记本计算机）随时上网阅读和处理自己的邮件。IMAP还允许收件人只读取邮件中的某一个部分。例如，收到了一个带有视像附件（此文件可能很大）的邮件，而用户使用的是无线上网，信道的传输速率很低。为了节省时间，可以先下载邮件的正文部分，待以后有时间再读取或下载这个很长的附件。
    IMAP的缺点是如果用户没有将邮件复制到自己的PC机上，则邮件一直是存放在IMAP服务器上。因此，用户需要经常与IMAP服务器建立连接（因为许多用户要考虑所花费的上网费）。
    最后再强调一下，不要把邮件读取协议POP或IMAP与邮件传送协议SMTP弄混。发件人的用户代理向发送方邮件服务器发送邮件，以及发送方邮件服务器向接收方邮件服务器发送邮件，都是使用SMTP协议。而POP或IMAP则是用户代理从接收方邮件服务器上读取邮件所使用的协议。
    6.5.5基于万维网的电子邮件
    在20世纪90年代中期，Hotmail引入了基于万维网的电子邮件。今天，几乎所有的著名网站以及大学或公司，都提供了基于万维网的电子邮件。现在已经有越来越多的用户使用基于万维网的电子邮件，也就是说，不管在什么地方（网吧。宾馆或朋友家中），只要能过上网，在打开万威望浏览器后，就可以收发电子邮件。这时，邮件系统中的用户代理就是普通的万威望浏览器（例如，微软公司的IE浏览器）。这对比较忙绿的用户显然是很方便的。
    假定用户A向网易网站申请了一个电子邮件地址aaa@163.com。当用户A需要发送或接收电子邮件时，他首先登录网易的电子邮件服务器（mail.163.com），在键入自己的用户名和密码后，就可以根据屏幕上的提示，撰写、发送或读取自己的电子邮件了。但是请注意，电子邮件从A的浏览器发送到网易的邮件服务器时，不是使用SMTP协议，而是使用HTTP协议。假定A发送的邮件的收件人是B，B使用新浪网站的邮箱，其邮件地址bbb@sina.com。于是A发送的邮件先从网易的邮件服务器（这时仍然是使用SMTP协议，而不是HTTP协议），发送到新浪的邮件服务器（mail.sina.com.cn）。但B用浏览器从新浪邮件服务器读取A发来的邮件时，是使用HTTP协议，而不是使用POP3或IMAP协议。以上特点如图所示。
    6.5.6通用因特网邮件扩充MIME
    1.MIME概述
    前面所述的电子邮件协议SMTP有以下缺点：
    （1）SMTP不能传送可执行文件或其他的二进制对象。人们曾试图将二进制文件转换为SMTP使用的ASCII文本，例如流行的UNIX  UUencode/UUdecode方案，但这些均未形成正式标准或事实上的标准。
    （2）SMTP限于传送7位的ASCII码。许多其他非英语国家的文字（如中文、俄文，甚至带重音符号的法文或德文）就无法传送。即使在SMTP网关将EBCDIC码（即扩充的二/十进制交换吗）转换为ASCII码时也会遇到一些麻烦。
    （3）SMTP服务器会拒绝超过一定长度的邮件。
    （4）某些SMTP的实现并没有完全按照SMTP的因特网标准。常见的问题如下：
        ·回车、换行的删除和增加；
        ·超过76个字符时的处理：截断或自动换行；
        ·后面多余空格的删除；
        ·将制表符tab转换为若干空格。
    于是在这种情况下就提出了通用因特网邮件扩充MIME。MIME并没有改动或取代SMTP。MIME的意图是继续使用目前的RFC 822格式，但增加了邮件主体的结构，并定义了传送非ASCII码的编码规则。也就是说，MIME邮件可在现有的电子邮件程序和协议下传送。图表示MIME和SMTP的关系。
    MIME主要包括一下三部分内容：
    （1）5个新的邮件首部字段，它们可包含在RFC 822首部中。这些字段提供了有关邮件主体的信息。
    （2）定义了许多邮件内容的格式，对多媒体电子邮件的表示方法进行了标准化。
    （3）定义了传送编码，可对任何内容格式进行转换，而不会被邮件系统改变。
    为适用于任意数据类型和表示，每个MIME报文包含告知收件人数据类型和使用编码的信息。MIME将增加的信息加入到RFC 822邮件首部中。下面是MIME增加的5个新的邮件首部的名称及其意义（有的可以是选项）。
    （1）MIME-Version：标志MIME的版本。现在的版本号是1.0。若无此行，则为英文文本。
    （2）Content-Description：这是可读字符串，说明此邮件主体是否是图像、音频或视频。
    （3）Content-Id：邮件的唯一标识符。
    （4）Content-Transfer-Encoding：在传送时的主题是如何编码的。
    （5）Content-Type：说明邮件主体的数据类型和子类型。
    上述的前三项的意思很清楚，因此下面只对后两项进行介绍。
    2.内容传送编码
    下面介绍三种常用的内容传送编码Conten-Transfer-Encoding。
    最简单的编码就是7位ASCII码，而每行不能超过1000个字符。MIME对这种由ASCII码构成的邮件主体不进行任何转换。
    另一种编码称为quoted-printable，这种编码方法适用于当所传送的数据中只有少量的非ASCII吗，例如汉字。这种编码方法的要点就是对于所有可打印的ASCII码，除特殊字符等号“=”外，都不改变。等号“=”和不可打印的ASCII码以及非ASCII码的数据的编码方法是：先将每个字节的二进制代码用两个十六进制数字表示，然后在前面再加上一个等号“=”。例如，汉字的“系统”的二进制编码是：11001111  10110101  11001101  10110011（共有32位，但这四个字节都不是ASCII码），其十六进制数字表示为：CFB5CDB3。用quoted-printable编码表示为：=CF=B5=CD=B3，这个12个字符都是可打印为ASCII字符，他们的二进制编码需要96位，和原来的32位相比，开销达200%。而等号“=”的二进制代码为00111101，即十六进制的3D，因此等号“=”的quoted-printable编码为“=3D”。
    对于任意的二进制文件，可用base64编码。这种编码方法是先把二进制代码划分为一个个24位长的单元，然后把每一个24位单元划分为4个6位组。每一个6位组按以下方法转换成ASCII码。6位的二进制代码共有64种不同的值，从0到63.用A表示0，用B表示1，等等。26个大写字母排列完毕后，接下去再排26个小写字母，在后面是10个数字，最后用+表示62，而用/表示63.再用两个连在一起的等号“==”和一个等号“=”分别表示最后一组的代码只有8位或16位。回车和换行都忽略，他们可在任何地方插入。
        下面是一个base64编码的例子：
            24位二进制代码        01001001  00110001  01111001
            划分为4个6位组        010010  010011  000101  111001
            对应的base64编码       S   T   F   5
            用ASCII编码发送        01010011  01010100  01000110  00110101
        不难看出，24位的二进制代码采用base64编码后变成了32位，开销为25%。
    3.内容类型
    MIME标准规定Content-Type说明必须含有两个标识符，即内容类型（type）和子类型（subtype），中间用“/”分开。
    MIME标准定义了7个基本内容类型和15种子类型。除了内容类型和子类型，MIME允许发件人和收件人自己定义专用的内容类型。但为避免可能出现名字冲突，标准要求位专用的内容类型选择的名字要以字符串X-开始。表列出了7种内容类型和15中子类型，以及简单的说明。
        |内容类型           |子类型        |说明                         |
        ----------------------------------------------------------------
        |Text（文本）       |plain        |无格式的文本                  |
        |                  |richtext     |有少量格式命令的文本           |
        ----------------------------------------------------------------
        |Image（图像）      |git          |GIF格式的静止图像              |
        |                  |jpeg         |JPEG格式的静止图像             |
        ----------------------------------------------------------------
        |Audio（音频）      |basic        |可听见的声音                  |
        ----------------------------------------------------------------
        |Video（视频）      |mpeg         |MPEG格式的影片                |
        ----------------------------------------------------------------
        |Application（应用）|octet-stream |不间断的字节序列               |
        |                  |postscript   |PostScript可打印文档           |
        -----------------------------------------------------------------
        |Message（报文）    |rfc822       |MIME RFC 822邮件              |
        |                  |partial      |为传输把邮件分割开              |
        |                  |external-body|邮件必须从网上获取              |
        -----------------------------------------------------------------
        |multipart（多部分）|mixed        |按规定顺序的几个独立部分         |
        |                  |alternative  |不同格式的同一邮件              |
        |                  |parallel     |必须同时读取的几个部分           |
        |                  |digest       |每一个部分是一个完整的RFC 822邮件|
    MIME的内容类型中的multipart是很有用的，因为它使邮件增加了相当大的灵活性。MIME标准为multipart定义了四种可能的子类型，每个子类型都提供重要功能。
    （1）mixed子类型允许单个报文含有多个相互独立的子报文，每个子报文可有自己的类型和编码。mixed子类型报文使用户能够在单个报文中附上文本、图形和声音，或者用额外数据段发送一个备忘录，类似商业信笺含有的附件。在mixed后面还要用到一个关键字，即Boundary=，此关键字定义了分隔报文各部分所用的字符串（由邮件系统定义），只要在邮件的内容中不会出现这样的字符串即可。当某一行以两个连字符“--”开始，后面紧跟上述的字符串，就表示下面开始了另一个子报文。
    （2）alternative子类型允许单个报文含有同一数据的多种表示。当给多个使用不同硬件和软件系统的收件人发送备忘录时，这种类型的multipart报文很有用。例如，用户可同时用普通的ASCII文本和格式化的形式发送文本，从而允许拥有图性功能的计算机用户在察看图形时选择格式化的形式。
    （3）parallel子类型允许单个报文含有可同时显示的各个子部分（例如，图像和声音子部分必须一起播放）。
    （4）digest子类型允许单个报文含有一组其他报文（如从讨论中收集电子邮件报文）。
    下面显示了一个MIME邮件，它包含有一个简单解释的文本和含有非文本信息的照片。邮件中第一部分的注解说明第二部分含有一张照片。
        From：xiexiren@tsinghua.org.cn
        To：xyz@public.bta.net.cn
        MIME-Version：1.0
        Content-Type：multipart/mixed；boundary=qwertyuiop

        --qwertyuiop
        XYZ：
            你要的图片在此邮件中，收到后请回信。
                                            谢希仁
        --qwertyuiop
        Content-Type：image/gif
        Content-Transfer-Encoding：base64
        …data for the image（图像的数据）…
        --qwertyuiop--
    上面最后一行表示boundary的字符串后面还有另个连字符“--”，表示整个multipart的结束。
6.6动态主机配置协议DHCP
    为了把协议软件做成通用的和便于移植，协议软件的编写者不会把所有的细节都固定在源代码中。相反，他们把协议软件参数化。这就使得在很多台计算机上有可能使用同一个经过编译的二进制代码。一代计算机和另一台计算机的许多区别，都可以通过一些不同的参数来体现。在协议软件运行之前，必须给每一个参数赋值。
    在协议软件中给这些参数赋值的动作叫做协议配置。一个协议软件在使用之前必须是已正确配置的。具体的配置信息有哪些则取决于协议栈。例如，连接到因特网的计算机的协议软件需要配置的项目包括：
    （1）IP地址；
    （2）子网掩码；
    （3）默认路由器的IP地址；
    （4）域名服务器的IP地址。
    这些信息通常存储在一个配置文件中，计算机在引导过程中可以对这个文件进行存取。但是，对于一个无盘工作站或一个有盘的计算机在第一次引导时应如何处理呢？
    在无盘计算机的情况下，操作系统和联网软件可以存储在只读存储器（ROM）中。但是制造厂家并不知道IP地址等信息，这些信息取决于该机器所连接到的网络。因此这些信息不能存储在ROM中。
    还有一种情况，就是计算机可能经常改变在网络上的位置（尤其是便携式计算机的大量使用，有时在家中上网），用人工进行协议配置既不方便，又容易出错。因此，需要采用自动协议配置的方法。
    因特网曾使用过一种引导程序协议BOOTP，它需要用人工进行协议配置，因此BOOTP被淘汰了。现在广泛使用是动态主机配置协议DHCP（Dynamic Host Configuration Protocol），它提供了一种机制，称为即插即用联网（plug-and-play networking）。这种机制允许一台计算机加入新的网络和获取IP地址而不用手工参与。DHCP最新的RFC 文档是1997年的RFC2131和RFC 2132，目前还是因特网草案的标准。最近几年陆续公布了一些对RFC 2131更新的RFC文档（如RFC 3396，3442等），但没有把RFC 2131划归陈旧的。
    DHCP对运行客户软件和服务器软件的计算机都适用。当运行客户软件的计算机移至一个新的网络时，就可使用DHCP获得其配置信息而不需要手工干预。DHCP给运行服务器软件而位置固定的计算机指派一个永久地址，而当这计算机重新启动时其地址不改变。
    DHCP使用客户服务器方式。需要IP地址的主机在启动时就向DHCP服务器广播发送发现报文（DHCPDISCOVER）（将目的IP地址置为全1，即255.255.255.255），这时该主机就成为DHCP客户。发送广播报文是因为现在还不知道DHCP服务器在什么地方，因此要发现（DISCOVER）DHCP服务器的IP地址。这个主机目前还没有自己的IP地址，因此它将IP数据报的源IP地址设为全0.这样，在本地网络上的所有主机都能够收到这个广播报文，但只有DHCP服务器才对此广播报文进行回答。DHCP服务器先在其数据库中查找该计算机的配置信息。若找到，则返回站到的信息。若找不到，则从服务器的IP地址池（address pool）中取一个地址分配给该计算机。DHCN服务器的回答报文叫做提供报文（DHCPOFFER），表示“提供”了IP地址等配置信息。
    但是我们并不愿意在每一个网络上都设置一个DHCP服务器，因为这样会是DHCP服务器的数量太多。因此现在是使每一个网络至少有一个DHCP中继代理（relay agent）（通常是一台路由器），它配置了DHCP服务器的IP地址信息。当DHCP中继代理收到主机A以广播形式发送的发现报文后，就以单播方式向DHCP服务器转发报文，并等待其回答。收到DHCP服务器回答的提供报文后，DHCP中继代理再把提供报文发回给主机A。需要注意的是，图是个示意图。实际上，DHCP报文只是UDP用户数据报的数据，它还要加上UDP首部、IP数据报首部，以及以太网的MAC帧的首部和尾部后，才能在链路上传送。
    DHCP服务器分配给DHCP客户的IP地址是临时的，因此DHCP客户只能在一段有限的时间内使用这个分配到的IP地址。DHCP协议称这段时间为租用期（lease period），但并没有具体规定租用期应取为多长或至少为多长，这个数值应由DHCP服务器自己决定。例如，一个校园网的DHCP服务器可将租用期设定为1小时。DHCP服务器在给DHCP发送的提供报文的选项中给出租用期的数值。按照 RFC1533 的规定，租用期用4字节的二进制数字表示，单位是秒。因此可供选择的租用期范围从1秒到136年。DHCP客户也可在自己发送的报文中（例如，发现报文）提出对租用期的要求。
    DHCP的详细工作过程见图所示。DHCP客户使用的UDP端口是68，而DHCP服务器使用的UDP端口是67.这两个UDP端口都是熟知端口。
        1）DHCP服务器被动打开UDP端口67，等待客户端发来的报文。
        2）DHCP客户从UDP端口68发送DHCP发现报文。
        3）凡收到DHCP发现报文的DHCP服务器都发出DHCP提供报文，因此DHCP客户可能收到多个DHCP提供报文。
        4）DHCP客户从几个DHCP服务器中选择其中的一个，并向所选择的DHCP服务器发送DHCP请求报文。
        5）被选择的DHCP服务器发送确认报文DHCPACK。从这时起，DHCP客户就可以使用这个IP地址了。这种状态叫做已绑定状态，因为在DHCP客户端的IP地址和硬件地址已经完成绑定，并且可以开始使用得到的临时IP地址了。
            DHCP客户现在要根据服务器提供的租用期T设置两个计时器T1和T2，它们的超时时间分别是0.5T和0.875T。当超时时间到就要请求更新租用期。
        6）租用期过了一半（T1时间到），DHCP发送请求报文DHCPREQUEST要求更新租用期。
        7）DHCP服务器若同意，则发回确认报文DHCPACK。DHCP客户得到了新的租用期重新设置计时器。
        8）DHCP服务器若不同意，则发回否认报文DHCPNACK。这时DHCP客户必须立即停止使用原来的IP地址，而必须重新申请地址（回到步骤2）。
            若DHCP服务器不响应步骤6的请求报文DHCPREQUEST，则在租用期过了87.5%时（T2时间到），DHCP客户必须重新发送请求报文DHCPREQUEST（重复步骤6），然后又继续后面的步骤。
        9）DHCP客户可随时提前终止服务器所提供的租用期，这时只需向DHCP服务器发送释放报文DHCPRELEASE即可。
    DHCP很适合与经常移动位置的计算机。当计算机使用Windows操作系统时，若点击控制面板的网络图标就可以找到某个连接中的“网络”下面的菜单，找到TCP/IP协议后点击其“属性”按钮，若选择“自动获得IP地址”和“自动获得DNS服务器地址”，就表示是使用DHCP协议。
6.7简单网络管理协议SNMP
    6.7.1网络管理的基本概念
    虽然网络管理还没有精确定义，但它的内容可归纳为：
    网络管理包括对硬件、软件和人力的使用、综合与协调，以便对网络资源进行监视、测试、配置、分析、评价和控制，这样就能以合理的价格满足的一些需求，如实时运行性能、服务质量等。网络管理常简称为网管。
    我们可以看到，网络管理并不是指对网络进行行政上的管理。
    网络是一个非常复杂的分布式系统。这是因为网络上有很多不同厂家生产的、运行着多种协议的结点（主要是路由器），而这些结点还在相互通信和交换信息。网络的状态总是不断地变化着。可见，我们必须使用一种机制来读取这些结点上的状态信息，有时还要把一些新的状态信息写入这些结点上。
    下面简单介绍网络管理模型中的主要构件。
    管理站又称为管理器，是整个网络管理系统的核心，它通常是个有着良好图形界面的高性能的工作站，并由网络管理员直接操作和控制。所有向被管设备发送的命令都是从管理站发出的。管理站的所在部门也常称为网络运行中心NOC（Network Operations Center）。管理站中的关键构件是管理程序。管理程序在运行时就成为管理进程。管理站（硬件）或管理程序（软件）都可称为管理者（manager）或管理器，所以这里的manager不是指人而是指机器或软件。网络管理员（administrator）才是指人。大型网络往往实行多级管理，因而有多个管理者，而一个管理者一般只管理本地网络的设备。
    在被管网络中有很多的被管设备（包括设备中的软件）。被管设备可以是主机、路由器、打印机、集线器、网桥或调制解调器等。在每一个被管设备中可能有许多被管对象（Managed Object）。被管对象可以是被管设备中的某个硬件（例如，一块网络接口卡），也可以是某些硬件或软件（例如，路由选择协议）的配置参数的集合。被管设备有时可称为网络元素或简称为网元。在被管设备中也会有一些不能被管的对象（在下面的6.7.2节将会讲到对象命名树，所谓不能被管的对象就是不在对象命名树上的对象）。
    在每一个被管设备中都要运行一个程序以便和管理站中的管理程序进行通信。这些运行着的程序叫做网络管理代理程序，或简称为代理（agent）。代理程序在管理程序的命令和控制下在被管设备上采取本地的行动。
    在图中还有一个重要构建就是网络管理协议，简称为网管协议。后面还要讨论它的作用。
    简单网络管理协议SNMP（Simple Network Management Protocol）中的管理程序和代理程序按客户服务器方式工作。管理程序运行SNMP客户程序，而代理程序运行SNMP服务器程序。在被管对象上运行的SNMP服务器程序不停地监听来自管理站的SNMP客户程序的请求（或命令）。一旦发现了，就立即返回管理站所需的信息，或执行某个动作（例如，把某个参数的设置进行更新）。在网管系统中往往是一个（或少数几个）客户程序与很多的服务器程序进行交互。
    关于网络管理有一个基本原理，这就是：
    若要管理某个对象，就必然会给该对象添加一些软件或硬件，但这种“添加”必须对原有对象的影响尽量小些。
    SNMP正是按照这样的基本原理来设计的。
    SNMP发布于1988年。OSI虽然在这之前就已制定出许多的网络管理标准，但当时（到现在也很少）却没有符合OSI网关标准的产品。SNMP最重要的指导思想就是要尽可能简单。SNMP的基本功能包括监视网络性能、监测分析网络差错和配置网络设备等。在网络正常工作时，SNMP可实现统计、配置和测试等功能。当网络出故障时，可实现各种差错检测和恢复功能。经过近二十年的使用，SNMP不断修订完善，现在的版本是SNMPv3，而前两个版本分别是SNMPv2和SNMPv1。但一般可简称为SNMP。现在SNMPv3已成为因特网的正式标准（STD 62）。SNMPv3最大的改进就是安全特性。也就是说，只有被授权的人员才有资格执行网络管理的功能（如关闭某一条链路）和读取有关网络管理的信息（如读取一个配置文件的内容）。然而SNMP协议已相当庞大，一点也不“简单”，整个标准共有八个RFC 文档。因此这里只能给出一些最基本的概念。
    若网路元素使用的不是SNMP协议而是另一种网络管理协议，那么SNMP协议就无法控制该网络元素。这时可使用委托代理（proxy agent）。委托代理能提供如协议转换和过滤操作等功能对被管对象进行管理。
    SNMP的网络管理由三个部分组成，即SNMP本身、管理信息结构SMI（Structure of Management Information）和管理信息库MIB（Management Information Base）。下面简述这三部分的作用。
    SNMP定义了管理站和代理之间所交换的分组格式。所交换的分组包含各代理中的对象（变量）名及其状态（值）。SNMP负责读取和改变这些数值。
    SMI定义了命名对象和定义对象类型（包括范围和长度）的通用规则，以及把对象和对象的值进行编码的规则。这样做是为了确保网络管理数据和语法和语义的无二义性。但从SMI的名称并不能看出它的功能。请注意，SMI并不定义一个实体应管理的对象数目，也不定义被管对象名以及对象名及其值之间的关联。
    MIB在被管理的试题中创建了命名对象，并规定了其类型。
    为了更好地理解上述的几个组成部分，可以把它们和程序设计进行一下对比。
    我们在编程时要使用某种语言，而这种语言就是用来定义编程的规则。例如，一个变量名必须从字母开始而后面接着是字母数字。在网络管理中，这些规则由SMI来定义。
    在程序设计中必须对变量进行说明。例如，int counter，表示变量counter是整数类型。MIB在网络管理中就做这样的事情。MIB给每个对象命名，并定义对象的类型。
    在编程中的说明语句之后，程序需要写出一些语句用来存储变量的值，并在需要时改变这些变量的值。SNMP在网络管理中完成这些任务。SNMP按照SMI定义的规则，存储、改变和解释这些已由MIB说明对象的值。
    总之，SMI建立规则，MIB对变量进行说明，而SNMP完成网管的动作。
    下面就一一介绍上述的三个构件。
    6.7.2管理信息结构SMI
    管理信息结构SMI是SNMP的重要组成部分。现在用于描述SNMPv3的版本是RFC 2578~2580 定义的SMIv2（这种写法很容易使人弄混淆），原先的版本叫做SMIv1.根据6.7.1节所讲的，SMI的功能应当有三个，即规定：
        （1）被管对象应怎样命名；
        （2）用来存储被管对象的数据类型有哪些种；
        （3）在网络中传送的管理数据应如何编码。
    1.被管对象的命名
    SMI规定，所有的被管对象都必须处在对象命名树（object naming tree）上。图给出了对象命名树的一部分。对象命名树的根没有名字，它的下面又三个顶级对象，都是世界上著名的标准制定单位，即ITU-T（过去叫做CCITT）、ISO以及这两个组织的联合体，它们的标号分别是0到2.图中的对象名习惯上用英文小写表示。在ISO的下面的一个标号为3的节点是ISO认同的组织成员org。在其下面有一个美国国防部dod（Department of Defense）的子树（标号6），再下面就是internet（标号为1）。在只讨论internet中的对象时，可只画出internet以下的子树，并在internet节点旁边写上对象标识符1.3.6.1即可。
    在internet节点下面的标号为2的节点是mgmt（管理）。再下面只有一个节点，即管理信息库mib-2，其对象标识符1.3.6.1.2.1。在mib-2下面包含了所有被SNMP管理的对象（见下面6.7.3节的讨论）。
    2.被管对象的数据类型
    SMI使用基本的抽象语法技法1（即ISO制定的ASN.1）来定义数据类型，但又增加了一些新的定义。因此SMI既是ASN.1的子集，又是ASN.1 的超集。ASN.1的记法很严格，它使得数据的含义不存在任何可能的二义性。例如，使用ASN.1时不能简单地说“一个具有整数值的变量”，而必须说明该变量的准确格式和整数取值的范围。当网络中的计算机对数据项并不都使用相同的表示时，采用这种精确的记法就尤其重要。
    我们知道，任何数据都具有两种重要的属性，即值（value）与类型（type）。这里“值”是某个值集合中的一个元素，而“类型”则是值集合的名字。如果给定一种类型，则这种类型的一个值就是该类型的一个具体实例。
    SMI把数据类型分为两大类：简单类型和结构化类型。简单类型是最基本的，直接使用ASN.1定义的类型。表给出了最重要的几种简单类型。
        |类型             |大小 |说明                                         |
        |INTEGER          |4字节|在-2^31到2^31-1之间的整数                     |
        |Integer32        |4字节|和INTEGER相同                                |
        |Unsigned32       |4字节|在0到2^32-1之间的无符号数                     |
        |OCTET STRING     |可变 |不超过65535字节长的字符串                     |
        |OBJECT IDENTIFIER|可变 |对象标识符                                   |
        |IPAddress        |4字节|由4个整数组成的IP地址                         |
        |Counter32        |4字节|可从0增加到2^32的整数；当它到达最大值时就返回到0|
        |TimeTicks        |4字节|记录时间的计数值，以1/100秒为单位              |
        |BITS             |--   |比特串                                       |
        |Opaque           |可变 |不解释的串                                   |
    SMI定义了两种结构化数据类型，即sequence和sequence of。
    数据类型sequence类似于C语言中的struct或record，它是一些简单数据类型的组合（不一定要形同的类型）。而数据类型sequence of类似于C语言中的array，它是同样类型的简单数据类型的组合，或同样类型的sequence数据类型的组合。
    3.编码方法
    SMI使用ASN.1制定的基本编码规则BER（Basic Encoding Rule）进行数据的编码。BER指明了每种数据的类型和值。在发送端用BER编码，可把用ASN.1所表述的报文转换成唯一的比特序列。在接收端用BER进行解码，就可得到该比特序列所表示的ASN.1报文。
    初看起来，或许用两个字段就能表示类型和值。但由于表示值可能需要多个字节，因此还需要一个指出“要用多少字节表示值”的长度字段。因此ASN.1把所有的数据元素都表示为T-L-V三个字段组成的序列。T字段（Tag）定义数据的类型，L字段（Length）定义V字段的长度，而V字段（Value）定义数据的值。
    （1）T字段又叫做标记字段，占1字节。T字段比较复杂，因为它要定义的数据类型较多。T字段又再分为以下三个子字段：
        ·类别（2位）共四种：通用类（00），即ASN.1定义的类型；应用类（01），即SMI定义的类型；上下文类（10），即上下文所定义的类型；专用类（11），保留为特定厂商定义的类型。
        ·格式（1位）共两种，指出数据类型的种类：简单数据类型（0），结构化数据类型（1）。
        ·编号（5位）用来标志不同的数据类型。编号的范围一般为0~30。当编号大于30时，T字段就要扩展为多个字节（这种情况很少用到，可参考ITU-T X.209这里从略）。
        表是一些数据类型的T字段的编码。
        |数据类型              |类别|格式|编号  |T字段（二进制）|T字段（十六进制）|
        |INTEGER              |00  |0   |00010|00000010      |02              |
        |OCTET STRING         |00  |0   |00100|00000100      |04              |
        |OBJECT IDENTIFIER    |00  |0   |00110|00000110      |06              |
        |NULL                 |00  |0   |00101|00000101      |05              |
        |Sequence，sequence of|00   |1  |10000|00110000      |30              |
        |IPAddress            |01   |0  |00000|01000000      |40              |
        |Counter              |01   |0  |00001|01000001      |41              |
        |Gauge                |01   |0  |00010|01000010      |42              |
        |TimeTicks            |01   |0  |00011|01000011      |43              |
        |Opaque               |01   |0  |00100|01000100      |44              |
    （2）L字段又叫做长度字段（单字节或多字节）。当L字段为单字节时，其最高位为0，后面的7位定义V字段的长度。当L字段为多个字节时，其最高位为1，而后面的7位定义后续字节的字节数（用二进制整数表示）。这时，所有的后续字节并置起来的二进制整数定义V字段的长度。图给出了L字段的格式。
    （3）V字段又叫做值字段，用于定义数据元素的值。
    根据以上所述，我们给出两个用十六进制表示的编码例子。例如，INTEGER 15，根据表6-4，其T字段是02，再根据表6-3，INTEGER类型要用4字节编码。最后得出TLV编码为02  04  00  00  00  0F。又如IPAddress 192.1.2.3，IPAddress的T字段是40，V字段需要4字节表示，因此IPAddress 192.1.2.3的TLV编码时40  04  C0  01  02  03。
    TLV方法中的V字段还可嵌套其他数据元素的TLV字段，并可多重嵌套。
    6.7.3管理信息库MIB
    所谓“管理信息”就是指在因特网的网管框架中被管对象的集合。被管对象必须维持可供管理程序读写的若干控制和状态信息。这些被管对象构成了一个虚拟的信息存储器，所以才称为管理信息库MIB。管理程序就使用MIB中这些信息的值对网络进行管理（如读取或重新设置这些值）。只有在MIB中的对象才是SNMP所能够管理的。例如，路由器应当维持各网络接口的状态、入分组和出分组的流量、丢弃的分组和有差错的报文的统计信息，而调制解调器则应当维持发送和接收的字符数、码元传输速率和接受的呼叫等统计信息。因此在MIB中就必须有上面这样一些信息。
    我们再看一下图，可以找到节点mib-2下面的部分是MIB子树。表给出了节点mib-2所包含的前八个信息类别代表的意思（在后面还有还几个类别）。
        |类别               |标号 |所包含的信息            |
        |system             |（1）|主机或路由器的操作系统   |
        |interfaces         |（2）|各种网络接口            |
        |address translation|（3）|地址转换（例如，ARP映射）|
        |ip                 |（4）|IP软件                  |
        |icmp               |（5）|ICMP软件                |
        |tcp                |（6）|TCP软件                 |
        |udp                |（7）|UDP软件                 |
        |egp                |（8）|EGP软件                 |
    我们可以用个简单例子进一步说明MIB的意义。例如，从图可以看出，对象ip的标号是4.因此，所有与IP有关的对象都从前缀1.3.6.1.2.1.4开始。
    （1）在节点ip下面有个名为ipInReceives的MIB变量，表示收到的IP数据报数。这个变量的标号是3，变量的名字是：iso.org.dod.internet.mgmt.mib.ip.ipInReceives，而相应的数值表示是：1.3.6.1.2.1.4.3。
    （2）当SNMP在报文中使用MIB变量时，对于简单类型的变量，后缀0指具有该名字的变量的实例。因此，当这个变量出现在现在发送给路由器的报文中时，ipInReceuves的数值表示（即变量的一个实例）就是1.3.6.1.2.1.4.3.0。
    （3）请注意，对于分配一个MIB变量的数值或后缀是完全没有办法进行推算的，必须查找已发布的标准。
    上面所说的MIB对象命名树的大小并没有限制。下面给出若干MIB变量的例子，以便更好地理解MIB的意义。这里的“变量”是指特定对象的一个实例。
        |MIB变量        |所属类别   |意义                    |
        |sysUpTime      |system    |距上次重启动的时间       |
        |ifNumber       |interfaces|网络接口数               |
        |ifMtu          |interfaces|特定接口的最大传送单元MTU |
        |ipDefaultTTL   |ip        |IP在生存时间字段中使用的值|
        |ipForwDatagrams|ip        |转发的数据报数目         |
        |ipOutNoRoutes  |ip        |路由选择失败的数目       |
        |ipReasmOKs     |ip        |重装的数据报数目         |
        |ipFragOKs      |ip        |分片的数据报数目         |
        |ipRoutingTable |ip        |IP路由表                 |
        |icmpInEchos    |icmp      |收到的ICMP回送请求数目    |
        |tcpRtoMin      |tcp       |TCP允许的最小重传时间     |
        |tcpMaxConn     |tcp       |允许的最大TCP连接数目     |
        |tcpInSegs      |tcp       |已收到的TCP报文段数目     |
        |udpInDatagrams |udp       |已收到的UDP数据报数目     |
    上面列举的大多数项目的值可用一个整数来表示。但MIB也定义了更复杂的结构。例如MIB变量ipRoutingTable则定义了一个完整的路由表。还有其他一些MIB变量定义了路由表项目的内容，并允许网络管理协议访问路由器中的单个项目，包括前缀、地址掩码以及下一跳地址等。当然，MIB变量值给出了每个数据项的逻辑定义，而一个路由器使用的内部数据结构可能与MIB的定义不同。当一个查询到达路由器时，路由器上的代理软件负责MIB变量和路由器用于存储信息的数据结构之间的映射。
    6.7.4SNMP的协议数据单元和报文
    实际上，SNMP的操作只有两种基本的管理功能，即：
    （1）“读”操作，用Get报文来检测各被管对象的状况；
    （2）“写”操作，用Set报文来改变各被管对象的状况。
    SNMP的这些功能通过探寻操作来实现，即SNMP管理进程定时向被管理设备周期性地发送探寻信息。上述时间间隔可通过SNMP的管理信息库MIB来建立。探询的好处是：第一，可使系统相对简单；第二，能限制通过网络所产生的管理信息的通信量。但探寻管理协议不够灵活，而且所能管理的设备数目不能太多。探寻系统的开销也较大。如探寻频繁而并未得到有用的报告，则通信线路和计算机的CPU周期就被浪费了。
    但SNMP不是完全的探寻协议，它允许不经过询问就能发送某些信息。这种信息称为陷阱（trap），表示它能够捕捉“事件”。但这种陷阱信息的参数是受限制的。
    当被管对象的代理检测到有时间发生时，就检查其门限值。代理只向管理进程报告达到某些门限值的事件（这就叫做过滤）。这种方法的好处是：第一，仅在严重事件发生时才发送陷阱；第二，陷阱信息很简单且所需字节数很少。
    总之，使用探询（至少是周期性地）以维持对网络资源的实时监视，同时也采用陷阱机制报告特殊事件，使得SNMP成为一种有效的网络管理协议。
    SNMP使用无连接的UDP，因此在网络上传送SNMP报文的开销较小。但UDP是不保证可靠交付的。这里还要指出，SNMP使用UDP的方法有些特殊。在运行代理程序的服务器端用熟知端口161来接收Get或Set报文和发送响应报文（与熟知端口通信的客户端使用临时端口），但运行管理程序的客户端则使用熟知端口162来接收来自各代理的trap报文。SNMP现在共定义了如表所示的8种类型的协议数据单元，其中PDU编号为4的已经废弃了。在PDU编号后面使对应的T字段值（十六进制表示）。
        |PDU编号（T字段）|PDU名称|用途|
        |0（A0）|GetRequest|管理者从代理读取一个或一组变量的值|
        |1（A1）|GetNextRequest|管理者从代理读取MIB树上的下一个变量的值（即使不知道此变量名也行）。此操作可反复进行，特别是按顺序一一读取列表中的值很方便|
        |2（A2）|Response|代理向管理者或管理者向管理者发送对五种Request报文的响应，并提供差错码、差错状态等信息|
        |3（A3）|SetRequest|管理者对代理的一个或多个MIB变量的值进行设置|
        |5（A5）|GetBulkRequest|管理者从代理读取大数据块的值（如大的列表中的值）|
        |6（A6）|InforRequest|管理者从另一远程管理者读取该管理者控制的代理中的变量值|
        |7（A7）|SNMPv2Trap|代理向管理者报告代理中发生的异常事件|
        |8（A8）|Report|在管理者之间报告某些类型的差错，目前尚未定义|
    和大多数TCP/IP协议不一样，SNMP报文没有固定的字段。相反，他们使用标准ASN.1编码。因此，SNMP报文用人工进行编码和理解时都比较困难。为此，我们在图中用我们比较熟悉的方式给出了SNMPv1的报文格式。可以看出，一个SNMP报文共由四个部分组成，即版本、首部、安全参数和SNMP报文的数据部分。版本现在就是版本3.首部包括报文标识（message identification）、最大报文长度、报文标志（message flag）。报文标志占1字节，其中的每一位定义安全类型或其他信息。安全参数用来产生报文概要（见下一章的7.4节）。
    从图可看出，在SNMP PDU前面还有两个有源加密信息的字段。这是当数据部分需要加密时才使用的两个字段。与网络管理直接相关的是后面的SNMP PDU部分。对于表给出的前四种PDU的格式都是相同的，即由PDU类型、请求ID、差错状态、差错索引以及变量绑定这几个字段组成。PDU的各种类型以及类型的编号和T字段的编码已在表中给出。下面简单介绍一些其他字段的作用。
        |<-----------------------------------------IP数据报--------------------------------------------->|
        |     |<-----------------------------------UDP数据报-------------------------------------------->|
        |     |       |<------------------------------SNMP报文------------------------------------------>|
        |IP首部|UDP首部|版本|首部|安全参数|SNMP报文的数据部分                                               |
                                        |                                                                |
                                        |上下文引擎ID|上下文名|PDU类型|请求ID|差错状态|差错索引|名|值|名|值|… |
                                        |   有关加密信息的字段|       |<--------首部-------->|<--变量绑定-->|
                                                             |<---------------SNMP PDU ----------------->|
    （1）请求标识符（request ID）    由管理进程设置的4字节整数值。代理进程在发送响应报文时也要返回此请求标识符。由于管理进程可同时向许多代理发出请求读取变量值的报文，因此设置了请求标识符可使管理进程能够识别返回的响应时对应于哪一个请求报文。
    （2）差错状态（error status）    在请求报文中，这个字段是零。当代理进程响应时，就填入0~18中的一个数字。例如0表示noError（一切正常），1表示tooBig（代理无法把回答装入到一个SNMP报文之中），2表示noSuchName（操作指明了一个不存在的变量），3表示badValue（无效值或无效语法），等等。
    （3）差错索引（error index）    在请求报文中，这个字段是零。当代理进程响应时，若出现noSuchName，badValue或readOnly的差错，代理进程就设置一个整数，指明有差错的变量在变量列表中的偏移。
    （4）变量绑定（variable-bindings）    指明一个或多个变量的名和对应的值。在请求报文中，变量的值应忽略（类型是NULL）。
    为了大致了解ASN.1给出的定义的形式，下面举出定义GetRequest-PDU的例子。两个连字符“--”后面的是注解。
        Get-request-PDU::=[0]        --[0]表示上下文类，编号为0
          IMPLICIT  SEQUENCE {        --类型是SEQUENCE
              request-id        integer32,        --变量request-id的类型是integer32
              error-status        INTEGER{0..18},        --变量error-status取值为0~18的整数
              error-index        INTEGER{0..max-bindings},        --变量error-index取值为0~max-bindings的整数
          variable-bindings        VarBindList}        --变量variable-bindings的类型是VarBindList
    但变量VarBindList是什么类型呢？还需要继续定义（这里从略）。上面ASN.1定义中的第二行中的IMPLICIT叫做隐式标记，是为了在进行编码时可省去对IMPLICIT后面的类型（SEQUENCE）的编码，使最后得出的编码更加简洁。
    下面我们假定管理者发送GetRequest-PDU，为的是从某路由器的代理进程获得“收到UDP数据报的数目”的信息。从图可以查出，mib-2下面第7个节点是udp，而udp节点下面的第一个节点就是udpInDatagrams。由于这个节点已经是叶节点（即没有连接在它下面的子节点了），读取这个节点的数值时应在节点标识符后面加上0，即1.3.1.1.2.1.7.1.0。这样，可得出GetRequest-PDU的ASN.1编码如图所示。
6.8应用进程跨越网络的通信
    在这以前我们已经讨论了因特网使用的几种常用的应用层协议，这些应用协议使广大用户可以更加方便地利用因特网的资源。
    现在的问题是：如果我们还有一些特定的应用需要因特网的支持，但这些应用有不能直接使用已经标准化的因特网应用协议，那么我们应当做哪些工作？要回答这个问题实际上就是要了解下面要介绍的系统调用和应用编程接口。这些问题实际上需要一门专门的课程来学习，我们在这里只能给出一些最初步的概念。
    6.8.1系统调用和应用编程接口
    大多数操作系统时用系统调用（system call） 的机制在应用程序和操作系统之间传递控制权。对程序员来说，系统调用和一般程序设计中的函数调用非常相似，只是系统调用是将控制权传递给了操作系统。图说明了多个应用进程使用系统调用的机制。
    当某个应用进程启动系统调用时，控制权就从应用进程传递给了系统调用接口。此接口再把控制权传递给计算机的操作系统。操作系统把这个调用转给某个内部过程，并执行所请求的操作。内部过程一旦执行完毕，控制权就又通过系统调用接口返回给应用进程。总之，只要应用进程需要从操作系统获得服务，就要把控制权传递给操作系统，操作系统在执行必要的操作后把控制权返回给应用进程。因此，系统调用接口实际上就是应用进程的控制权和操作系统的控制权进行转换的一个接口。由于应用程序在使用系统调用之前要编写一些程序，特别是需要设置系统调用中的许多参数，因此这种系统调用接口又称为应用编程接口API（Application Programming Interface）。API从程序设计的角度定义了许多标准的系统调用函数。应用进程只要使用标准的系统调用函数就可得到操作系统的服务。因此从程序设计的角度看，也可以把API看成是应用程序和操作系统之间的接口。
    现在TCP/IP协议软件已驻留在操作系统中。由于TCP/IP协议族被设计成能运行在多种操作系统的环境中，因此TCP/IP标准没有规定应用程序与TCP/IP协议软件如何接口的细节，而是允许系统设计者能够选择有关API的具体实现细节。目前，只有几种可供应用程序使用TCP/IP的应用编程接口API。这里最著名的就是美国加利福尼亚大学伯克利分校为Berkeley UNIX操作系统定义了一种API，它又称为套接字接口（socket interface）（或插口接口）。微软公司在其操作系统中采用了套接字接口API，形成了一个稍有不同的API，并称之为Windows Socket，简称为WinSock。AT&T为其UNIX系统V定义了一种API，简写为TLI（Transport Layer Interface）。
    我们知道，若要让计算机做某件事情，就要编写使计算机能理解的程序。在网络环境下的计算机应用都有一个共同特点，这就是在不同地点的计算机要通过网络进行通信。从另一种角度看，计算机之间的通信就是本计算机要读取另一个地点的计算机中的数据，或者要把数据从本计算机写入到另一个地点的计算机中。这种“读取”和“写入”的过程都要用到上面所说的系统调用。
    在谈论网络编程时常常把套接字作为应用进程和运输层协议之间的接口。图表示这一概念。图中假定了运输层使用TCP协议（如使用UDP协议，情况也是类似的，只是UDP是无连接的。通信的两端让然可用两个套接字来标志）。现在套接字已成为计算机操作系统内核的一部分。
    请注意：在套接字以上的进程是受应用程序控制的，而在套接字以下的运输层协议软件则是受计算机操作系统的控制。因此，只要应用程序使用TCP/IP协议进行通信，它就必须通过套接字与操作系统交互（这就要使用系统调用函数）并请求其服务。我们应当注意到，应用程序的开发者对套接字以上的应用进程具有完全的控制，但对套接字以下的运输层却只有很少的控制，例如，可以选择运输层协议（TCP或UDP）以及一些运输层的参数（如最大缓存空间和最大报文长度等）。
    当应用进程（客户或服务器）需要使用网络进行通信时，必须首先发出socket系统调用，请求操作系统为其创建一个“套接字”。这个调用的实际效果是请求操作系统把网络通信所需要的一些系统资源（存储器空间、CPU时间、网络带宽等）分配给该应用程序。操作系统为这些资源的总和用一个叫做套接字描述符（socket descriptor）的号码（小的整数）来表示，然后把这个套接字描述符返回给应用进程。此后，应用进程所进行的网络操作（建立连接、收发数据、调整网络通信参数等）都必须使用这个套接字描述符。所以，几乎所有的网络系统调用都把这个套接字描述符作为套接字的许多参数中的第一个参数。在处理系统调用的时候，通过套接字描述符，操作系统就可以识别出应该使用哪些资源来完成应用进程所请求的服务。通过套接字描述符，操作系统就可以识别出应该使用码鞋资源来完成应用进程所请求的服务。通信完毕后，应用进程通过一个关闭套接字的close系统调用通知操作系统回收与该套接字描述符相关的所有资源。由此可见，套接字是应用进程为了获得网络通信服务而与操作系统进行交互时使用的一种机制。
    图给出了当应用进程发出socket系统调用时，操作系统所创建的套接字描述符与套接字数据结构的关系。由于在一个机器中可能同时出现多个套接字，因此需要有一个存放套接字描述符的表，而每一个套接字描述符有一个指针指向套接字的地址。在套接字的数据结构中许多参数要填写。图中给出已填写好的参数是协议族（PF_INET，表示使用Internet的TCP/IP协议族）和服务（SOCK_STREAM，表示使用流式服务，也就是使用TCP服务）。在刚刚创建一个新的套接字时，有灰色背景的四个项目（本地和远地IP地址，本地和远地端口）都是未填写的，因此它和任何机器中的应用进程暂时都还没有联系。
    6.8.2几种常用的系统调用
    下面我们以使用TCP的服务为例介绍集中常用的系统调用。
    1.连接建立阶段
    当套接字被创建后，它的端口号和IP地址都是空的，因此应用进程要调用bind（绑定）来指明套接字的本地地址（本地端口号和本地IP地址）。在服务器端调用bind时就是把熟知端口号和本地IP地址填写到已创建的套接字中。这就叫做把本地地址绑定到套接字。在客户端也可以不调用bind，这时由操作系统内核自动分配一个动态端口号（通信结束后由系统收回）。
    服务器在调用bind后，还必须调用listen（收听）把套接字设置为被动方式，以便随时接受客户的服务请求。UDP服务器由于只提供无连接服务，不使用listen系统调用。
    服务器紧接着就调用accept（接受），以便把远地客户进程发来的连接请求提取出来。系统调用accept的一个变量就是要指明从哪一个套接字发起的连接。
    调用accept要完成的动作较多。这是因为一个服务器必须能够同时处理多个连接。这样的服务器常称为并发方式（concurrent）工作的服务器。可以有多种方法实现这种并发方式。图所示的是一种实现方法。
    主服务器进程M（就是通常所说的服务器进程）一调用accept，就为每一个新的连接请求创建一个新的套接字，并把这个新创建的套接字的标识符返回给发起连接的客户方。与此同时，主服务器进程还要创建一个从属服务器进程来处理新建立的连接。这样，从属服务器进程用这个新创建的套接字和客户进程建立连接，而主服务器进程用原来的套接字重新调用accept，继续接受下一个连接请求。在已建立的连接上，从属服务器进程就使用这个新创建的套接字传送和接收数据。数据通信结束后，从属服务器进程就关闭这个新创建的套接字，同时这个从属服务器也被撤销。
    总之，在任一时刻，服务器中总是有一个主服务器进程和零个或多个从属服务器进程。主服务器进程用原来的套接字接受连接请求，而从属服务器进程用新创建的套接字（在图中注明是“连接套接字”）和相应的客户建立连接并可进行双向传送数据。
    以上介绍的是服务器为了接受客户端发起的连接请求而进行的一些系统调用。现在看一下客户端的情况。当使用TCP协议的客户已经用调用socket创建了套接字后，客户进程就调用connect，以便和远地服务器建立连接（这就是主动打开，相当客户发出的连接请求）。在connect系统调用中，客户必须指明远地端点（即远地服务器的IP地址和端口号）。
    2.数据传送阶段
    客户和服务器都在TCP连接上使用send系统调用传送数据，使用recv系统调用接受数据。通常客户使用send发送请求，而服务器使用send发送回答。服务器使用recv接受客户用send调用发送的请求。客户在发完请求后用recv接受回答。
    调用send需要三个变量：数据要发往的套接字的描述符、要发送的数据的地址以及数据的长度。通常send调用把数据复制到操作系统内核的缓存中。若系统的缓存已满，send就暂时阻塞，直到缓存空间存放新的数据。
    调用recv也需要三个变量：要使用的套接字的描述符、缓存的地址以及缓存空间的长度。
    3.连接释放阶段
    一旦客户或服务器结束使用套接字，就把套接字撤销。这是就调用close释放连接和撤销套接字。
    图画出了上述的一些系统调用的使用顺序。这些系统调用在一个TCP连接中可能会循环使用。

    UDP服务器由于只提供无连接服务，因此不使用listen和accept系统调用。

习题
6-01    因特网的域名结构是怎样的？它与目前的电话网的号码结构有何异同之处？
6-02    域名系统主要功能是什么？域名系统中的本地域名服务器、根域名服务器、顶级域名服务器以及权限域名服务器有何区别？
6-03    举例说明域名转换过程。域名服务器中高速缓存的作用是什么？
6-04    设想有一天整个因特网的DNS系统都瘫痪了（这种情况不大会出现），试问还有可能给朋友发送电子邮件吗？
6-05    文件传送协议FTP的主要工作过程是怎样的？为什么说FTP是带外传送控制信息？主进程和从属进程各起什么作用？
6-06    简单文件传送协议TFTP与FTP的主要区别是什么？各用在什么场合？
6-07    远程登录TELNET的主要特点是什么？什么叫做虚拟终端NVT？
6-08    解释以下名词。各英文缩写词的原文是什么？WWW，URL，HTTP，HTML，CGI，浏览器，超文本，超媒体，超链，页面，活动文档，搜索引擎。
6-09    假定一个超链从一个万维网文档链接到另一个万维网文档时，由于万维网文档上出现了差错而使得超链指向一个无效的计算机名字。这时浏览器将向用户报告什么？
6-10    假定要从已知的URL获得一个万维网文档。若该万维网服务器的IP地址开始时并不知道。试问：除HTTP外，还需要什么应用层协议和运输层协议？
6-11    你所使用的浏览器的高速缓存有多大？请进行一个实验：访问几个万维网文档，然后将你的计算机与网络断开，然后再回到你刚才访问过的文档。你的浏览器的高速缓存能够存放多少个页面？
6-12    什么是动态文档？试举出万维网使用动态文档的一些例子。
6-13    浏览器同时打开多个TCP连接进行浏览的优缺点如何？请说明理由。
6-14    当使用鼠标点击一个万维网文档时，若该文档除了有文本外，还有一个本地.gif图像和两个远地.gif图像。试问：需要使用哪个应用程序，以及需要建立几次UDP连接和几次TCP连接？
6-15    假定你在浏览器上点击一个URL，但这个URL的IP地址以前并没有缓存在本地主机上。因此需要用DNS自动查找和解析。假定要解析到所要找的URL的IP地址共经过n个DNS服务器，所经过的时间分别为RTT1，RTT2，……，RTTn。假定从要找的网页上只需要读取一个很小的图片（即忽略这个小图片的传输时间）。从本地主机到这个网页的往返时间是RTTw。试问从点击这个URL开始，一直到本地主机的屏幕上出现所读取的小图片，一共要经过多少时间？
6-16    在上题中，假定同一台服务器的HTML文件中有链接了三个非常小的对象。若忽略这些对象的发送时间，试计算客户点击读取这些对象所需的时间。（1）没有并行TCP连接的非持续HTTP；（2）使用并行TCP连接的非持续HTTP；（3）流水线方式的持续HTTP。
6-17    在浏览器中应当有一个可选解释程序。是给出一些可选解释程序的名称。
6-18    一个万维网网点有100万个页面，平均每个页面有10个超链。读取一个页面平均要100ms。问要检索整个网点所需的最少时间。
6-19    搜索引擎可分为哪两种类型？各有什么特点？
6-20    试述电子邮件的最主要的组成部件。用户代理UA的作用是什么？没有UA行不行？
6-21    电子邮件的信封和内容在邮件的传送过程中起什么作用？和用户的关系如何？
6-22    电子邮件的地址格式是怎样的？请说明各部分的意思。
6-23    试简述SMTP通信的三个阶段的过程。
6-24    试述邮局协议POP的工作过程。在电子邮件中，为什么需要使用POP和SMTP这两个协议？IMAP与POP有何区别？
6-25    MIME与SMTP的关系时怎样的？什么是quoted-printable编码和base64编码？
6-26    一个二进制文件共3072字节长。若使用base64编码，并且每发送完80字节就插入一个回车符CR和一个换行符LF，问一共发送了多少个字节？
6-27    试将数据  1100 1100  1000 0001  0011 1000  进行base64编码，并得出最后传送的ASCII数据。
6-28    
6-29
6-30
6-31
6-32
6-33
6-34
6-35
6-36
6-37
6-38
6-39
6-40
6-41
6-42
6-43
6-44
6-45
6-46
