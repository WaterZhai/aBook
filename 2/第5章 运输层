第5章   运输层

运输层是整个网络体系结构中的关键层次之一。本章讨论TCP/IP体系中运输层最重要的两种协议：UDP和TCP。TCP比UDP复杂得多，必须弄清TCP的各种机制（如面向连接的可靠服务、流量控制、拥塞控制等），以及TCP连接管理的状态图的概念。

5.1运输层协议概述
    5.1.1进程之间的通信
        从通信和信息处理的角度看，运输层向它上面的应用层提供通信服务，它属于面向通信部分的最高层，同时也是用户功能中的最底层。当网络的边缘部分中的两个主机使用网络的核心部分的功能进行端到端的通信时，只有主机的协议栈才有运输层，而网络核心部分中的路由器在转发分组时都只用到下三层的功能。
        运输层的作用。设局域网1上的主机A和局域网2上的主机B通过互连的广域网进行通信。既然IP协议能够把源主机发送出的分组按照首部中的目的地址送交给目的主机，那么，为什么还需要再设置一个运输层呢？
        从IP层来说，通信的两端是两个主机。IP数据报的首部明确地标志了这两个主机的IP地址。但“两个主机之间的通信”这种说法还不够清楚。这是因为，真正进行通信的实体是在主机中的进程，是这个主机中的一个进程和另一个主机中的一个进程在交换数据（即通信）。因此严格地讲，两个主机进行通信就是两个主机中的应用进程互相通信。IP协议虽然能把分组送到目的主机，但是这个分组还停留在主机的网络层而没有交付主机中的应用进程。从运输层的角度看，通信的真正端点并不是主机而是主机中的进程。也就是说，端到端的通信是应用进程之间的通信。在一个主机中经常有多个应用进程同时分别和另一个主机中的多个应用进程通信。例如，某用户在使用浏览器查找某网站的信息时，其主机的应用层运行浏览器客户进程。如果在浏览网页的同时，还要用电子邮件给网站发送反馈意见，那么主机的应用层AP3通信，而与此同时，应用进程AP2也和对方的应用进程AP4通信。这表明运输层有一个很重要的功能--复用（multiplexing）和分用（demultiplexing）。这里的“复用”是指在发送方不同的应用进程都可以使用同一个运输层协议传送数据（当然需要加上适当的首部），而“分用”是指接收方的运输层在剥去报文的首部后能够把这些数据正确交付到目的应用进程。“运输层提供应用进程间的逻辑通信”。“逻辑通信”的意思是：运输层之间的通信好像是沿水平方向传送数据。但事实上这两个运输层之间并没有一条水平方向的物理连接。要传送的数据是沿着图中的虚线方向（经过多个层次）传送的。
        从这里可以看出网络层和运输层有明显的区别。网络层是为主机之间提供逻辑通信，而运输层为应用进程之间提供端到端的逻辑通信。然而正如后面还要讨论的运输层还具有网络层无法代替的许多其他重要功能。
        运输层还要对收到的报文进行差错检测。大家应当还记得，在网络层，IP数据报首部中的检验和字段，只检验首部是否出现差错而不检查数据部分。
        根据应用程序的不同需求，运输层需要有两种不同的运输协议，即面向连接的TCP和无连接的UDP，这两种协议就是本章要讨论的主要内容。
        我们还应指出，运输层向高层用户屏蔽了下面网络核心的细节（如网络拓扑、所采用的路由选择协议等），它使应用进程看见的就是好像在两个运输层实体之间有一条端到端的逻辑通信信道，但这条逻辑通信信道对上层的表现却因运输层使用的不同协议而有很大的差别。当运输层采用面向连接的TCP协议时，尽管下面的网络是不可靠的（值提供尽最大努力服务），但这种逻辑通信信道就相当于一条全双工的可靠信道。但当运输层采用无连接的UDP协议时，这种逻辑通信信道仍然是一条不可靠信道。
    5.1.2运输层的两个主要协议
        TCP/IP运输层的两个主要协议都是因特网的正式标准，即：
        1）用户数据报协议UDP（UserDatagramProtocol）
        2）传输控制协议TCP（TransmissionControlProtocol）
            这两种协议在协议栈中的位置
                |应用层       |
                |UDP   |TCP  |
                |IP           |
                |与各种网络接口|
        按照OSI的术语，这两个对等运输实体在通信时传送的数据单位叫做运输协议数据单元TPDU（TransportProtocolDataUnit）。但在TCP/IP体系中，则根据所使用的协议是TCP或UDP，分别称之为TCP报文段（segment）或UDP用户数据报。
        UDP在传送数据之前不需要先建立连接。远地主机的运输层在收到UDP报文后，不需要给出任何确认。虽然UDP不提供可靠交付，但在某些情况下UDP却是一种最有效的工作方式。
        TCP则提供面向连接的服务。在传送数据之前必须先建立连接，数据传送结束后要释放连接。TCP不提供广播或多播服务。由于TCP要提供可靠的、面向连接的运输服务，因此不可避免地增加了许多的开销。如确认、流量控制、计时器以及连接管理等。这不仅使协议数据单元的首部增大许多，还要占用许多的处理机资源。
            |应用        |应用层协议  |运输层协议|
            |名字转换    |DNS         |UDP      |
            |文件传送     |TFTP       |UDP      |
            |路由选择协议 |RIP        |UDP       |
            |IP地址配置   |BOOTP，DHCP|UDP       |
            |网络管理     |SNMP       |UDP       |
            |远程文件服务器|NFS        |UDP      |
            |IP电话       |专用协议    |UDP      |
            |流式多媒体通信|专用协议    |UDP      |
            |多播         |IGMP        |UDP      |
            |电子邮件      |SMTP       |TCP      |
            |远程终端接入  |TELNET      |TCP      |
            |万维网        |HTTP       |TCP      |
            |文件传送      |FTP         |TCP     |
    5.1.3运输层的端口
        前面已经提到过运输层的复用和分用功能。其实在日常生活中也有很多复用和分用的例子。假定一个机关的所有部门向外单位发出的公文都由收发室负责寄出，这相当于各部门都“复用”这个收发室。当收发室收到从外单位寄来的公文时，则要完成“分用”功能，即按照信封上写明的本机关的部门地址把公文正确进行交付。
        运输层的复用和分用也是类似的。应用层所有的应用进程都可以通过运输层再传送到IP层，这就是复用。运输层从IP层收到数据后必须交付给指明的应用进程。这就是分用。显然，给应用层的每个应用进程赋予一个非常明确的标志是至关重要的。
        我们知道，在单个计算机中进程是用进程标识符（一个不大的整数）来标志的。但是在云特网环境下，用计算机操作系统指派的这种进程标识符来标志运行在应用层的各种应用进程则是不行的。这是因为在因特网上使用的计算机的操作系统种类很多，而不同的操作系统有使用不同格式的进程标识符。为了使运行不同操作系统的计算机的应用进程能够互相通信，就必须用统一的方法（而这种方法必须与特定操作系统无关）对TCP/IP体系的应用进程进行标志。
        但是，把一个特定机器上运行的特定进程指明为因特网上通信最后的重点还是不可行的。这是因为进程的创建和撤销都是动态的，通信的一方几乎无法识别对方机器上的进程。另外，我们往往需要利用目的主机提供的功能来识别重点，而不需要知道具体的实现这个功能的进程是哪一个（例如，要和因特网上的某个邮件服务器联系，并不一定要知道这个服务器功能是由目的主机上的那个进程实现的）。
        解决这个问题的方法就是izai运输层使用协议端口号（protocol port number），或通常简称为端口（port）。这就是说，虽然通信的重点是应用进程，但我们只要把要传送的报文交到目的主机的某一个合适的目的端口，剩下的工作（即最后交付给目的进程）就由TCP来完成。
        请注意，这种在协议栈层间的抽象的协议端口是软件端口，和路由器或交换机上的硬件端口是完全不同的概念。硬件端口是不同硬件设备进行交互的接口，而软件端口是应用层的各种协议进程与运输实体进行层间交互的一种地址。不同的系统具体实现端口的方法可以是不同的（取决于系统使用的操作系统）。
        在后面将降到的UDP和TCP的首部格式中，我们将会看到它们都有源端口和目的端口这两个重要字段。当运输层收到IP层交上来的运输层报文时，就能够根据其首部中的目的端口号把数据交付给应用层的目的应用进程。
        TCP/IP的运输层用一个16位端口号来标志一个端口。但请注意，端口号只具有本地意义，它只是为了标志本计算机应用层送的各个进程在运输层交互时的层间接口。在因特网不同计算机中，相同的端口号是没有关联的。16位的端口号可允许有65535个不同的端口号，这个数目对一个计算机来说是足够用的。
        由此可见，两个计算机中的进程要互相通信，不仅必须知道对方的IP地址（为了找到对方的计算机），而且还要知道对方的端口号（为了找到对方计算机中的应用进程）。这和我们寄信的过程类似。当我们要和某人写信时，就必须知道他的通信地址。在新风尚会写明自己的地址。当收信人回信时，很容易在信封上看到发信人的地址。因特网上的计算机通信是采用客户-服务器方式。客户在发起通信请求时，必须先知道对方服务器的IP地址和端口号。因此运输层的端口号共分为下面的两大类。
        1）服务器端使用的端口号    这理由分为两类，最重要的一类叫做熟知端口号（well-know port number）或系统端口号，数值为0~1023。这些数值可在网址www.iana.org查到。IANA把这些端口号指派给了TCP/IP最重要的一些应用程序，让所有的用户都知道。当一种新的应用程序出现后，IANA必须为它指派一个熟知端口，否则因特网上的其他应用进程就无法和它进行通信。
            |应用程序 |FTP|TELNET|SMTP|DNS|TFTP|HTTP|SNMP|SNMP（trap）|
            |熟知端口号|21|23    |25  |53  |69 |80  |161 |162         |
            另一类叫做登记端口号，数值为1024~49151.这类端口号是为没有熟知端口号的应用程序使用的。使用这类端口号必须在IANA按照规定的手续登记，以防止重复。
        2）客户端使用的端口号   数值为49152~65535.由于这类端口号仅在客户进程运行时才动态选择，因此又叫做短暂端口号。这类端口号是留给客户进程选择暂时使用。当服务器进程收到客户进程的报文时，就知道了客户进程所使用的端口号，因而可以把数据发送给客户进程。通信结束后，刚才已使用过的客户端口号就不复存在。这个端口号就可以供其他客户进程以后使用。
        下面将分别讨论UDP和TCP。UDP比较简单，本章主要的篇幅是讨论TCP。
5.2用户数据报协议UDP
    5.2.1UDP概述
        用户数据报协议UDP只在IP的数据报服务之上增加了很少一点的功能，这就是复用和分用的功能以及差错检测的功能。UDP的主要特点是：
        1）UDP是无连接的，即发送数据之前不需要建立连接（当然发送数据结束时也没有连接可释放），因此减少了开销和发送数据之前的时延。
        2）UDP使用尽最大努力交付，即不保证可靠交付，因此主机不需要维持复杂的连接状态表（这里面有许多参数）。
        3）UDP是面向报文的。发送方的UDP对应程序交下来的报文，在添加首部后就向下交付给IP层。UDP对应用层交下来的报文，即不合并，也不拆分，而是保留这些报文的边界。这就是说，应用层交给UDP多长的报文，UDP就照样发送，即一次发送一个报文。在接收方的UDP，对IP层交上来的UDP用户数据报，在去除首部后就原封不动地交付给上层的应用进程。也就是说，UDP一次交付一个完整的报文。因此，应用程序必须选择合适大小的报文。若报文太长，UDP把它交给IP层后，IP层在传送时可能要进行分片，这会降低IP层的效率。反之，若报文太短，UDP把它交给IP层后，会使IP数据报的首部的相对长度太大，这也降低了IP层的效率。
                               |应用层报文            |应用层
                       |UDP首部|UDP用户数据报的数据部分|运输层
                |IP首部|IP数据报的数据部分             |IP层
        1）UDP没有拥塞控制，因此网络出现的拥塞不会使源主机的发送速率降低。这些某些实时应用是很重要的。很多的实时应用（如IP电话、实时视频会议等）要求源主机以恒定的速率发送数据，并且允许在网络发生拥塞时丢失一些数据，但却不允许有太大的时延。UDP正好适合这种要求。
        2）UDP支持一对一、一对多、多对一和多对多的交互通信。
        3）UDP的首部开销小，只有8个字节，比TCP的20个字节的首部要短。
        虽然某些实时应用需要使用没有拥塞控制的UDP，但当很多的源主机同时都向网络发送高速率的实时视频流时，网络就有可能发生拥塞，结果大家都无法正常接收。因此，不使用拥塞控制功能的UDP有可能会引起网络产生严重的拥塞问题。
        还有一些使用UDP的实时应用，需要对UDP的不可靠的传输进行适当的改进，以减少数据的丢失。在这种情况下，应用进程本身可以在不影响应用的实时性的前提下，增加一些提高可靠性的措施，如采用前向纠错或重传已丢失的报文。
    5.2.2UDP的首部格式
        用户数据报UDP有两个字段：数据字段和首部字段。首部字段很简单，只有8个字节，由四个字段组成，每个字段的长度都是两个字节。各字段意义如下：
            1）源端口   源端口号。在需要对方回信时选用。不需要时可用全0。
            2）目的地址    目的端口号。这在终点交付报文时必须要使用到。
            3）长度    UDP用户数据报的长度，其最小值是8（仅有首部）。
            4）检验和   检测UDP用户数据报在传输中是否有错。有错就丢弃。
        当运输层从IP层收到UDP数据报时，就根据首部中的目的端口，把UDP数据报通过相应的端口，上交最后的终点--应用进程。
        如果接收方UDP发现收到的报文中的目的端口号不正确（即不存在对应于该端口号的应用进程），就丢弃该报文，并由ICMP发送“端口不可达”差错报文给发送方。我们在上一章4.4.2节讨论traceroute时，就是让发送的UDP用户数据报故意使用一个非法的UDP端口，结果ICMP就返回“端口不可达”差错报文，因而达到了测试的目的。
        UDP用户数据报首部中检验和的计算方法有些特殊。在计算检验和时，要在UDP用户数据报之前增加12个字节的伪首部。所谓“伪首部”是因为这种伪首部并不是UDP用户数据真正的首部。只是在计算检验和时，临时添加在 UDP用户数据报前面，得到一个临时的UDP用户数据报。检验和就是按照这个临时的UDP用户数据报来计算的。伪首部既不向下传送也不向上递交，而仅仅是为了计算检验和。
        UDP计算检验和的方法和计算IP数据报首部检验和方法相似。但不同的是：IP数据报的检验和只检验IP数据报的首部，但UDP的检验和是把首部和数据部分一起都检验。在发送方，首先是先把全零放入检验和字段。再把伪首部以及UDP用户数据报看成是由许多16位的字串接起来。若UDP用户数据报的数据部分不是偶数个字节，则要填入一个全零字节（但此字节不发送）。然后按二进制反码计算出这些16位字的和。将此和的二进制反码写入检验和字段后，就发送这样的UDP用户数据报。在接收方，把收到的UDP用户数据报连同伪首部（以及可能的填充全零字节）一起，按二进制反码求这些16位字的和。当无差错时其结果应为全1。否则就表明有差错出现，接收方就应丢弃这个UDP用户数据报（也可以上交给应用层，但附上出现了差错的警告）。一个计算UDP检验和的例子。这里假定用户数据报的长度是15字节，因此要添加一个全0的字节。读者可以自己检验一下在接收端是怎样对检验和进行检验的。不难看出，这种简单的差错检验方法的检错能力并不强，但它的好处是简单，处理起来较快。
        伪首部的第3字段是全零，第4个字段是IP首部中的协议字段的值。以前已讲过，对于UDP，此协议字段值为17.第5字段是UDP用户数据报的长度。因此，这样的检验和，既检查了UDP用户数据报的源端口号和目的端口号以及 UDP用户数据报的数据部分，有检查了IP数据报的源IP地址和目的地址。
5.3传输控制协议TCP概述
    由于TCP协议比较复杂，因此本节先对TCP协议进行一般的介绍，然后再逐步深入讨论TCP的可靠传输、流量控制和拥塞控制等问题。
    5.3.1TCP最主要的特点
        TCP是TCP/IP体系中非常复杂的一个协议。下面介绍TCP最主要的特点。
        1）TCP是面向连接的运输层协议。这就是说，应用程序在使用TCP协议之前，必须先建立TCP连接。在传送数据完毕后，必须释放已经建立的TCP连接。这就是说，应用进程之间的通信好像在“打电话”：通话前要先拨号建立连接，通话结束后要挂机释放链接。
        2）每一条TCP连接只能有两个端点（endpoint），每一条TCP连接只能是点对点的（一对一）。这个问题后面还要讨论。
        3）TCP提供可靠交付的服务。也就是说，通过TCP连接传送的数据，无差错、不丢失、不重复、并且按序到达。
        4）TCP提供全双工通信。TCP允许通信双方的应用进程在任何时候都能发送数据。TCP连接的两端都设有发送缓存和接受缓存，用来临时存放双向通信的数据。在发送时，应用程序在把数据传送给TCP的缓存后，就可以做自己的事，而TCP在合适的时候把数据发送出去。在接收时，TCP把收到的数据放入缓存，上层的应用进程在合适的时候读取缓存中的数据。
        5）面向字节流。TCP中的“流”（stream）指的是流入到进程或从进程流出的字节序列。“面向字节流”的含义是：虽然应用程序和TCP的交互时一次一个数据块（大小不等），但TCP把应用程序交下来的数据看成仅仅是一连串的无结构的字节流。TCP并不知道所传送的字节流的含义。TCP不保证接收方应用程序所受到的数据块和发送方应用程序所发出的数据块具有对用大小的关系（例如，发送方应用程序交给发送方的TCP共10个数据块，但接收方的TCP可能只用了4个数据块就把收到的字节流交付给了山城的应用程序）。但接收方应用程序受到的字节流必须和发送方应用程序发出的字节流完全一样。当然，接受方的应用程序必须有能力识别收到的字节流，把它还原成有意义的应用层数据。
        为了突出示意图的要点，我们只画出了一个方向的数据流。但请注意，在实际的网络中，一个TCP报文段包含上前个字节是很常见的，而图中的和部分都只画出了几个字节，这仅仅是为了更方便地说明“面向字节流”的概念。另一点很重要的是：TCP连接是一条虚连接而不是一条真正的物理连接。TCP报文段先要传送到IP层，加上IP首部后，再传送到数据链路层。再加上数据链路层的首部和尾部后，才离开主机发送到物理链路。
        TCP和UDP在发送报文时所采用的方式完全不同。TCP对应用进程一次把多长的报文发送到TCP的缓存中是不关心的。TCP根据对方给出的窗口值和当前网络拥塞的程度来决定一个报文段应包含多少个字节（UDP发送的报文长度是应用进程给出的）。如果应用进程传送到TCP缓存的数据块太长，TCP就可以把它划分短一些再传送。如果应用进程一次只发来一个字节，TCP也可以等待积累有足够多的字节后再构成报文段发送出去。关于TCP报文段的长度问题，在后面还要进行讨论。
    5.3.2TCP的连接
        TCP把连接作为最基本的抽象。TCP的许多特性都与TCP是面向连接的这个基本特性有关。因此我们对TCP连接需要有更清楚的了解。
        前面已经讲过，每一条TCP连接有两个端点。那么，TCP连接的端点是什么呢？不是主机，不是主机的IP地址，不是应用进程，也不是运输层的协议端口。TCP连接的端点叫做套接字（socket）或插口。根据RFC 793的定义：端口号拼接到（contatenated with）IP地址即构成了套接字。因此套接字的表示方法是在点分十进制的IP地址后面写上端口号，中间用冒号或逗号隔开。例如若IP地址是192.3.4.5而端口号是80，那么得到的套接字就是（192.3.4.5：80）。总之，我们有：套接字socket=（IP地址：端口号）
            每一条TCP连接唯一地被通信两端的两个端点（即两个套接字）所确定。即：
                TCP连接::={socket1,socket2}={(IP1:port1),(IP2:port2)}
        这里IP1和IP2分别是两个端点主机的IP地址，而port1和port2分别是两个端点主机中的端口号。TCP连接的两个套接字就是socket1和socket2。这里只是初步地给出了套接字的概念，在下一章的6.8节还要对套接字进行更多的介绍。
        总之，TCP连接就是由协议软件所提供的一种抽象。虽然有时为了方便，我们也可以说，在一个应用进程和另一个应用进程之间建立了一条TCP连接，但一定要记住：TCP连接的端点是套接字，即（IP地址：端口号）。也还应记住：同一个IP地址可以有多个不同的TCP连接，而同一个端口号也可以出现在多个不同的TCP连接中。
        值得注意的是，socket这个名词有时容易使人把一些概念弄混淆，因为随着因特网的不断发展，以及网络技术的进步，同一个名词socket却可表示多种不同的意思。例如：
        1）允许应用程序访问连网协议的应用编程接口API（Application Programming Interface），即运输层和应用层之间的一种接口，成为socketAPI，并简称为socket。
        2）在socketAPI中使用的一个函数名也叫做socket。
        3）调用socket函数的端点称为socket，如“创建一个数据报socket”。
        4）调用socket函数时，其返回值称为socket描述符，可简称为socket。
        5）在操作系统内核中连网协议的Berkeley实现，称为socket实现。
        上面的这些socket的意思都和本章引用的RFC 793定义的socket（指端口号拼接到IP地址）不同。请读者加以注意。
5.4可靠传输的工作原理
    我们知道，TCP发送的报文段是交给IP层传送的。但IP层只能提供尽最大努力服务，也就是说，TCP下面的网络锁提供的是不可靠的传输。因此，TCP必须采用适当的措施才能使得两个运输层之间的通信变得可靠。
    理想的传输条件有以下两个特点：
    1）传输信道不产生差错。
    2）不管发送方以多块的速度发送数据，接收方总是来得及处理收到的数据。
    在这样的理想传输条件下，不需要采取任何措施就能够实现可靠传输。
    然而实际的网络都不具备以上两个理想条件。但我们可以使用一些可靠传输协议，当出现差错时让发送方重传差错的数据，同时在接收方来不及处理收到的数据时，及时告诉发送方适当降低发送数据的速度。下面从最简单的停止等待协议讲起。
    5.4.1停止等待协议
        全双工通信的双方既是发送方也是接收方。下面为了讨论问题的方便，我们仅考虑A发送数据而B接收数据并发送确认。因此A叫做发送方，而B叫做接收方。因为这里是讨论可靠传输的原理，因此把传送的数据单元都称为分组，而并不考虑数据是在哪一个层次上传送的。“停止等待”就是每发送完一个分组就停止发送，等待对方的确认。在收到确认后再发送下一个分组。
        1.无差错情况
        停止等待协议。最简单的无差错情况。A发送分组M1，发完就暂停发送，等待B的确认。B收到了M1就向A发送确认。A在收到了对M1的确认后，就再发送下一个分组M2.同样，在收到B对M2的确认后，再发送M3。
        2.出现差错
        分组在传输过程中出现差错的情况。B接收M1时检测出了差错，就丢弃M1，其他什么也不做（不通知A收到有差错的分组）。也可能是M1在传输过程中丢失了，这是B当然什么都不知道。在这种情况下，B都不会发送任何消息。可靠传输协议是这样设计的：A只要超过了一段时间仍然没有收到确认，就认为刚才发送的分组丢失了，因而重传前面发送或的分组。这就叫做超时重传。要实现超时重传，就要在每发送网一个分组设置一个超时计时器。如果在超时计时器到期之前收到了对方的确认，就撤销已设置的超时计时器。其实，A为每一个已发送的分组都设置了一个超时计时器。但A只要在超时计时器到期之前收到了相应的确认，就撤销该超时计时器。为简单起见，这些细节都省略了。
        这里应注意以下三点。
        第一，A在发送完一个分组后，必须暂时保留已发送的分组的副本（为发生超市重传时使用）。只有在收到相应的确认后才能清除暂时保留的分组副本。
        第二，分组和确认分组都必须进行编号。这样才能明确是哪一个发送出去的分组收到了确认，而哪一个分组还没有收到确认。
        第三，超时计时器设置的重传时间应当比数据在分组传输的平均往返时间更长一些。一段虚线表示如果M1正确到达B同时A也正确收到确认的过程。可见重传时间应设定为比平均往返时间更长一些。显然，如果重传时间设定得很长，那么通信的效率就会很低。但如果重传时间设定得太短，以致产生不必要的重传，浪费了网络资源。然而在运输层重传时间的准确设定是非常复杂的，这是因为已发送出的分组到底会经过哪些网络，以及这些网络将会产生多大的时延（这取决于这些网络当时的拥塞情况），这些都是不确定因素。把往返时间当做固定的（这并不符合网络的实际情况），只是为了讲述原理的方便。关于重传时间应如何选择，在后面的5.6.2节还要进一步讨论。
        3.确认丢失和确认迟到
        另一种情况。B所发送的对M2的确认丢失了。A在设定的超时重传时间内没有收到确认，但并无法知道自己发送的分组出错、丢失，或者是B发送的确认丢失了。因此A在超时计时器到期后就要重传M2。现在应注意B的动作。假定B又收到了重传的分组M2.这时应采取两个行动。
            第一，丢弃这个重复的分组M2，不向上层交付。
            第二，向A发送确认。不能认为已经发送过确认就不再发送，因为A之所以重传M2就表示A没有收到对M2的确认。
            一种可能出现的情况。传输过程中没有出现差错，但B对分组M1的确认迟到了。A会收到重复的确认。对重复的确认的处理很简单：收下后就丢弃。B仍然会收到重复的M1，并且同样要丢弃重复的M1，并重传确认分组。
        通常A最终总是可以收到对所有发出的分组的确认。如果A不断重传分组但总是收不到确认，就说明通信线路太差，不能进行通信。
        使用上述的确认和重传机制，我们就可以在不可靠的传输网路上实现可靠的通信。
        像上述的这种可靠传输协议常称为自动重传请求ARQ（Automatic Repeat reQuest）。意思是重传的请求是自动进行的。接收方不需要请求发送方重传某个出错的分组。
        4.信道利用率
        停止等待协议的优点是简单，但缺点是信道利用率太低。为简单起见，就假定在A和B之间有一条直通的信道来传送分组。
        假定A发送分组需要的时间是Td。显然，Td等于分组长度除以数据率。在假定分组正确到达B后，B处理分组的时间可以忽略不计，同时立即发挥确认。假定B发送确认分组需要时间Ta。如果A处理确认分组的时间也可以忽略不计，那么A在经过时间（Td+RTT+Ta）后就可以再发送下一个分组，这里的RTT是往返时间。因为仅仅是在时间Td内才用来送有用的数据（包括分组的首部），因此信道的利用率U可用下式计算：U=Td/(Td+RTT+Ta)
            请注意，更细致的计算还可以在上式分子的时间Td内扣除传送控制信息（如首部）所花费的时间。但在进行粗略计算时，用近似的式子就可以了。
        我们知道，式子中的往返时间RTT取决于所使用的信道。例如，假定1200km的信道的往返时间RTT=20ms。分组长度是1200bit，发送速率是1Mb/s。若忽略处理时间和Ta（Ta一般都远小于Td），则可算出信道的利用率U=5.66%。但若把发送塑料厂提高到10Mb/s，则U=5.71x10^(-4)。信道在绝大多数时间内都是空闲的。
        从中还可以看出，当往返时间RTT远大于分组发送时间Td时，信道的利用率就会非常低。还应注意的是，并没有考虑出现差错后的分组重传。若出现重传，则对传送有用的数据信息来说，信道的利用率就还要降低。
        为了提高传输效率，发送方可以不使用低效率的停止等待协议，而是采用流水线传输。流水线传输就是发送方可连续发送多个分组，不必没发完一个分组就停顿下来等待对方的确认。这样可使信道上一直有数据不间断地在传输。显然，这种传输方式可以获得很高的新到利用率。
        当使用流水线传输时，就要使用下面介绍的连续ARQ协议和滑动窗口协议。
    5.4.2连续ARQ协议
        滑动窗口协议比较复杂，是TCP协议的精髓所在。这里先给出连续ARQ协议最基本的概念，但不涉及到许多细节问题。详细的滑动窗口协议将在后面的5.6节中讨论。
        发送方维持的发送窗口，它的意义是：位于发送窗口内的5个分组都可连续发送出去，而不需要等待对方的确认。这样，信道利用率就提高了。
        连续ARQ协议规定，发送方每收到一个确认，就把发送串口向前滑动一个分组的位置。发送方收到了对第1个分组的确认，于是把发送窗口向前移动一个分组的位置。如果原来已经发送了前5个分组，那么现在就可以发送窗口内的第6个分组了。
        接收方一般都是采用累计确认的方式。这就是说，接收方不必对收到的分组逐个发送确认，而是可以在收到几个分组后，对按序到达的最后一个分组发送确认，这样就表示：到这个分组为止的所有分组都已正确收到了。
        累积确认有优点也有缺点。优点是：容易实现，即使确认丢失也不必重传。但缺点是不能向发送方反映出接收方已经正确收到的所有分组的信息。
        例如，如果发送方发送了前5个分组，而中间的第3个分组丢失了。这是接收方只能对前两个分组发出确认。发送方无法知道后面三个分组的下落，而只好把后面的三个分组都再重传一次。这就叫做Go-back-N（回退 N），表示需要再退回来重传已发送过的N个分组。可见当通信线路质量不好时，连续ARQ协议会带来负面的影响。
        在深入讨论TCP的可靠传输问题之前，必须先了解TCP的报文段首部的格式。
5.5TCP报文段的首部格式
    TCP虽然是面向字节流的，但是 TCP传送的数据单元却是报文段。一个 TCP报文段分为首部和数据两部分，而TCP的全部功能都体现在他首部中个字段的作用。因此，只有弄清TCP首部各字段的作用才能掌握TCP的工作原理。下面就讨论TCP报文段的首部格式。
    TCP报文段首部的前20个字节是固定的，后面有4N字节是根据需要而增加的选项（N是整数）。因此TCP首部的最小长度是20字节。
    首部固定部分个字段的意义如下：
    1）源端口和目的端口    各占2个字节，分别写入源端口号和目的端口号。和前面所示的UDP的分用相似，TCP的分用功能也是通过端口实现的。
    2）序号    占4字节。序号范围是[0,2^32-1]，共2^32（即4284967296）个序号。序号增加到2^32-1后，下一个序号又回到0.也就是说，序号使用mod 2^32运算。TCP是面向字节流的。在一个TCP连接中传送的字节流中的每一个字节都按顺序编号。整个要传送的字节流的起始序号必须在连接建立时设置。首部中的序号字段值则指的是本报文段所要发送的数据的第一个字节的序号。例如，一报文段的序号字段值是301，而携带的数据共有100字节。这就表明：本报文段的数据的第一个字节的序号是301，最后一个字节的序号是400.显然，下一个报文段（如果还有的话）的数据序号应当从401开始，即下一个报文段的序号字段值应为401.这个字段的名称也叫做“报文段序号”。
    3）确认号   占4字节，是期待收到对方下一个报文段的第一个数据字节的序号。例如，B正确收到了A发送过来的一个报文段，其序号字段值是501，而数据长度是200字节（序号501~700），这表明B正确收到了A发送的到序号700为止的数据。因此，B期望收到A的下一个数据序号是701，于是B在发送给A的确认报文段中把确认号置为701.请注意，现在的确认号不是501，也不是700，而是701。
    总之，应当记住：若确认号=N，则表明：到序号N-1为止的所有数据都已正确收到。
    由于序号字段有32位长，可对4Gb（即4千兆字节）的数据进行编号。在一般情况下可保证当序号重复使用时，旧序号的数据早已通过网络到达终点了。
    5）数据偏移    占4位，它指出TCP报文段的数据起始处距离TCP报文段的起始处有多远。这个字段实际上是指出TCP报文段的首部长度。由于首部中还有长度不确定的选项字段，因此数据偏移字段是必要的。但请注意，“数据偏移”的单位是32位字（即以4字节长的字为计算单位）。由于4位二进制数能够表示的最大十进制数字是15，因此数据偏移的最大值是60字节，这也是TCP首部的最大长度（即选项长度不能超过40字节）。
    6）保留    占6位，保留为今后使用，但目前应置为0。
    下面由6个控制位说明本报文段的性质，它们的意义见下面的7）~12）。
    7）紧急URG（URGent）   当URG=1时，表明紧急指针字段有效。它告诉系统此报文段中有紧急数据，应尽快传送（相当于高优先级的数据），而不要按原来的排队顺序来传送。例如，已经发送了很长的一个程序要在远地的主机上运行。但后来发现了一些问题，需要取消改程序的运行。因此用户从键盘发出中断命令（Control+C）。如果不使用紧急数据，那么这两个字符将存储在接收TCP的缓存末尾。只有在所有的数据被处理完毕后这两个字符才被交付到接收方的应用进程。这样做就浪费了许多时间。
    当URG置为1时，发送应用进程就告诉发送方的TCP有紧急数据要传送。于是发送方TCP就把紧急数据插入到本报文段数据的最前面，而在紧急数据后面的数据仍是普通数据。这是要与首部中紧急指针（Urgent Pointer）字段配合使用。
    8）确认ACK（ACKnowlegment）    仅当ACK=1时确认号字段才有效。当ACK=0时，确认号无效。TCP规定，在连接建立后所有传送的报文都必须把ACK置1.
    9）推送PSH（PuSH）   当两个应用进程进行交互式的通信时，有时在一端的应用进程希望在键入一个命令后立即就能够收到对方的响应。在这种情况下，TCP就可以使用推送（push）操作。这时，发送方TCP把PSH置1，并立即创建一个报文段发送出去。接收方TCP收到PSH=1的报文段，就尽快地（即“推送”向前）交付给接收应用进程，而不再等到整个缓存都填满了后再向上交付。
    虽然应用程序可以选择推送操作，但推送操作还很少使用。
    10）复位RST（ReSet）   当RST=1时，表明TCP连接中出现严重差错（如由于主机崩溃或其他原因），必须释放连接，然后再重新建立运输连接。RST置1好用来拒绝一个非法的报文段或拒绝打开一个连接。RST也可称为重建位或重置位。
    11）同步SYN（SYNchronization）   在连接建立时用来同步序号。当SYN=1而ACK=0时，表明这是一个连接请求报文段。对方若同意建立连接，则应在响应的报文段中使SYN=1和ACK=1.因此，SYN置为1就表示这是一个连接请求或连接接受报文。关于连接的建立和释放，在后面的5.9节还要进行详细讨论。
    12）终止FIN（FINis，意思是“完”、“终”）    用来释放一个连接。当FIN=1时，表明此报文段的发送方的数据已发送完毕，并要求释放运输连接。
    13）窗口   占2字节。窗口值是[0,2^16-1]之间的整数。窗口指的是发送本报文段的一方的接收窗口（而不是自己的发送窗口）。窗口值告诉对方：从本报文段首部中的确认号算起，接收方目前允许对方发送的数据量。之所以要有这个限制，是因为接收方的数据缓存空间是有限的。总之，窗口值作为接收方让发送方设置其发送窗口的一句。
    例如，设确认号是701，窗口字段是1000。这就表明，从701号算起，发送此报文段的一方还有接收1000个字节数据（字节序号是701~1700）的接收缓存空间。
    最值，应当记住：窗口字段明确指出了现在允许对方发送的数据量。窗口值是经常在动态变化着。
    14）检验和    占2字节。检验和字段检验的范围包括首部和数据这两部分。和UDP用户数据报一样。在计算检验和时，要在TCP报文段的前面加上12字节的伪首部。伪首部的格式与UDP影虎数据报的伪首部一样。但应把伪首部第4个字段中的17改为6（TCP的协议号是6），把第5字段中的UDP长度改为YCP长度。接收方收到此报文段后，仍要加上这个伪首部来计算检验和。若使用IPv6，则相应的伪首部也要改变。
    15）紧急指针   占2字节。紧急指针仅在URG=1时才有意义，它指出本报文段中的紧急数据字节数（紧急数据结束后就是普通数据）。因此紧急指针指出了紧急数据的末尾在报文段中的位置。当所有紧急数据都处理完时，TCP就告诉应用程序恢复到正常操作。值得注意的是，即使窗口为零时也可发送紧急数据。
    16）选项   长度可变，最长可达40字节。当没有使用选项时，TCP的首部长度是20字节。
    TCP最初只规定了一种选项，即最大报文段长度MSS（Maximum Segment Size）。请注意MSS这个名词的含义。MSS是每一个TCP报文段中的数据字段的最大长度。数据字段加上TCP首部才等于整个的TCP报文段。所以MSS并不是整个TCP报文段的最大长度，而是“TCP报文段长度减去TCP首部长度”。
    为什么要规定一个最大报文段长度MSS呢？这并不是考虑接收方的接收缓存可能放不下TCP报文段中的数据。实际上，MSS与接收窗口值没有关系。我们知道，TCP报文段的数据部分，至少要加上40字节的首部（TCP首部20字节和IP首部20字节，这里都还没有考虑首部中的选项部分），才能组装成一个IP数据报。若选择较小的 MSS长度，网络的利用率就降低。设想在极端的情况下，当TCP报文段只含有1字节的数据时，在IP层传输的数据报的开销至少有40字节（包括TCP报文段的首部和IP数据报的首部）。这样，对网络的利用率就不会超过1/41。到了数据链路层还要加上一些开销。但反过来，若TCP报文段非常长，那么在IP层传输时就有可能要分解成多个短数据报片。在终点要把收到的各个短数据报片装配成原来的TCP报文段。当传输出错时还要进行重传。这些也都会使开销增大。
    因此，MSS应尽可能大些，只要在IP层传输时不需要再分片就行。由于IP数据报所经历的路径是动态变化的，因此在这条路径上确定的不需要分片的MSS，如果改走另一条路径就可能需要进行分片。因此最佳的MSS是很难确定的。在连接建立的过程中，双方都把自己能够支持的MSS写入这一字段，以后就按照这个数值传送数据，两个传送方向可以有不同的MSS值。若主机未填写这一项，则MSS的默认值是536字节长。因此，所有在因特网上的主机都应能接受的报文段长度是536+20（固定首部长度）=556字节。
    随着因特网的发展，又陆续增加了几个选项。如窗口扩大选项、时间戳选项等。以后又层架了有关选择确认选项。
    窗口扩大选项是为了扩大窗口。我们知道，TCP首部中窗口字段长度是16位，因此最大的窗口大小为64K字节（见下一节）。虽然这对早期的网络是足够用的，但对于包含卫星信道的网络，传播时延和带宽都很大，要获得高吞吐率需要更大的窗口大小。
    窗口扩大选项占3字节，其中有一个字节表示位移值S。新的窗口值等于TCP首部中的窗口位数从16增大到（16+S），这相当于把窗口值向左移动S位后获得实际的窗口大小。位移值允许使用的最大值是14，相当于窗口最大值增大到2^(16+14)-1=2^30-1。
    窗口扩大选项可以在双方初始建立TCP连接时进行协商。如果连接的某一端实现了窗口扩大，当它不再需要扩大其窗口时，可发送S=0的选项，使窗口大小回到16。
    时间戳选项占10字节，其中最主要的字段时间戳值字段（4字节）和时间戳回送回答字段（4字节）。时间戳选项有以下两个功能：
        第一，用来计算往返时间RTT（见后面的5.6.2节）。发送方在发送报文段时把当前时钟的时间值放入时间戳字段，接收方在确认该报文段时把时间戳字段值复制到时间戳回送回答字段。因此，发送方在收到确认报文后，可以准确地计算出RTT来。
        第二，用于处理TCP序号超过2^32的情况，这又称为防止序号绕回PAWS（Protect Against Wrapped Sequence numbers）。我们知道，序号只有32位，而每增加2^32个序号很可能会被重复使用。例如，若用1Gb/s的速率发送报文段，则不到4.3秒钟数据字节的序号就会重复。为了使接收方能够把新的报文段和迟到很久的报文段区分开，可以在报文中加上这种时间戳。
    关于选择确认选项，我们将在后面的5.6.3节介绍。
5.6TCP可靠传输的实现
    本节讨论TCP可靠传输的实现。
    我们首先介绍以字节为单位的滑动窗口。为了讲述可靠传输原理的方便，我们假定数据传输只在一个方向进行，即A发送数据，B给出确认。这样的好处是使讨论限于两个窗口，即发送方A的接收窗口和接收方B的接收窗口。如果再考虑B也向A发送数据，那么还要增加A的接受窗口和B的发送窗口，这对讲述可靠传输的原理并没有多少帮助，反而会使问题更加繁琐。
    5.6.1以字节为单位的滑动窗口
        TCP的滑动窗口是以字节为单位的。为了便于说明，我们故意把后面的字节编号都取得很小。先假定A收到了B发来的确认报文段，其中窗口是20（字节），而确认号是31（这表明B期望收到的下一个序号是31，而序号30位置的数据已经收到了）。根据这两个数据，A就构造出自己的发送窗口。
        我们先讨论发送方A的发送窗口。发送窗口表示：在没有收到B的确认的请款下，A可以连续把窗口内的数据都发送出去。凡是已经发送过的数据，在未收到确认之前都必须暂时保留，以便在超时重传时使用。
        发送窗口里面的序号表示允许发送的序号。显然，窗口越大，发送方就可以在收到对方确认之前连续发送更多的数据，因而可能获得更高的传输效率。但接收方必须来得及处理这些收到的数据。
        发送窗口后沿的后面部分表示已发送且已收到了确认。这些数据显然不需要再保留了。而发送窗口前沿的前面部分表示不允许发送的，因为接收方都没有位这部分数据保留临时存放的缓存空间。
        发送窗口的位置由窗口前沿和后沿的位置共同确定。发送串口后沿的变化情况有两种可能，即不动（没有收到新的确认）和前移（收到了新的确认）。发送窗口后沿不可能向后移动，因为不能撤销掉已收到的确认。发送窗口前沿通常是不断向前移动，但也有可能不动。这对于两种情况：一是没有收到新的确认，对方通知的窗口大小也不变；而是收到了新的确认但对方通知的窗口缩小了，使得发送窗口前沿正好不动。
        发送窗口前沿也有可能向后收缩。这发生在对方通知的窗口缩小了。但TCP的标准强烈不赞成这样做。因为很可能发送方在收到这个通知以前已经发送了窗口中的许多数据，现在又要收缩窗口，不让发送这些数据，这样就会产生一些错误。
        现在假定A发送了序号为31~41的数据。这时，发送窗口位置并未改变，但发送窗口内靠后面有11个字节便是已发送但未收到确认。而发送窗口内靠前面的9个字节（42~50）是允许发送但尚未发送的。
        从以上所述可以看出，要描述一个发送窗口的状态需要三个指针：P1，P2和P3。指针都指向字节的序号。这三个指针指向的几个部分的意义如下：
            小于P1的是已发送并已收到确认的部分，而大于P3的是不允许发送的部分。
            P3-P1=A的发送窗口（又称为通知窗口）
            P2-P1=已发送但尚未收到确认的字节数
            P3-P2=允许发送但尚未发送的字节数（又称为可用窗口或有效窗口）
        再看一下B的接收窗口。B的接收窗口大小是20。在接收窗口外面，到30号为止的数据是已经发送过确认，并且已经交付给主机了。因此在B可以不再保留这些数据。接收窗口内的序号是允许接收的。B收到了序号为32和33的数据。这些数据没有按序到达，因为序号为31的数据没有收到（也许丢失了，隭滞留在网络中的某处）。请注意，B只能对按序收到的数据中的最高序号给出确认，因此B发送的去人报文段中的去人好仍然是31（即期望收到的序号），而不是32或33。
        现在假定B收到了序号为31的数据，并把序号为31~33的数据交付给主机，然后B删除这些数据。接着把接收窗口向前移动3个序号，同时给A发送去人，其中窗口值仍为20，但确认号是34。这表明B已经收到了到序号33位置的数据。我们注意到，B还收到了序号为37，38和40的数据，但这些都没有按序到达，只能先暂存在接收窗口中。A收到B的确认后，就可以把发送窗口向前滑动3个序号，但指针P2不动。可以看出，现在A的可用窗口增大了，可发送的序号范围是42~53。
        A在继续发送完序号42~53的数据后，指针P2向前移动和P3重合。发送窗口内的序号都已用完，但还没有再收到确认。由于A的发送窗口已满，可用窗口已减小到零，因此必须停止发送。请注意，存在下面这种可能性，就是发送窗口内所有的数据都已正确到达B，B也早已发出了去人。但不幸的是，所有这些确认都滞留在网络中。在没有收到B的确认时，A不能猜测：“或许B收到了吧！”为了保证可靠传输，A只能认为B还没有收到这些数据。于是，A在经过一点时间后（由超时计时器控制）就重传这部分数据，重新设置超时计时器，知道收到B的去人为止。如果A收到确认号落在发送窗口内，那么A就可以使发送窗口继续向前滑动，并发送新的数据。
        我们在前面曾给出了这些的概念：发送方的应用进程把字节流写入TCP的发送缓存，接收方得应用进程从TCP的接收缓存中读取字节流。下面我们就进一步讨论前面讲的窗口和缓存的关系。发送方维持的发送缓存和发送窗口，以及接收方维持的接收缓存和接收窗口。这里首先要明确两点。第一，缓存空间和序号空间都是有限的，并且都是循环使用的。最好是把它们画成圆环状的。但这里为了画图的方便，我们还是把它们画成长条状的，同时也不考虑循环使用缓存空间和序号空间的问题。第二，由于实际上缓存或窗口中的字节数是非常大的，因此无法在图中一个个字节的位置标注清楚。这样，图中的一些指针也无法准确画成指向某一字节的位置。但这并不妨碍用这种表示来说明缓存和窗口的关系。
        我们先看一下发送方的情况。
        发送缓存用来暂时存放：
        1）发送应用程序传送给发送方TCP准备发送的数据；
        2） TCP已发送出但尚未收到确认的数据。
        发送窗口通常只是发送缓存的一部分。已被确认的数据应当从发送缓存中删除，因此发送缓存和发送窗口的后沿是重合的。发送应用程序最后写入发送缓存的字节减去最后被确认的字节，就是还保留在发送缓存中的被写入的字节数。发送应用程序必须控制写入缓存的速率，不能太快，否则发送缓存就会没有存放数据的空间。
        在看一下接收方的情况。
        接收缓存用来暂时存放：
        1）按序到达的、但尚未被接收应用程序读取的数据；
        2）未按序到达的数据。
        如果收到的分组被检测出有差错，则要丢弃。如果接收应用程序来不及读取收到的数据，接收缓存最终就会被填满，使接收矿口减小到零。反之，如果接收应用程序就够及时从接收缓存中读取收到的数据，接收窗口就可以增大，但最大不能超过接收缓存的大小。还指出了下一个期望收到的字节号。这个字节号也就是接收方给发送方的报文段的首部中的确认号。
        根据以上所讨论的，我们还要再强调以下三点。
        第一，虽然A的发送窗口是根据B的接收窗口设置的，但在同一时刻，A的发送窗口并不总是和B的接收窗口
