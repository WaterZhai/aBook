前言

软件质量是被大多数程序员挂在嘴上而不是放在心上的东西！
除了完全外行和真正的编程高手外，初读本书，你最先的感受将是惊慌：“哇！我以前捏造的C++/C程序怎么会有那么多的毛病？”
别难过，作者只不过比你早几年、多几次惊慌而已。
请花一两个小时认真阅读这本百页经书，你将会获益匪浅，这是前面N-1个读者的建议。

一、编程老手与高手的误区
自从计算机问世以来，程序设计就成了令人羡慕的职业，程序员在受人宠爱之后容易发展成为毛病特多却常能自我臭美的群体。
如今在Internet上流传的“真正”的程序员据说是这样的：
（1）真正的程序员没有进度表，只有讨好领导的马屁精才有进度表，真正的程序员会让领导提心吊胆。
（2）真正的程序员不写使用说明书，用户应当自己去猜想程序的功能。
（3）真正的程序员几乎不写代码的注释，如果注释很难写，它理所当然也很难读。
（4）真正的程序员不画流程图，原始人和文盲才会干这事。
（5）真正的程序员不看参考手册，新手和胆小鬼才会看。
（6）真正的程序员不写文档也不需要文档，只有看不懂程序的笨蛋才用文档。
（7）真正的程序员认为自己比用户更明白用户需要什么。
（8）真正的程序员不接受团队开发的理念，除非他自己是头头。
（9）真正的程序员的程序不会在第一次就正确运行，但是他们愿意守着及其进行若干个30小时的调试改错。
（10）真正的陈新雇员不会在上午9：00到下午5：00之间工作，如果你看到他在上午9：00工作，这表明他从昨晚一直干到现在。
……

具备上述特征越多，越显得水平高，资格老。所以别奇怪，程序员的很多缺点竟然可以被当做优点来欣赏。就像在武侠小说中，那些独来独往、不受约束且带点邪气的高手最令人崇拜。我曾静也这样信奉，并且希望自己成为那样的“真正”的程序员，结果没有得到好下场。

我从读大学到博士毕业十年来一直勤奋好学，累计编写了数十万行C++/C代码。有这样的苦劳和疲劳，我应该称得上是编程老手了吧？
我开发的软件都与科研相关（集成电路CAD和3D图形学领域），动辄数万行程序，技术复杂，难度颇高。这些软件频频获奖，有一个软件获得首届中国大学生电脑大赛软件展示一等奖。在1995年开发的一套图形软件包库到2000年还有人买。罗列出这些“业绩”，可以说明我算得上是编程高手了吧？
可惜这种个人感觉不等于事实。

读博期间我曾用一年时间开发了一个近10万行C++代码的3D图形软件产品，我内心得意表面谦虚地向一位真正的软件高手请教。他虽然从未涉足过3D图形领域，却在几十分钟内指出该软件多处重大设计错误。让人感觉那套软件使用纸糊的华丽衣服，扯一下掉一块，戳一下破个洞。我目瞪口呆地意识到这套软件毫无实用价值，一年的心血白花了，并且害死了自己的软件公司。

人的顿悟通常发生在最心痛的时刻，在沮丧和心痛之后，我作了深刻反省，“面壁”半年，重新温习软件设计的基础知识。补修“内功”之后，又觉得腰板硬了起来。博士毕业前半年，我曾到微软中国研究院找工作，接受微软公司一位资深软件工程师的面试。他让我写函数strcpy的代码。
太容易了吧？
错！
这么一个小不点的函数，他从三方面考察：
（1）编程风格；
（2）出错处理；
（3）算法复杂度分析（用于提高性能）。
在大学里从来没有人如此严格地考查过我的程序。我花了半个小时，修改了数次，他还不尽满意，让我回家好好琢磨。我精神抖擞地进“考场”，大汗淋漓地出“考场”。这“高手”当得也太窝囊了。我又好好地反省了一次。

我把反省后的心得体会放在网上传阅，引起了不少软件开发人员的共鸣。我因此有幸和国产大型IT企业如华为、上海贝尔、中兴等公司的同志们广泛交流。大家认为提高质量与生产率是软件工程要解决的核心问题。高质量程序设计是非常重要的环节，毕竟软件是靠编程来实现的。
我们心目中的老手们和高手们能否编写出高质量的程序来？
不见得都能！

就我的经历与阅历来看，国内大学的计算机教育压根就没有灌输高质量程序设计的观念，教师们和学生们也很少自觉关心软件的质量。勤奋好学的程序员长期在低质量的程序堆中滚爬，吃尽苦头之后才有一些心得体会，长进极慢，我就是一例。
现在国内IT企业拥有学士、硕士、博士文凭的软件开发人员比比皆是，但他们在接受大学教育时就“先天不足”，岂能一到企业就突然实现质的飞跃。试问有多少软件开发人员对正确性、健壮性、可靠性、效率、易用性、可读性（可理解性）、可扩展性、可复用性、兼容性、可移植性等质量属性了如指掌？并且能在实践中运用自如？。“高质量”可不是干活小心点就能实现的！
我们有充分的理由疑虑：
（1）编程老手可能会长期用隐含错误的方式编程（习惯成自然），发现毛病后就不愿相信那是真的！
（2）编程高手可以在某一领域写出极有水平的代码，但未必能从全局把握软件质量的方方面面。


事实证明如此。我到上海贝尔工作一年来，陆续面试或测试过近百名“新”“老”程序员的编程技能，质量合格率大约是10%。很少有人能够写出完全符合质量要求的if语句，很多程序员对指针、内存管理一知半解，……。
领导们不敢相信这是真的。我做过现场试验：有一次部门新进14名硕士生，在开欢迎会之前对他们进行“C++/C编程技能”摸底考试。我问大家试题难不难？所有的人都回答不难。结果没有一个人及格，有半数人得零分。竞争对手公司的朋友们也做过试验，同样一败涂地。

真的不是我“心狠手辣”或者要求过高，而是很多软件开发人员对自己的要求不够高。
要知道华为、上海贝尔、中兴等公司的员工素质在国内IT企业中是比较前列的，倘若他们的变成质量都如此差的话，我们怎么敢期望中小公司拿出高质量的软件呢？连程序都编不好，还谈什么振兴民族软件产业，岂不胡扯。

我打算定义编程老手和编程高手，请您别见笑。
定义1：能长期稳定地编写出高质量程序的程序员称为编程老手。
定义2：能长期稳定地编写出高难度、高质量程序的程序员称为编程高手。
根据上述定义，马上得出第一推论：我既不是高手也算不上是老手。

在写此书前，我阅读了不少程序设计方面的英文著作，越看越羞惭。因为发现自己连编程基本技能都未能全面掌握，顶多算是二流水平，还好意思谈什么老手和高手。希望和我一样在国内土生土长的程序员朋友们能够做到：
（1）知错就改；
（2）经常温故而知新；
（3）坚持学习，天天向上。

二、本书导读

首先请做附录B的C++/C试题（不要看答案），考察自己的编程质量究竟如何。然后参照答案严格打分。
（1）如果你只得了几十分，请不要声张，也不要太难过。编程质量差往往是由于不良习惯造成的，与人的智力、能力没有多大关系，还有药可救的。成绩越差，可以进步的空间就越大，中国不就是在落后中赶超发达资本主义国家吗？只要你能下决心改掉不良的编程习惯，第二次考试就能及格了。
（2）如果你考及格了，表明你的技术基础不错，希望你能虚心学习、不断进步。如果你还没有找到合适的工作单位，不妨到上海贝尔试一试。
（3）如果你考出85分以上的好成绩，你有义务和资格为你所在的团队作“C++/C编程”培训。希望你能和我们多多交流、相互促进。半年前我曾经发现一颗好苗子，就把他挖到我们小组来。
（4）如果你在没有任何提示的情况下考了满分，希望你能收我做你的徒弟。

编程考试结束后，请阅读本书的正文。
本书第一章至第六章主要论述C++/C编程风格。难度不高，但是细节比较多。别小看了，提高质量就是要从这些点点滴滴做起。世上不存在最好的编程风格，一切因需求而定。团队开发讲究风格一致，如果制订了大家认可的编程风格，那么所有组员都要遵守。如果读者觉得本书的编程风格比较合你的工作，那么就采用它，不要只看不做。人在小时候说话发音不准，写字潦草，如果不改正，总有后悔的时候。编程也是同样的道理。
第七章至第十一章是专题论述，技术难度比较高，看书时要积极思考。特别是第七章“内存管理”，读了并不表示懂了，懂了并不表示就能正确使用。有一位同事看了第七章后觉得“野指针”写的不错，与我切磋了一把。可是过了两周，他告诉我，他忙了两天追查一个Bug，想不到又是“野指针”出问题，只好重读第七章。
光看本书对提高编程质量是有限的，建议大家阅读本书的参考文献，那些都是经典名著。

如果你的编程质量已经过关了，不要就此满足。如果你想成为优秀的软件开发人员，建议你阅读并按照CMMI规范做事，让自己的综合水平上升一个台阶。上海贝尔的员工可以向网络应用事业部软件工程研究小组索取CMMI有关资料，最好能参加培训。

三、版权声明

本书的大部分内容取材于作者一年前的书籍手稿（尚未出版），现整理汇编成为上海贝尔网络应用事业部的一个规范化文件，同时作为培训教材。
由于C++/C编程是总所周知的技术，没有秘密可言。编程的好经验应该大家共享，我们自己也是这么学来的。作者原意公开本书的电子文档。
版权声明如下：
（1）读者可以任意拷贝、修改本书的内容，但不可以篡改作者及所属单位。
（2）未经作者许可，不得出版或大量印发本书。
（3）如果竞争对手公司的员工得到本书，请勿公开使用，以免发生纠纷。
预计到2002年7月，我们将建立切合中国国情的CMMI3级解决方案。届时，包括本书在内的约1000页规范将严格受控。

欢迎读者对本书提出批评建议。

林锐，2001年7月