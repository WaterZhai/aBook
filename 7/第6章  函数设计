第6章  函数设计
函数是C++/C程序的基本功能单元，其重要性不言而喻。函数设计的细微缺点很容易导致该函数被错用，所以光使函数的功能正确是不够的。本章重点论述函数的接口设计和内部实现的一些规则。
函数接口的两个要素是参数和返回值。C语言中，函数的参数和返回值的传递方式有两种：值传递（pass by value）和指针传递（pass by pointer）。C++语言中多了引用传递（pass by reference）。由于引用传递的性质象指针传递，而使用方式却象值传递，初学者常常迷惑不解，容易引起混乱，请先阅读6.6节“引用与指针的比较”。

6.1  参数的规则
· 【规则6-1-1】参数的书写要完整，不要贪图省事只写参数的类型而省略参数名字。如果函数没有参数，则用void填充。
例如：
    void SetValue(int width, int height); //良好的风格
    void SetValue(int, int); //不良的风格
    float GetValue(void);  //良好的风格
    float GetValue();  //不良的风格

· 【规则6-1-2】参数命名要恰当，顺序要合理。
    例如编写字符串拷贝函数StringCopy，它有两个参数。如果把参数名字起为str1和str2，例如
        void StringCopy(char *str1, char *str2);
    那么我们很难搞清楚究竟是把str1拷贝到str2中，还是刚好倒过来。
    可以把参数名字起得更有意义，如叫strSource和strDestiation。这样从名字上就可以看出应该把strSource拷贝到strDestiation。
    还有一个问题，这两个参数那一个该在前那一个该在后？参数的循序要遵循程序员的习惯。一般地，应将目的参数放在前面，源参数放在后面。
    如果将函数声明为：
        void StringCopy(char *strSource, char *strDestiation);
    别人在使用时可能会不假思索地写成如下形式：
        char str[20];
        StringCopy(str, "Hello World");//参数顺序颠倒
· 【规则6-1-3】如果参数是指针，且仅作输入用，则应在类型前加const，以防止该指针在函数体内被意外修改。
    例如：
    void StringCopy(char *strDestination, const char *strSource);
· 【规则6-1-4】如果输入参数以值传递的方式传递对象，则宜改用“const &”方式来传递，这样可以省去临时对象的构造和析构过程，从而提高效率。
~ 【建议6-1-1】避免函数有太多的参数，参数个数尽量控制在5个以内。如果参数太多，在使用时容易将参数类型或顺序搞错。
~ 【建议6-1-2】尽量不要使用类型和数目不确定的参数。
    C标准库printf是采用不确定参数的典型代表，其原型为：
    int printf(const char *format[, argument]...);
    这种风格的函数在编译时丧失了严格的类型安全检查。

6.2  返回值的规则
