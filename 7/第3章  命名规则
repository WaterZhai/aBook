第3章  命名规则

比较著名的命名规则当推Microsoft公司的“匈牙利”法，该命名规则的主要思想是“在变量和函数名中加入前缀以增进人们对程序的理解”。例如所有的字符变量均以ch为前缀，若是指针变量则追加前缀p。如果一个变量由ppch开头，则表明它是指向字符指针的指针。
“匈牙利”法最大的缺点是烦琐，例如：
int i, j, k;
float x, y, z;
倘若采用“匈牙利”命名规则，则应当写成
int ii, ij, iz;  //前缀i表示int类型
float fx, fy, fz;  //前缀f表示float类型
如此烦琐的程序会让绝大多数程序员无法忍受。
据考察，没有一种命名规则可以让所有的程序员赞同，程序设计教科书一般都不指定命名规则。命名规则对软件产品而言并不是“成败攸关”的事，我们不要花太多精力，试图发明世界上最好的命名规则，而应当制定一种令大多数项目成员满意的命名规则，并在项目中贯彻实施。

3.1  共性规则
本节论述的共性规则是被大多数程序员采纳的，我们应当在遵循这些共性规则的前提下，再扩充特定的规则，如3.2节。
· 【规则3-1-1】标识符应当直观且可以拼读，可望文知意，不必进行“解码”。
    标识符最好采用英文单词或其组合，便于记忆和阅读。切忌使用汉语拼音来命名。程序中的英文单词一般不会太复杂，用词应当准确。例如不要把CurrentValue写成NowValue。
· 【规则3-1-2】标识符的长度应当符合“min-length && max-information”原则。
    几十年前老ANSI C规定名字不准超过6个字符，现今的C++/C不再有此限制。一般来说，长名字能更好地表达含义，所以函数名、变量名、类名长达十几个字符不足为怪。那么名字是否越长越好？不见得！例如变量名maxval就比maxValueUntllOverflow好用。单字符的名字也是有用的，常见的如i,j,k,m,n,x,y,z等，它们通常可用作函数内的局部变量。
· 【规则3-1-3】命名规则尽量与所采用的操作系统或开发工具的风格保持一致。
    例如Windows应用程序的标识符通常采用“大小写”混排的方式，如AddChild。而Unix应用程序的标识符通常采用“小写加下划线”，如add_child。别把这两类风格混在一起用。
· 【规则3-1-4】程序中不要出现仅靠大小写区分的相似的标识符。
    例如：
    int x,X;  //变量x与X容易混淆
    void foo(int x);  //函数foo与FOO容易混淆
    void FOO(float x);
· 【规则3-1-5】程序中不要出现标识符完全相同的局部变量和全局变量，尽管两者的作用域不同而不会发生语法错误，但会使人误解。
· 【规则3-1-6】变量的名字应当使用“名词”或者“形容词+名词”。
    例如：
    float value;
    float oldValue;
    float newValue;
· 【规则3-1-7】全局函数的名字应当使用“动词”或者“动词+名词”（动宾词组）。
    类的成员函数应当只使用“动词”，被省略掉的名词就是对象本身。
    例如：
    DrawBox();  //全局函数
    box->Draw();  //类的成员函数
· 【规则3-1-8】用正确的反义词组命名具有互斥意义的变量或相反动作的函数等。
    例如：
    int minValue;
    int maxValue;

    int SetValue(...);
    int GetValue(...);
~ 【建议3-1-1】尽量避免名字中出现数字编号，如Value1,Value2等，除非逻辑上的确需要编号。这是为了防止程序员偷懒，不肯为命名动脑筋而导致产生无意义的名字（因为用数字编号最省事）。

3.2  简单的Windows应用程序命名规则
作者对“匈牙利”命名规则做了合理的简化，下述的命名规则简单易用，比较适合于Windows应用软件的开发。
· 【规则3-2-1】类名和函数名用大写字母开头的单词组合而成。
    例如：
    class Node;  //类名
    class LeafNode;  //类名
    void Draw(void);  //函数名
    void SetValue(int value);  //函数名
· 【规则3-2-2】变量和参数用小写字母开头的单词组合而成。
    例如：
    BOOL flag;
    int drawMode;
· 【规则3-2-3】常量全用大写的字母，用下划线分割单词。
    例如：
    const int MAX = 100;
    const int MAX_LENGTH = 100; 
· 【规则3-2-4】静态变量加前缀